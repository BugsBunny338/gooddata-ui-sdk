// (C) 2020 GoodData Corporation

/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import globalImportUrl from "url";
import globalImportQs from "qs";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

// utility function that adds support for nested objects in query
// @ts-ignore
const addFlattenedObjectTo = (object: any, target: any): void => {
    const flattened = globalImportQs.parse(globalImportQs.stringify(object), { depth: 0 });
    Object.keys(flattened).forEach((key) => {
        target[key] = (flattened as any)[key];
    });
};

/**
 *
 * @export
 * @interface AnalyticalDashboard
 */
export interface AnalyticalDashboard {
    /**
     *
     * @type {AnalyticalDashboardData}
     * @memberof AnalyticalDashboard
     */
    data: AnalyticalDashboardData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof AnalyticalDashboard
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof AnalyticalDashboard
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardAttributes
 */
export interface AnalyticalDashboardAttributes {
    /**
     *
     * @type {string}
     * @memberof AnalyticalDashboardAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof AnalyticalDashboardAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AnalyticalDashboardAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {object}
     * @memberof AnalyticalDashboardAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardAttributesAllOf
 */
export interface AnalyticalDashboardAttributesAllOf {
    /**
     *
     * @type {object}
     * @memberof AnalyticalDashboardAttributesAllOf
     */
    content?: object;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardData
 */
export interface AnalyticalDashboardData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof AnalyticalDashboardData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AnalyticalDashboardData
     */
    type: string;
    /**
     *
     * @type {AnalyticalDashboardAttributes}
     * @memberof AnalyticalDashboardData
     */
    attributes?: AnalyticalDashboardAttributes;
    /**
     *
     * @type {AnalyticalDashboardRelationships}
     * @memberof AnalyticalDashboardData
     */
    relationships?: AnalyticalDashboardRelationships;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardDataAllOf
 */
export interface AnalyticalDashboardDataAllOf {
    /**
     *
     * @type {AnalyticalDashboardRelationships}
     * @memberof AnalyticalDashboardDataAllOf
     */
    relationships?: AnalyticalDashboardRelationships;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardDataRequest
 */
export interface AnalyticalDashboardDataRequest {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof AnalyticalDashboardDataRequest
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AnalyticalDashboardDataRequest
     */
    type: string;
    /**
     *
     * @type {AnalyticalDashboardAttributes}
     * @memberof AnalyticalDashboardDataRequest
     */
    attributes?: AnalyticalDashboardAttributes;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardDataRequestAllOf
 */
export interface AnalyticalDashboardDataRequestAllOf {
    /**
     *
     * @type {AnalyticalDashboardAttributes}
     * @memberof AnalyticalDashboardDataRequestAllOf
     */
    attributes?: AnalyticalDashboardAttributes;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardRelationships
 */
export interface AnalyticalDashboardRelationships {
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof AnalyticalDashboardRelationships
     */
    labels?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof AnalyticalDashboardRelationships
     */
    visualizationObjects?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardRelationshipsLabels
 */
export interface AnalyticalDashboardRelationshipsLabels {
    /**
     *
     * @type {Array | RelationshipToOne}
     * @memberof AnalyticalDashboardRelationshipsLabels
     */
    data?: Array | RelationshipToOne;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardRequest
 */
export interface AnalyticalDashboardRequest {
    /**
     *
     * @type {AnalyticalDashboardDataRequest}
     * @memberof AnalyticalDashboardRequest
     */
    data: AnalyticalDashboardDataRequest;
}
/**
 *
 * @export
 * @interface AnalyticalDashboards
 */
export interface AnalyticalDashboards {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof AnalyticalDashboards
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof AnalyticalDashboards
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<AnalyticalDashboardsItem>}
     * @memberof AnalyticalDashboards
     */
    data: Array<AnalyticalDashboardsItem>;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardsAllOf
 */
export interface AnalyticalDashboardsAllOf {
    /**
     *
     * @type {Array<AnalyticalDashboardsItem>}
     * @memberof AnalyticalDashboardsAllOf
     */
    data?: Array<AnalyticalDashboardsItem>;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardsItem
 */
export interface AnalyticalDashboardsItem {
    /**
     *
     * @type {Links}
     * @memberof AnalyticalDashboardsItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof AnalyticalDashboardsItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AnalyticalDashboardsItem
     */
    type: string;
    /**
     *
     * @type {AnalyticalDashboardAttributes}
     * @memberof AnalyticalDashboardsItem
     */
    attributes?: AnalyticalDashboardAttributes;
    /**
     *
     * @type {AnalyticalDashboardRelationships}
     * @memberof AnalyticalDashboardsItem
     */
    relationships?: AnalyticalDashboardRelationships;
}
/**
 *
 * @export
 * @interface AnalyticalDashboardsItemAllOf
 */
export interface AnalyticalDashboardsItemAllOf {
    /**
     *
     * @type {Links}
     * @memberof AnalyticalDashboardsItemAllOf
     */
    links?: Links;
}
/**
 * @type AnalyticsObject
 * @export
 */
export type AnalyticsObject = AnalyticalDashboard | Metric | VisualizationObjectSchema;
/**
 * @type AnalyticsObjectRequest
 * @export
 */
export type AnalyticsObjectRequest = AnalyticalDashboardRequest | MetricRequest | VisualizationObjectRequest;
/**
 *
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     *
     * @type {AttributeData}
     * @memberof Attribute
     */
    data: AttributeData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Attribute
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Attribute
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface AttributeAttributes
 */
export interface AttributeAttributes {
    /**
     *
     * @type {string}
     * @memberof AttributeAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof AttributeAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof AttributeAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof AttributeAttributes
     */
    granularity?: AttributeAttributesGranularityEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributeAttributesGranularityEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 *
 * @export
 * @interface AttributeAttributesAllOf
 */
export interface AttributeAttributesAllOf {
    /**
     *
     * @type {string}
     * @memberof AttributeAttributesAllOf
     */
    granularity?: AttributeAttributesAllOfGranularityEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributeAttributesAllOfGranularityEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 *
 * @export
 * @interface AttributeData
 */
export interface AttributeData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof AttributeData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AttributeData
     */
    type: string;
    /**
     *
     * @type {AttributeAttributes}
     * @memberof AttributeData
     */
    attributes?: AttributeAttributes;
    /**
     *
     * @type {AttributeRelationships}
     * @memberof AttributeData
     */
    relationships?: AttributeRelationships;
}
/**
 *
 * @export
 * @interface AttributeDataAllOf
 */
export interface AttributeDataAllOf {
    /**
     *
     * @type {AttributeAttributes}
     * @memberof AttributeDataAllOf
     */
    attributes?: AttributeAttributes;
}
/**
 *
 * @export
 * @interface AttributeDataAllOf1
 */
export interface AttributeDataAllOf1 {
    /**
     *
     * @type {AttributeRelationships}
     * @memberof AttributeDataAllOf1
     */
    relationships?: AttributeRelationships;
}
/**
 *
 * @export
 * @interface AttributeRelationships
 */
export interface AttributeRelationships {
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof AttributeRelationships
     */
    labels?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AttributeRelationshipsDataset}
     * @memberof AttributeRelationships
     */
    dataset?: AttributeRelationshipsDataset;
}
/**
 *
 * @export
 * @interface AttributeRelationshipsDataset
 */
export interface AttributeRelationshipsDataset {
    /**
     *
     * @type {RelationshipToOne}
     * @memberof AttributeRelationshipsDataset
     */
    data?: RelationshipToOne;
}
/**
 *
 * @export
 * @interface Attributes
 */
export interface Attributes {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Attributes
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Attributes
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<AttributesItem>}
     * @memberof Attributes
     */
    data: Array<AttributesItem>;
}
/**
 *
 * @export
 * @interface AttributesAllOf
 */
export interface AttributesAllOf {
    /**
     *
     * @type {Array<AttributesItem>}
     * @memberof AttributesAllOf
     */
    data?: Array<AttributesItem>;
}
/**
 *
 * @export
 * @interface AttributesItem
 */
export interface AttributesItem {
    /**
     *
     * @type {Links}
     * @memberof AttributesItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof AttributesItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof AttributesItem
     */
    type: string;
    /**
     *
     * @type {AttributeAttributes}
     * @memberof AttributesItem
     */
    attributes?: AttributeAttributes;
    /**
     *
     * @type {AttributeRelationships}
     * @memberof AttributesItem
     */
    relationships?: AttributeRelationships;
}
/**
 *
 * @export
 * @interface BasicObjectAttributes
 */
export interface BasicObjectAttributes {
    /**
     *
     * @type {string}
     * @memberof BasicObjectAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof BasicObjectAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof BasicObjectAttributes
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface Dataset
 */
export interface Dataset {
    /**
     *
     * @type {DatasetData}
     * @memberof Dataset
     */
    data: DatasetData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Dataset
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Dataset
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface DatasetAttributes
 */
export interface DatasetAttributes {
    /**
     *
     * @type {string}
     * @memberof DatasetAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof DatasetAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof DatasetAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof DatasetAttributes
     */
    type?: DatasetAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof DatasetAttributes
     */
    sourceTable?: string;
    /**
     *
     * @type {Array<DatasetAttributesAllOfGrain>}
     * @memberof DatasetAttributes
     */
    grain?: Array<DatasetAttributesAllOfGrain>;
    /**
     *
     * @type {Array<DatasetAttributesAllOfReferenceProperties>}
     * @memberof DatasetAttributes
     */
    referenceProperties?: Array<DatasetAttributesAllOfReferenceProperties>;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetAttributesTypeEnum {
    NORMAL = "NORMAL",
    DATE = "DATE",
}

/**
 *
 * @export
 * @interface DatasetAttributesAllOf
 */
export interface DatasetAttributesAllOf {
    /**
     *
     * @type {string}
     * @memberof DatasetAttributesAllOf
     */
    type?: DatasetAttributesAllOfTypeEnum;
    /**
     *
     * @type {string}
     * @memberof DatasetAttributesAllOf
     */
    sourceTable?: string;
    /**
     *
     * @type {Array<DatasetAttributesAllOfGrain>}
     * @memberof DatasetAttributesAllOf
     */
    grain?: Array<DatasetAttributesAllOfGrain>;
    /**
     *
     * @type {Array<DatasetAttributesAllOfReferenceProperties>}
     * @memberof DatasetAttributesAllOf
     */
    referenceProperties?: Array<DatasetAttributesAllOfReferenceProperties>;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetAttributesAllOfTypeEnum {
    NORMAL = "NORMAL",
    DATE = "DATE",
}

/**
 *
 * @export
 * @interface DatasetAttributesAllOfGrain
 */
export interface DatasetAttributesAllOfGrain {
    /**
     *
     * @type {string}
     * @memberof DatasetAttributesAllOfGrain
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DatasetAttributesAllOfGrain
     */
    type?: DatasetAttributesAllOfGrainTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetAttributesAllOfGrainTypeEnum {
    ATTRIBUTE = "ATTRIBUTE",
    DATASET = "DATASET",
}

/**
 *
 * @export
 * @interface DatasetAttributesAllOfIdentifier
 */
export interface DatasetAttributesAllOfIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetAttributesAllOfIdentifier
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof DatasetAttributesAllOfIdentifier
     */
    type?: DatasetAttributesAllOfIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetAttributesAllOfIdentifierTypeEnum {
    DATASET = "DATASET",
}

/**
 *
 * @export
 * @interface DatasetAttributesAllOfReferenceProperties
 */
export interface DatasetAttributesAllOfReferenceProperties {
    /**
     *
     * @type {DatasetAttributesAllOfIdentifier}
     * @memberof DatasetAttributesAllOfReferenceProperties
     */
    identifier?: DatasetAttributesAllOfIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof DatasetAttributesAllOfReferenceProperties
     */
    multivalue?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof DatasetAttributesAllOfReferenceProperties
     */
    sourceColumns?: Array<string>;
}
/**
 *
 * @export
 * @interface DatasetData
 */
export interface DatasetData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof DatasetData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetData
     */
    type: string;
    /**
     *
     * @type {DatasetAttributes}
     * @memberof DatasetData
     */
    attributes?: DatasetAttributes;
    /**
     *
     * @type {DatasetRelationships}
     * @memberof DatasetData
     */
    relationships?: DatasetRelationships;
}
/**
 *
 * @export
 * @interface DatasetDataAllOf
 */
export interface DatasetDataAllOf {
    /**
     *
     * @type {DatasetAttributes}
     * @memberof DatasetDataAllOf
     */
    attributes?: DatasetAttributes;
}
/**
 *
 * @export
 * @interface DatasetDataAllOf1
 */
export interface DatasetDataAllOf1 {
    /**
     *
     * @type {DatasetRelationships}
     * @memberof DatasetDataAllOf1
     */
    relationships?: DatasetRelationships;
}
/**
 *
 * @export
 * @interface DatasetRelationships
 */
export interface DatasetRelationships {
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof DatasetRelationships
     */
    attributes?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof DatasetRelationships
     */
    facts?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof DatasetRelationships
     */
    references?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface Datasets
 */
export interface Datasets {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Datasets
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Datasets
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<DatasetsItem>}
     * @memberof Datasets
     */
    data: Array<DatasetsItem>;
}
/**
 *
 * @export
 * @interface DatasetsAllOf
 */
export interface DatasetsAllOf {
    /**
     *
     * @type {Array<DatasetsItem>}
     * @memberof DatasetsAllOf
     */
    data?: Array<DatasetsItem>;
}
/**
 *
 * @export
 * @interface DatasetsItem
 */
export interface DatasetsItem {
    /**
     *
     * @type {Links}
     * @memberof DatasetsItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof DatasetsItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetsItem
     */
    type: string;
    /**
     *
     * @type {DatasetAttributes}
     * @memberof DatasetsItem
     */
    attributes?: DatasetAttributes;
    /**
     *
     * @type {DatasetRelationships}
     * @memberof DatasetsItem
     */
    relationships?: DatasetRelationships;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
}
/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects: Array<DeclarativeVisualizationObject>;
}
/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeColumnDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 * A data source.
 * @export
 * @interface DeclarativeDataSource
 */
export interface DeclarativeDataSource {
    /**
     * Data source name.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeDataSource
     */
    tables: Array<DeclarativeTable>;
}
/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     * A name of the source/originating table for the dataset from the physical data model.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    sourceTable: string;
}
/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeDateDatasetGranularitiesEnum {
    Minute = "minute",
    Hour = "hour",
    Day = "day",
    Week = "week",
    Month = "month",
    Quarter = "quarter",
    Year = "year",
    MinuteOfHour = "minuteOfHour",
    HourOfDay = "hourOfDay",
    DayOfWeek = "dayOfWeek",
    DayOfMonth = "dayOfMonth",
    DayOfYear = "dayOfYear",
    WeekOfYear = "weekOfYear",
    MonthOfYear = "monthOfYear",
    QuarterOfYear = "quarterOfYear",
}

/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
}
/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description: string;
    /**
     * A flag indicating whether the label should be treated as a primary one.
     * @type {boolean}
     * @memberof DeclarativeLabel
     */
    primary: boolean;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
}
/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances: Array<DeclarativeDateDataset>;
}
/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
}
/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof DeclarativeModel
     */
    pdm: DeclarativePdm;
}
/**
 * A physical data model (PDM) representation.
 * @export
 * @interface DeclarativePdm
 */
export interface DeclarativePdm {
    /**
     * An array of data sources.
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativePdm
     */
    sources: Array<DeclarativeDataSource>;
}
/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
}
/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table name.
     * @type {string}
     * @memberof DeclarativeTable
     */
    name: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspace
 */
export interface DeclarativeWorkspace {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspace
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof DeclarativeWorkspace
     */
    pdm: DeclarativePdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspace
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface Fact
 */
export interface Fact {
    /**
     *
     * @type {FactData}
     * @memberof Fact
     */
    data: FactData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Fact
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Fact
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface FactAttributes
 */
export interface FactAttributes {
    /**
     *
     * @type {string}
     * @memberof FactAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof FactAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof FactAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof FactAttributes
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface FactAttributesAllOf
 */
export interface FactAttributesAllOf {
    /**
     *
     * @type {string}
     * @memberof FactAttributesAllOf
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface FactData
 */
export interface FactData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof FactData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof FactData
     */
    type: string;
    /**
     *
     * @type {FactAttributes}
     * @memberof FactData
     */
    attributes?: FactAttributes;
    /**
     *
     * @type {FactRelationships}
     * @memberof FactData
     */
    relationships?: FactRelationships;
}
/**
 *
 * @export
 * @interface FactDataAllOf
 */
export interface FactDataAllOf {
    /**
     *
     * @type {FactAttributes}
     * @memberof FactDataAllOf
     */
    attributes?: FactAttributes;
}
/**
 *
 * @export
 * @interface FactDataAllOf1
 */
export interface FactDataAllOf1 {
    /**
     *
     * @type {FactRelationships}
     * @memberof FactDataAllOf1
     */
    relationships?: FactRelationships;
}
/**
 *
 * @export
 * @interface FactRelationships
 */
export interface FactRelationships {
    /**
     *
     * @type {object}
     * @memberof FactRelationships
     */
    dataset?: object;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof FactRelationships
     */
    metrics?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof FactRelationships
     */
    visualizationObjects?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface Facts
 */
export interface Facts {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Facts
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Facts
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<FactsItem>}
     * @memberof Facts
     */
    data: Array<FactsItem>;
}
/**
 *
 * @export
 * @interface FactsAllOf
 */
export interface FactsAllOf {
    /**
     *
     * @type {Array<FactsItem>}
     * @memberof FactsAllOf
     */
    data?: Array<FactsItem>;
}
/**
 *
 * @export
 * @interface FactsItem
 */
export interface FactsItem {
    /**
     *
     * @type {Links}
     * @memberof FactsItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof FactsItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof FactsItem
     */
    type: string;
    /**
     *
     * @type {FactAttributes}
     * @memberof FactsItem
     */
    attributes?: FactAttributes;
    /**
     *
     * @type {FactRelationships}
     * @memberof FactsItem
     */
    relationships?: FactRelationships;
}
/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum GrainIdentifierTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}
/**
 * \"Resource objects\" appear in a JSON:API document to represent resources.
 * @export
 * @interface IncludedResource
 */
export interface IncludedResource {
    /**
     *
     * @type {string}
     * @memberof IncludedResource
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof IncludedResource
     */
    id: string;
    /**
     *
     * @type {IncludedResourceAttributes}
     * @memberof IncludedResource
     */
    attributes?: IncludedResourceAttributes;
    /**
     *
     * @type {Links}
     * @memberof IncludedResource
     */
    links?: Links;
}
/**
 * Members of the attributes object (\"attributes\") represent information about the resource object in which it\'s defined.
 * @export
 * @interface IncludedResourceAttributes
 */
export interface IncludedResourceAttributes {
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof IncludedResourceAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof IncludedResourceAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof IncludedResourceAttributes
     */
    tags?: Array<string>;
}
/**
 *
 * @export
 * @interface Label
 */
export interface Label {
    /**
     *
     * @type {LabelData}
     * @memberof Label
     */
    data: LabelData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Label
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Label
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface LabelAttributes
 */
export interface LabelAttributes {
    /**
     *
     * @type {string}
     * @memberof LabelAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof LabelAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof LabelAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof LabelAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof LabelAttributes
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface LabelAttributesAllOf
 */
export interface LabelAttributesAllOf {
    /**
     *
     * @type {boolean}
     * @memberof LabelAttributesAllOf
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof LabelAttributesAllOf
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface LabelData
 */
export interface LabelData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof LabelData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof LabelData
     */
    type: string;
    /**
     *
     * @type {LabelAttributes}
     * @memberof LabelData
     */
    attributes?: LabelAttributes;
    /**
     *
     * @type {LabelRelationships}
     * @memberof LabelData
     */
    relationships?: LabelRelationships;
}
/**
 *
 * @export
 * @interface LabelDataAllOf
 */
export interface LabelDataAllOf {
    /**
     *
     * @type {LabelAttributes}
     * @memberof LabelDataAllOf
     */
    attributes?: LabelAttributes;
}
/**
 *
 * @export
 * @interface LabelDataAllOf1
 */
export interface LabelDataAllOf1 {
    /**
     *
     * @type {LabelRelationships}
     * @memberof LabelDataAllOf1
     */
    relationships?: LabelRelationships;
}
/**
 *
 * @export
 * @interface LabelRelationships
 */
export interface LabelRelationships {
    /**
     *
     * @type {object}
     * @memberof LabelRelationships
     */
    attribute?: object;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof LabelRelationships
     */
    analyticalDashboards?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof LabelRelationships
     */
    metrics?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof LabelRelationships
     */
    visualizationObjects?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface Labels
 */
export interface Labels {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Labels
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Labels
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<LabelsItem>}
     * @memberof Labels
     */
    data: Array<LabelsItem>;
}
/**
 *
 * @export
 * @interface LabelsAllOf
 */
export interface LabelsAllOf {
    /**
     *
     * @type {Array<LabelsItem>}
     * @memberof LabelsAllOf
     */
    data?: Array<LabelsItem>;
}
/**
 *
 * @export
 * @interface LabelsItem
 */
export interface LabelsItem {
    /**
     *
     * @type {Links}
     * @memberof LabelsItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof LabelsItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof LabelsItem
     */
    type: string;
    /**
     *
     * @type {LabelAttributes}
     * @memberof LabelsItem
     */
    attributes?: LabelAttributes;
    /**
     *
     * @type {LabelRelationships}
     * @memberof LabelsItem
     */
    relationships?: LabelRelationships;
}
/**
 * The \"type\" and \"id\" to non-empty members.
 * @export
 * @interface Linkage
 */
export interface Linkage {
    /**
     *
     * @type {string}
     * @memberof Linkage
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof Linkage
     */
    id: string;
}
/**
 *
 * @export
 * @interface Links
 */
export interface Links {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof Links
     */
    self: string;
}
/**
 *
 * @export
 * @interface ListLinks
 */
export interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}
/**
 *
 * @export
 * @interface MandatoryObjectFields
 */
export interface MandatoryObjectFields {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof MandatoryObjectFields
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof MandatoryObjectFields
     */
    type: string;
}
/**
 * @type MetadataModelObject
 * @export
 */
export type MetadataModelObject = AnalyticsObject | Attribute | Dataset | Fact | Label | Source | Table;
/**
 * @type MetadataModelObjects
 * @export
 */
export type MetadataModelObjects =
    | AnalyticalDashboards
    | Attributes
    | Datasets
    | Facts
    | Labels
    | Metrics
    | Sources
    | Tables
    | VisualizationObjects;
/**
 *
 * @export
 * @interface Metric
 */
export interface Metric {
    /**
     *
     * @type {MetricData}
     * @memberof Metric
     */
    data: MetricData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Metric
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Metric
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface MetricAttributes
 */
export interface MetricAttributes {
    /**
     *
     * @type {string}
     * @memberof MetricAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof MetricAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof MetricAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {MetricAttributesAllOfContent}
     * @memberof MetricAttributes
     */
    content?: MetricAttributesAllOfContent;
}
/**
 *
 * @export
 * @interface MetricAttributesAllOf
 */
export interface MetricAttributesAllOf {
    /**
     *
     * @type {MetricAttributesAllOfContent}
     * @memberof MetricAttributesAllOf
     */
    content?: MetricAttributesAllOfContent;
}
/**
 *
 * @export
 * @interface MetricAttributesAllOfContent
 */
export interface MetricAttributesAllOfContent {
    /**
     *
     * @type {string}
     * @memberof MetricAttributesAllOfContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof MetricAttributesAllOfContent
     */
    maql?: string;
}
/**
 *
 * @export
 * @interface MetricData
 */
export interface MetricData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof MetricData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof MetricData
     */
    type: string;
    /**
     *
     * @type {MetricAttributes}
     * @memberof MetricData
     */
    attributes?: MetricAttributes;
    /**
     *
     * @type {MetricRelationships}
     * @memberof MetricData
     */
    relationships?: MetricRelationships;
}
/**
 *
 * @export
 * @interface MetricDataAllOf
 */
export interface MetricDataAllOf {
    /**
     *
     * @type {MetricRelationships}
     * @memberof MetricDataAllOf
     */
    relationships?: MetricRelationships;
}
/**
 *
 * @export
 * @interface MetricDataRequest
 */
export interface MetricDataRequest {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof MetricDataRequest
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof MetricDataRequest
     */
    type: string;
    /**
     *
     * @type {MetricAttributes}
     * @memberof MetricDataRequest
     */
    attributes?: MetricAttributes;
}
/**
 *
 * @export
 * @interface MetricDataRequestAllOf
 */
export interface MetricDataRequestAllOf {
    /**
     *
     * @type {MetricAttributes}
     * @memberof MetricDataRequestAllOf
     */
    attributes?: MetricAttributes;
}
/**
 *
 * @export
 * @interface MetricRelationships
 */
export interface MetricRelationships {
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof MetricRelationships
     */
    attributes?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof MetricRelationships
     */
    facts?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof MetricRelationships
     */
    labels?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof MetricRelationships
     */
    metrics?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof MetricRelationships
     */
    visualizationObjects?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface MetricRequest
 */
export interface MetricRequest {
    /**
     *
     * @type {MetricDataRequest}
     * @memberof MetricRequest
     */
    data: MetricDataRequest;
}
/**
 *
 * @export
 * @interface Metrics
 */
export interface Metrics {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Metrics
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Metrics
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<MetricsItem>}
     * @memberof Metrics
     */
    data: Array<MetricsItem>;
}
/**
 *
 * @export
 * @interface MetricsAllOf
 */
export interface MetricsAllOf {
    /**
     *
     * @type {Array<MetricsItem>}
     * @memberof MetricsAllOf
     */
    data?: Array<MetricsItem>;
}
/**
 *
 * @export
 * @interface MetricsItem
 */
export interface MetricsItem {
    /**
     *
     * @type {Links}
     * @memberof MetricsItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof MetricsItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof MetricsItem
     */
    type: string;
    /**
     *
     * @type {MetricAttributes}
     * @memberof MetricsItem
     */
    attributes?: MetricAttributes;
    /**
     *
     * @type {MetricRelationships}
     * @memberof MetricsItem
     */
    relationships?: MetricRelationships;
}
/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     *
     * @type {StockIdOrganizationScope}
     * @memberof Organization
     */
    stockId: StockIdOrganizationScope;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    id?: string;
}
/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 * References to other resource objects in a to-one (\"relationship\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 * @interface RelationshipToOne
 */
export interface RelationshipToOne {
    /**
     *
     * @type {string}
     * @memberof RelationshipToOne
     */
    type: string;
    /**
     *
     * @type {string}
     * @memberof RelationshipToOne
     */
    id: string;
}
/**
 *
 * @export
 * @interface RootLinks
 */
export interface RootLinks {
    /**
     *
     * @type {RootLinksMeta}
     * @memberof RootLinks
     */
    meta: RootLinksMeta;
}
/**
 *
 * @export
 * @interface RootLinksMeta
 */
export interface RootLinksMeta {
    /**
     * Links to all relevant objects on current path.
     * @type {Array<RootLinksMetaLinks>}
     * @memberof RootLinksMeta
     */
    links: Array<RootLinksMetaLinks>;
}
/**
 *
 * @export
 * @interface RootLinksMetaLinks
 */
export interface RootLinksMetaLinks {
    /**
     * Type of relation (object type collection)
     * @type {string}
     * @memberof RootLinksMetaLinks
     */
    rel: string;
    /**
     *
     * @type {string}
     * @memberof RootLinksMetaLinks
     */
    href: string;
}
/**
 *
 * @export
 * @interface Source
 */
export interface Source {
    /**
     *
     * @type {SourceData}
     * @memberof Source
     */
    data: SourceData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Source
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Source
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface SourceData
 */
export interface SourceData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof SourceData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof SourceData
     */
    type: string;
    /**
     *
     * @type {SourceRelationships}
     * @memberof SourceData
     */
    relationships?: SourceRelationships;
}
/**
 *
 * @export
 * @interface SourceDataAllOf
 */
export interface SourceDataAllOf {
    /**
     *
     * @type {SourceRelationships}
     * @memberof SourceDataAllOf
     */
    relationships?: SourceRelationships;
}
/**
 *
 * @export
 * @interface SourceRelationships
 */
export interface SourceRelationships {
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof SourceRelationships
     */
    tables?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface Sources
 */
export interface Sources {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Sources
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Sources
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<SourcesItem>}
     * @memberof Sources
     */
    data: Array<SourcesItem>;
}
/**
 *
 * @export
 * @interface SourcesAllOf
 */
export interface SourcesAllOf {
    /**
     *
     * @type {Array<SourcesItem>}
     * @memberof SourcesAllOf
     */
    data?: Array<SourcesItem>;
}
/**
 *
 * @export
 * @interface SourcesItem
 */
export interface SourcesItem {
    /**
     *
     * @type {Links}
     * @memberof SourcesItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof SourcesItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof SourcesItem
     */
    type: string;
    /**
     *
     * @type {SourceRelationships}
     * @memberof SourcesItem
     */
    relationships?: SourceRelationships;
}
/**
 *
 * @export
 * @interface StockIdOrganizationScope
 */
export interface StockIdOrganizationScope {
    /**
     *
     * @type {string}
     * @memberof StockIdOrganizationScope
     */
    apiId: string;
    /**
     *
     * @type {object}
     * @memberof StockIdOrganizationScope
     */
    scope?: object;
}
/**
 * A JSON:API document with a single resource
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Success
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Success
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface SuccessIncluded
 */
export interface SuccessIncluded {
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof SuccessIncluded
     */
    attributes?: { [key: string]: object };
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SuccessIncluded
     */
    id?: string;
    /**
     * The JSON:API resource type
     * @type {string}
     * @memberof SuccessIncluded
     */
    type?: string;
}
/**
 *
 * @export
 * @interface Table
 */
export interface Table {
    /**
     *
     * @type {TableData}
     * @memberof Table
     */
    data: TableData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof Table
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof Table
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface TableAttributes
 */
export interface TableAttributes {
    /**
     *
     * @type {string}
     * @memberof TableAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof TableAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof TableAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {Array<TableAttributesAllOfColumns>}
     * @memberof TableAttributes
     */
    columns?: Array<TableAttributesAllOfColumns>;
}
/**
 *
 * @export
 * @interface TableAttributesAllOf
 */
export interface TableAttributesAllOf {
    /**
     *
     * @type {Array<TableAttributesAllOfColumns>}
     * @memberof TableAttributesAllOf
     */
    columns?: Array<TableAttributesAllOfColumns>;
}
/**
 *
 * @export
 * @interface TableAttributesAllOfColumns
 */
export interface TableAttributesAllOfColumns {
    /**
     * Column name
     * @type {string}
     * @memberof TableAttributesAllOfColumns
     */
    name?: string;
    /**
     * Column type
     * @type {string}
     * @memberof TableAttributesAllOfColumns
     */
    dataType?: TableAttributesAllOfColumnsDataTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TableAttributesAllOfColumnsDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 *
 * @export
 * @interface TableData
 */
export interface TableData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof TableData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof TableData
     */
    type: string;
    /**
     *
     * @type {TableAttributes}
     * @memberof TableData
     */
    attributes?: TableAttributes;
    /**
     *
     * @type {TableRelationships}
     * @memberof TableData
     */
    relationships?: TableRelationships;
}
/**
 *
 * @export
 * @interface TableDataAllOf
 */
export interface TableDataAllOf {
    /**
     *
     * @type {TableAttributes}
     * @memberof TableDataAllOf
     */
    attributes?: TableAttributes;
}
/**
 *
 * @export
 * @interface TableDataAllOf1
 */
export interface TableDataAllOf1 {
    /**
     *
     * @type {TableRelationships}
     * @memberof TableDataAllOf1
     */
    relationships?: TableRelationships;
}
/**
 *
 * @export
 * @interface TableRelationships
 */
export interface TableRelationships {
    /**
     *
     * @type {TableRelationshipsSource}
     * @memberof TableRelationships
     */
    source?: TableRelationshipsSource;
}
/**
 *
 * @export
 * @interface TableRelationshipsSource
 */
export interface TableRelationshipsSource {
    /**
     *
     * @type {RelationshipToOne}
     * @memberof TableRelationshipsSource
     */
    data?: RelationshipToOne;
}
/**
 *
 * @export
 * @interface Tables
 */
export interface Tables {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Tables
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof Tables
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<TablesItem>}
     * @memberof Tables
     */
    data: Array<TablesItem>;
}
/**
 *
 * @export
 * @interface TablesAllOf
 */
export interface TablesAllOf {
    /**
     *
     * @type {Array<TablesItem>}
     * @memberof TablesAllOf
     */
    data?: Array<TablesItem>;
}
/**
 *
 * @export
 * @interface TablesItem
 */
export interface TablesItem {
    /**
     *
     * @type {Links}
     * @memberof TablesItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof TablesItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof TablesItem
     */
    type: string;
    /**
     *
     * @type {TableAttributes}
     * @memberof TablesItem
     */
    attributes?: TableAttributes;
    /**
     *
     * @type {TableRelationships}
     * @memberof TablesItem
     */
    relationships?: TableRelationships;
}
/**
 *
 * @export
 * @interface VisualizationObjectSchema
 */
export interface VisualizationObjectSchema {
    /**
     *
     * @type {VisualizationObjectData}
     * @memberof VisualizationObject
     */
    data: VisualizationObjectData;
    /**
     * Compound documents.
     * @type {Array<IncludedResource>}
     * @memberof VisualizationObjectSchema
     */
    included?: Array<IncludedResource>;
    /**
     *
     * @type {Links}
     * @memberof VisualizationObjectSchema
     */
    links?: Links;
}
/**
 *
 * @export
 * @interface VisualizationObjectAttributes
 */
export interface VisualizationObjectAttributes {
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectAttributes
     */
    description?: string;
    /**
     * Object title for better UI naming.
     * @type {string}
     * @memberof VisualizationObjectAttributes
     */
    title?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof VisualizationObjectAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {object}
     * @memberof VisualizationObjectAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface VisualizationObjectData
 */
export interface VisualizationObjectData {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof VisualizationObjectData
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectData
     */
    type: string;
    /**
     *
     * @type {VisualizationObjectAttributes}
     * @memberof VisualizationObjectData
     */
    attributes?: VisualizationObjectAttributes;
    /**
     *
     * @type {VisualizationObjectRelationShips}
     * @memberof VisualizationObjectData
     */
    relationships?: VisualizationObjectRelationShips;
}
/**
 *
 * @export
 * @interface VisualizationObjectDataAllOf
 */
export interface VisualizationObjectDataAllOf {
    /**
     *
     * @type {VisualizationObjectRelationShips}
     * @memberof VisualizationObjectDataAllOf
     */
    relationships?: VisualizationObjectRelationShips;
}
/**
 *
 * @export
 * @interface VisualizationObjectDataRequest
 */
export interface VisualizationObjectDataRequest {
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof VisualizationObjectDataRequest
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectDataRequest
     */
    type: string;
    /**
     *
     * @type {VisualizationObjectAttributes}
     * @memberof VisualizationObjectDataRequest
     */
    attributes?: VisualizationObjectAttributes;
}
/**
 *
 * @export
 * @interface VisualizationObjectDataRequestAllOf
 */
export interface VisualizationObjectDataRequestAllOf {
    /**
     *
     * @type {VisualizationObjectAttributes}
     * @memberof VisualizationObjectDataRequestAllOf
     */
    attributes?: VisualizationObjectAttributes;
}
/**
 *
 * @export
 * @interface VisualizationObjectRelationShips
 */
export interface VisualizationObjectRelationShips {
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof VisualizationObjectRelationShips
     */
    attributes?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof VisualizationObjectRelationShips
     */
    facts?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof VisualizationObjectRelationShips
     */
    labels?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof VisualizationObjectRelationShips
     */
    metrics?: AnalyticalDashboardRelationshipsLabels;
    /**
     *
     * @type {AnalyticalDashboardRelationshipsLabels}
     * @memberof VisualizationObjectRelationShips
     */
    visualizationObjects?: AnalyticalDashboardRelationshipsLabels;
}
/**
 *
 * @export
 * @interface VisualizationObjectRequest
 */
export interface VisualizationObjectRequest {
    /**
     *
     * @type {VisualizationObjectDataRequest}
     * @memberof VisualizationObjectRequest
     */
    data: VisualizationObjectDataRequest;
}
/**
 *
 * @export
 * @interface VisualizationObjects
 */
export interface VisualizationObjects {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof VisualizationObjects
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {ListLinks}
     * @memberof VisualizationObjects
     */
    links?: ListLinks;
    /**
     *
     * @type {Array<VisualizationObjectsItem>}
     * @memberof VisualizationObjects
     */
    data: Array<VisualizationObjectsItem>;
}
/**
 *
 * @export
 * @interface VisualizationObjectsAllOf
 */
export interface VisualizationObjectsAllOf {
    /**
     *
     * @type {Array<VisualizationObjectsItem>}
     * @memberof VisualizationObjectsAllOf
     */
    data?: Array<VisualizationObjectsItem>;
}
/**
 *
 * @export
 * @interface VisualizationObjectsItem
 */
export interface VisualizationObjectsItem {
    /**
     *
     * @type {Links}
     * @memberof VisualizationObjectsItem
     */
    links?: Links;
    /**
     * Unique identifier of object
     * @type {string}
     * @memberof VisualizationObjectsItem
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectsItem
     */
    type: string;
    /**
     *
     * @type {VisualizationObjectAttributes}
     * @memberof VisualizationObjectsItem
     */
    attributes?: VisualizationObjectAttributes;
    /**
     *
     * @type {VisualizationObjectRelationShips}
     * @memberof VisualizationObjectsItem
     */
    relationships?: VisualizationObjectRelationShips;
}

/**
 * DeclarativeLayoutControllerApi - axios parameter creator
 * @export
 */
export const DeclarativeLayoutControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analytics-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logical-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspace} declarativeWorkspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspace: DeclarativeWorkspace;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeWorkspace } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling putWorkspaceLayout.",
                );
            }
            // verify required parameter 'declarativeWorkspace' is not null or undefined
            if (declarativeWorkspace === null || declarativeWorkspace === undefined) {
                throw new RequiredError(
                    "declarativeWorkspace",
                    "Required parameter declarativeWorkspace was null or undefined when calling putWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspace !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspace !== undefined ? declarativeWorkspace : {})
                : declarativeWorkspace || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeAnalytics } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setAnalyticsModel.",
                );
            }
            // verify required parameter 'declarativeAnalytics' is not null or undefined
            if (declarativeAnalytics === null || declarativeAnalytics === undefined) {
                throw new RequiredError(
                    "declarativeAnalytics",
                    "Required parameter declarativeAnalytics was null or undefined when calling setAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analytics-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeAnalytics !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeAnalytics !== undefined ? declarativeAnalytics : {})
                : declarativeAnalytics || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setLogicalModel.",
                );
            }
            // verify required parameter 'declarativeModel' is not null or undefined
            if (declarativeModel === null || declarativeModel === undefined) {
                throw new RequiredError(
                    "declarativeModel",
                    "Required parameter declarativeModel was null or undefined when calling setLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logical-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeModel !== undefined ? declarativeModel : {})
                : declarativeModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - functional programming interface
 * @export
 */
export const DeclarativeLayoutControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspace> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspace} declarativeWorkspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspace: DeclarativeWorkspace;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).putWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - factory interface
 * @export
 */
export const DeclarativeLayoutControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeAnalytics> {
            return DeclarativeLayoutControllerApiFp(configuration).getAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).getOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeWorkspace> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspace} declarativeWorkspace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspace: DeclarativeWorkspace;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).putWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - interface
 * @export
 * @interface DeclarativeLayoutControllerApi
 */
export interface DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeAnalytics>;

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeWorkspace>;

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspace} declarativeWorkspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspace: DeclarativeWorkspace;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;
}

/**
 * DeclarativeLayoutControllerApi - object-oriented interface
 * @export
 * @class DeclarativeLayoutControllerApi
 * @extends {BaseAPI}
 */
export class DeclarativeLayoutControllerApi extends BaseAPI
    implements DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspace} declarativeWorkspace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspace: DeclarativeWorkspace;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).putWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * NotificationControllerApi - axios parameter creator
 * @export
 */
export const NotificationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling registerUploadNotification.",
                );
            }
            const localVarPath = `/api/data-sources/{dataSourceId}/upload-notification`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * NotificationControllerApi - functional programming interface
 * @export
 */
export const NotificationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationControllerApiAxiosParamCreator(
                configuration,
            ).registerUploadNotification(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * NotificationControllerApi - factory interface
 * @export
 */
export const NotificationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return NotificationControllerApiFp(configuration).registerUploadNotification(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * NotificationControllerApi - interface
 * @export
 * @interface NotificationControllerApi
 */
export interface NotificationControllerApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApiInterface
     */
    registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * NotificationControllerApi - object-oriented interface
 * @export
 * @class NotificationControllerApi
 * @extends {BaseAPI}
 */
export class NotificationControllerApi extends BaseAPI implements NotificationControllerApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    public registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ) {
        return NotificationControllerApiFp(this.configuration).registerUploadNotification(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OptionsControllerApi - axios parameter creator
 * @export
 */
export const OptionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options/available-drivers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OptionsControllerApi - functional programming interface
 * @export
 */
export const OptionsControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(configuration).getAllOptions(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(
                configuration,
            ).getDataSourceDrivers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OptionsControllerApi - factory interface
 * @export
 */
export const OptionsControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getAllOptions(params, options)(axios, basePath);
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getDataSourceDrivers(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OptionsControllerApi - interface
 * @export
 * @interface OptionsControllerApi
 */
export interface OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
}

/**
 * OptionsControllerApi - object-oriented interface
 * @export
 * @class OptionsControllerApi
 * @extends {BaseAPI}
 */
export class OptionsControllerApi extends BaseAPI implements OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getAllOptions(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getAllOptions(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getDataSourceDrivers(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getDataSourceDrivers(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Completely remove and discontinue the organization.
         * @summary Drop organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropOrganization(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a basic information about organization.
         * @summary Get organization info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a basic information about organization.
         * @summary Update organization info
         * @param {Organization} organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(
            params: {
                organization: Organization;
            },
            options: any = {},
        ): RequestArgs {
            const { organization } = params;
            // verify required parameter 'organization' is not null or undefined
            if (organization === null || organization === undefined) {
                throw new RequiredError(
                    "organization",
                    "Required parameter organization was null or undefined when calling updateOrganization.",
                );
            }
            const localVarPath = `/api/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof organization !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(organization !== undefined ? organization : {})
                : organization || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Completely remove and discontinue the organization.
         * @summary Drop organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropOrganization(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).dropOrganization(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a basic information about organization.
         * @summary Get organization info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).getOrganization(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets a basic information about organization.
         * @summary Update organization info
         * @param {Organization} organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(
            params: {
                organization: Organization;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).updateOrganization(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Completely remove and discontinue the organization.
         * @summary Drop organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropOrganization(params: {}, options?: any): AxiosPromise<object> {
            return OrganizationControllerApiFp(configuration).dropOrganization(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Gets a basic information about organization.
         * @summary Get organization info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(params: {}, options?: any): AxiosPromise<Organization> {
            return OrganizationControllerApiFp(configuration).getOrganization(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets a basic information about organization.
         * @summary Update organization info
         * @param {Organization} organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(
            params: {
                organization: Organization;
            },
            options?: any,
        ): AxiosPromise<object> {
            return OrganizationControllerApiFp(configuration).updateOrganization(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationControllerApi - interface
 * @export
 * @interface OrganizationControllerApi
 */
export interface OrganizationControllerApiInterface {
    /**
     * Completely remove and discontinue the organization.
     * @summary Drop organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    dropOrganization(params: {}, options?: any): AxiosPromise<object>;

    /**
     * Gets a basic information about organization.
     * @summary Get organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getOrganization(params: {}, options?: any): AxiosPromise<Organization>;

    /**
     * Sets a basic information about organization.
     * @summary Update organization info
     * @param {Organization} organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateOrganization(
        params: {
            organization: Organization;
        },
        options?: any,
    ): AxiosPromise<object>;
}

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI implements OrganizationControllerApiInterface {
    /**
     * Completely remove and discontinue the organization.
     * @summary Drop organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public dropOrganization(params: {}, options?: any) {
        return OrganizationControllerApiFp(this.configuration).dropOrganization(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Gets a basic information about organization.
     * @summary Get organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganization(params: {}, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getOrganization(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets a basic information about organization.
     * @summary Update organization info
     * @param {Organization} organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public updateOrganization(
        params: {
            organization: Organization;
        },
        options?: any,
    ) {
        return OrganizationControllerApiFp(this.configuration).updateOrganization(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * WorkspaceModelControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {AnalyticsObject} [analyticsObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                workspaceId: string;
                organizationId?: string;
                analyticsObject?: AnalyticsObject;
            },
            options: any = {},
        ): RequestArgs {
            const { entity, workspaceId, organizationId, analyticsObject } = params;
            // verify required parameter 'entity' is not null or undefined
            if (entity === null || entity === undefined) {
                throw new RequiredError(
                    "entity",
                    "Required parameter entity was null or undefined when calling createEntity.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntity.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/{entity}`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined && organizationId !== null) {
                localVarHeaderParameter["organizationId"] = String(organizationId);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof analyticsObject !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(analyticsObject !== undefined ? analyticsObject : {})
                : analyticsObject || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                id: string;
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { entity, id, workspaceId, organizationId } = params;
            // verify required parameter 'entity' is not null or undefined
            if (entity === null || entity === undefined) {
                throw new RequiredError(
                    "entity",
                    "Required parameter entity was null or undefined when calling deleteEntity.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntity.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntity.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/{entity}/{id}`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined && organizationId !== null) {
                localVarHeaderParameter["organizationId"] = String(organizationId);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntities(
            params: {
                entity:
                    | "analyticalDashboards"
                    | "metrics"
                    | "visualizationObjects"
                    | "attributes"
                    | "datasets"
                    | "facts"
                    | "labels"
                    | "tables"
                    | "sources";
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { entity, workspaceId, organizationId } = params;
            // verify required parameter 'entity' is not null or undefined
            if (entity === null || entity === undefined) {
                throw new RequiredError(
                    "entity",
                    "Required parameter entity was null or undefined when calling getEntities.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntities.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/{entity}`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined && organizationId !== null) {
                localVarHeaderParameter["organizationId"] = String(organizationId);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(
            params: {
                entity:
                    | "analyticalDashboards"
                    | "metrics"
                    | "visualizationObjects"
                    | "attributes"
                    | "datasets"
                    | "facts"
                    | "labels"
                    | "tables"
                    | "sources";
                id: string;
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { entity, id, workspaceId, organizationId } = params;
            // verify required parameter 'entity' is not null or undefined
            if (entity === null || entity === undefined) {
                throw new RequiredError(
                    "entity",
                    "Required parameter entity was null or undefined when calling getEntity.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntity.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntity.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/{entity}/{id}`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined && organizationId !== null) {
                localVarHeaderParameter["organizationId"] = String(organizationId);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {AnalyticsObject} [analyticsObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                id: string;
                workspaceId: string;
                organizationId?: string;
                analyticsObject?: AnalyticsObject;
            },
            options: any = {},
        ): RequestArgs {
            const { entity, id, workspaceId, organizationId, analyticsObject } = params;
            // verify required parameter 'entity' is not null or undefined
            if (entity === null || entity === undefined) {
                throw new RequiredError(
                    "entity",
                    "Required parameter entity was null or undefined when calling updateEntity.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntity.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntity.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/{entity}/{id}`
                .replace(`{${"entity"}}`, encodeURIComponent(String(entity)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined && organizationId !== null) {
                localVarHeaderParameter["organizationId"] = String(organizationId);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof analyticsObject !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(analyticsObject !== undefined ? analyticsObject : {})
                : analyticsObject || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceModelControllerApi - functional programming interface
 * @export
 */
export const WorkspaceModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {AnalyticsObject} [analyticsObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                workspaceId: string;
                organizationId?: string;
                analyticsObject?: AnalyticsObject;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsObject> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntity(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                id: string;
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntity(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntities(
            params: {
                entity:
                    | "analyticalDashboards"
                    | "metrics"
                    | "visualizationObjects"
                    | "attributes"
                    | "datasets"
                    | "facts"
                    | "labels"
                    | "tables"
                    | "sources";
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataModelObjects> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(configuration).getEntities(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(
            params: {
                entity:
                    | "analyticalDashboards"
                    | "metrics"
                    | "visualizationObjects"
                    | "attributes"
                    | "datasets"
                    | "facts"
                    | "labels"
                    | "tables"
                    | "sources";
                id: string;
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataModelObject> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(configuration).getEntity(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {AnalyticsObject} [analyticsObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                id: string;
                workspaceId: string;
                organizationId?: string;
                analyticsObject?: AnalyticsObject;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsObject> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntity(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceModelControllerApi - factory interface
 * @export
 */
export const WorkspaceModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {AnalyticsObject} [analyticsObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                workspaceId: string;
                organizationId?: string;
                analyticsObject?: AnalyticsObject;
            },
            options?: any,
        ): AxiosPromise<AnalyticsObject> {
            return WorkspaceModelControllerApiFp(configuration).createEntity(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                id: string;
                workspaceId: string;
                organizationId?: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceModelControllerApiFp(configuration).deleteEntity(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntities(
            params: {
                entity:
                    | "analyticalDashboards"
                    | "metrics"
                    | "visualizationObjects"
                    | "attributes"
                    | "datasets"
                    | "facts"
                    | "labels"
                    | "tables"
                    | "sources";
                workspaceId: string;
                organizationId?: string;
            },
            options?: any,
        ): AxiosPromise<MetadataModelObjects> {
            return WorkspaceModelControllerApiFp(configuration).getEntities(params, options)(axios, basePath);
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(
            params: {
                entity:
                    | "analyticalDashboards"
                    | "metrics"
                    | "visualizationObjects"
                    | "attributes"
                    | "datasets"
                    | "facts"
                    | "labels"
                    | "tables"
                    | "sources";
                id: string;
                workspaceId: string;
                organizationId?: string;
            },
            options?: any,
        ): AxiosPromise<MetadataModelObject> {
            return WorkspaceModelControllerApiFp(configuration).getEntity(params, options)(axios, basePath);
        },
        /**
         *
         * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
         * @param {string} id
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {AnalyticsObject} [analyticsObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntity(
            params: {
                entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
                id: string;
                workspaceId: string;
                organizationId?: string;
                analyticsObject?: AnalyticsObject;
            },
            options?: any,
        ): AxiosPromise<AnalyticsObject> {
            return WorkspaceModelControllerApiFp(configuration).updateEntity(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * WorkspaceModelControllerApi - interface
 * @export
 * @interface WorkspaceModelControllerApi
 */
export interface WorkspaceModelControllerApiInterface {
    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {AnalyticsObject} [analyticsObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    createEntity(
        params: {
            entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
            workspaceId: string;
            organizationId?: string;
            analyticsObject?: AnalyticsObject;
        },
        options?: any,
    ): AxiosPromise<AnalyticsObject>;

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
     * @param {string} id
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    deleteEntity(
        params: {
            entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
            id: string;
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntities(
        params: {
            entity:
                | "analyticalDashboards"
                | "metrics"
                | "visualizationObjects"
                | "attributes"
                | "datasets"
                | "facts"
                | "labels"
                | "tables"
                | "sources";
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ): AxiosPromise<MetadataModelObjects>;

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
     * @param {string} id
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntity(
        params: {
            entity:
                | "analyticalDashboards"
                | "metrics"
                | "visualizationObjects"
                | "attributes"
                | "datasets"
                | "facts"
                | "labels"
                | "tables"
                | "sources";
            id: string;
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ): AxiosPromise<MetadataModelObject>;

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
     * @param {string} id
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {AnalyticsObject} [analyticsObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    updateEntity(
        params: {
            entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
            id: string;
            workspaceId: string;
            organizationId?: string;
            analyticsObject?: AnalyticsObject;
        },
        options?: any,
    ): AxiosPromise<AnalyticsObject>;
}

/**
 * WorkspaceModelControllerApi - object-oriented interface
 * @export
 * @class WorkspaceModelControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceModelControllerApi extends BaseAPI implements WorkspaceModelControllerApiInterface {
    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {AnalyticsObject} [analyticsObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public createEntity(
        params: {
            entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
            workspaceId: string;
            organizationId?: string;
            analyticsObject?: AnalyticsObject;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).createEntity(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
     * @param {string} id
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public deleteEntity(
        params: {
            entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
            id: string;
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).deleteEntity(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntities(
        params: {
            entity:
                | "analyticalDashboards"
                | "metrics"
                | "visualizationObjects"
                | "attributes"
                | "datasets"
                | "facts"
                | "labels"
                | "tables"
                | "sources";
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntities(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects' | 'attributes' | 'datasets' | 'facts' | 'labels' | 'tables' | 'sources'} entity
     * @param {string} id
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntity(
        params: {
            entity:
                | "analyticalDashboards"
                | "metrics"
                | "visualizationObjects"
                | "attributes"
                | "datasets"
                | "facts"
                | "labels"
                | "tables"
                | "sources";
            id: string;
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntity(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {'analyticalDashboards' | 'metrics' | 'visualizationObjects'} entity
     * @param {string} id
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {AnalyticsObject} [analyticsObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public updateEntity(
        params: {
            entity: "analyticalDashboards" | "metrics" | "visualizationObjects";
            id: string;
            workspaceId: string;
            organizationId?: string;
            analyticsObject?: AnalyticsObject;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).updateEntity(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * WorkspaceRootModelControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceRootModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootLinks(
            params: {
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, organizationId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getRootLinks.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined && organizationId !== null) {
                localVarHeaderParameter["organizationId"] = String(organizationId);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceRootModelControllerApi - functional programming interface
 * @export
 */
export const WorkspaceRootModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootLinks(
            params: {
                workspaceId: string;
                organizationId?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RootLinks> {
            const localVarAxiosArgs = WorkspaceRootModelControllerApiAxiosParamCreator(
                configuration,
            ).getRootLinks(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceRootModelControllerApi - factory interface
 * @export
 */
export const WorkspaceRootModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {string} [organizationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootLinks(
            params: {
                workspaceId: string;
                organizationId?: string;
            },
            options?: any,
        ): AxiosPromise<RootLinks> {
            return WorkspaceRootModelControllerApiFp(configuration).getRootLinks(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * WorkspaceRootModelControllerApi - interface
 * @export
 * @interface WorkspaceRootModelControllerApi
 */
export interface WorkspaceRootModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceRootModelControllerApiInterface
     */
    getRootLinks(
        params: {
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ): AxiosPromise<RootLinks>;
}

/**
 * WorkspaceRootModelControllerApi - object-oriented interface
 * @export
 * @class WorkspaceRootModelControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceRootModelControllerApi extends BaseAPI
    implements WorkspaceRootModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {string} [organizationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceRootModelControllerApi
     */
    public getRootLinks(
        params: {
            workspaceId: string;
            organizationId?: string;
        },
        options?: any,
    ) {
        return WorkspaceRootModelControllerApiFp(this.configuration).getRootLinks(params, options)(
            this.axios,
            this.basePath,
        );
    }
}
