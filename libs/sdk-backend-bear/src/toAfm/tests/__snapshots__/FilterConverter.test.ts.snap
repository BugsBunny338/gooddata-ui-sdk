// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bear filter converter from model to AFM convert absolute date filter it should convert absolute date filter from model to AFM 1`] = `
Object {
  "absoluteDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": "2019-08-06",
    "to": "2019-08-12",
  },
}
`;

exports[`bear filter converter from model to AFM convert absolute date filter it should return null when from is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM convert absolute date filter it should return null when to is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM convert filter returns AFM measure filter returns absolute date filter 1`] = `
Object {
  "absoluteDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": "2019-08-06",
    "to": "2019-08-12",
  },
}
`;

exports[`bear filter converter from model to AFM convert filter returns AFM measure filter returns negative attribute filter 1`] = `
Object {
  "negativeAttributeFilter": Object {
    "displayForm": Object {
      "identifier": "label.product.id.name",
    },
    "notIn": Object {
      "values": Array [
        "other value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert filter returns AFM measure filter returns positive attribute filter 1`] = `
Object {
  "positiveAttributeFilter": Object {
    "displayForm": Object {
      "identifier": "label.product.id.name",
    },
    "in": Object {
      "values": Array [
        "value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert filter returns AFM measure filter returns relative date filter 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": 2,
    "granularity": "GDC.time.date",
    "to": 55,
  },
}
`;

exports[`bear filter converter from model to AFM convert filter returns AFM measure value filter 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "range": Object {
        "from": 3,
        "operator": "BETWEEN",
        "to": 9,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure filter returns AFM measure filter returns absolute date filter 1`] = `
Object {
  "absoluteDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": "2019-08-06",
    "to": "2019-08-12",
  },
}
`;

exports[`bear filter converter from model to AFM convert measure filter returns AFM measure filter returns negative attribute filter 1`] = `
Object {
  "negativeAttributeFilter": Object {
    "displayForm": Object {
      "identifier": "label.product.id.name",
    },
    "notIn": Object {
      "values": Array [
        "other value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure filter returns AFM measure filter returns positive attribute filter 1`] = `
Object {
  "positiveAttributeFilter": Object {
    "displayForm": Object {
      "identifier": "label.product.id.name",
    },
    "in": Object {
      "values": Array [
        "value",
      ],
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure filter returns AFM measure filter returns relative date filter 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": 5,
    "granularity": "GDC.time.date",
    "to": 22,
  },
}
`;

exports[`bear filter converter from model to AFM convert measure filter returns null when attribute filter is negative and empty 1`] = `null`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with between operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "range": Object {
        "from": 3,
        "operator": "BETWEEN",
        "to": 45,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with equal to operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "comparison": Object {
        "operator": "EQUAL_TO",
        "value": 18,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with greater than operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "comparison": Object {
        "operator": "GREATER_THAN",
        "value": 10,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with greater than or equal to operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "comparison": Object {
        "operator": "GREATER_THAN_OR_EQUAL_TO",
        "value": -5,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with less than operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "comparison": Object {
        "operator": "LESS_THAN",
        "value": 13,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with less than or equal to operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "comparison": Object {
        "operator": "LESS_THAN_OR_EQUAL_TO",
        "value": 13,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with not between operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "range": Object {
        "from": 1,
        "operator": "NOT_BETWEEN",
        "to": 5,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return AFM measure value filter with not equal to operator 1`] = `
Object {
  "measureValueFilter": Object {
    "condition": Object {
      "comparison": Object {
        "operator": "NOT_EQUAL_TO",
        "value": 3,
      },
    },
    "measure": Object {
      "localIdentifier": "m_aangOxLSeztu",
    },
  },
}
`;

exports[`bear filter converter from model to AFM convert measure value filter should return null when condition is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM convert relative date filter should return AFM relative date filter with date granularity 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": -11,
    "granularity": "GDC.time.date",
    "to": 0,
  },
}
`;

exports[`bear filter converter from model to AFM convert relative date filter should return AFM relative date filter with month granularity 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": -3,
    "granularity": "GDC.time.month",
    "to": 9,
  },
}
`;

exports[`bear filter converter from model to AFM convert relative date filter should return AFM relative date filter with quarter granularity 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": 25,
    "granularity": "GDC.time.quarter",
    "to": -2,
  },
}
`;

exports[`bear filter converter from model to AFM convert relative date filter should return AFM relative date filter with week granularity 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": 50,
    "granularity": "GDC.time.week_us",
    "to": 100,
  },
}
`;

exports[`bear filter converter from model to AFM convert relative date filter should return AFM relative date filter with year granularity 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": 2,
    "granularity": "GDC.time.year",
    "to": 7,
  },
}
`;

exports[`bear filter converter from model to AFM convert relative date filter should return null when from is undefined 1`] = `null`;

exports[`bear filter converter from model to AFM convert relative date filter should return null when to is undefined 1`] = `
Object {
  "relativeDateFilter": Object {
    "dataSet": Object {
      "identifier": "closed",
    },
    "from": 5,
    "granularity": "GDC.time.date",
    "to": NaN,
  },
}
`;
