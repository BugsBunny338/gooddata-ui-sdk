// (C) 2020 GoodData Corporation
// tslint:disable
/**
 * Metadata JSON:API
 * OpenAPI generated for Metadata JSON:API endpoints
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * an application-specific error code, expressed as a string value
     * @type {string}
     * @memberof ApiError
     */
    code?: string;
    /**
     * a human-readable explanation specific to this occurrence of the problem. Like \'title\', this fieldâ€™s value can be localized.
     * @type {string}
     * @memberof ApiError
     */
    detail?: string;
    /**
     * a unique identifier for this particular occurrence of the problem
     * @type {string}
     * @memberof ApiError
     */
    id?: string;
    /**
     *
     * @type {ApiErrorLinks}
     * @memberof ApiError
     */
    links?: ApiErrorLinks;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof ApiError
     */
    meta?: { [key: string]: object };
    /**
     *
     * @type {ApiErrorSource}
     * @memberof ApiError
     */
    source?: ApiErrorSource;
    /**
     * the HTTP status code applicable to this problem, expressed as a string value
     * @type {string}
     * @memberof ApiError
     */
    status?: string;
    /**
     * a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
     * @type {string}
     * @memberof ApiError
     */
    title?: string;
}
/**
 *
 * @export
 * @interface ApiErrorLinks
 */
export interface ApiErrorLinks {
    /**
     * a link that leads to further details about this particular occurrence of the problem
     * @type {string}
     * @memberof ApiErrorLinks
     */
    about?: string;
}
/**
 *
 * @export
 * @interface ApiErrorSource
 */
export interface ApiErrorSource {
    /**
     * a string indicating which URI query parameter caused the error
     * @type {string}
     * @memberof ApiErrorSource
     */
    parameter?: string;
    /**
     * a JSON Pointer [RFC6901] to the associated entity in the request document
     * @type {string}
     * @memberof ApiErrorSource
     */
    pointer?: string;
}
/**
 *
 * @export
 * @interface AttributesDatasetResourceAttribute
 */
export interface AttributesDatasetResourceAttribute {}
/**
 *
 * @export
 * @interface AttributesPatchResource
 */
export interface AttributesPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributesPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Attributes)
     * @type {string}
     * @memberof AttributesPatchResource
     */
    type: AttributesPatchResourceTypeEnum;
    /**
     *
     * @type {AttributesResourceAttributesAttributes}
     * @memberof AttributesPatchResource
     */
    attributes?: AttributesResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributesPatchResourceTypeEnum {
    Attributes = "Attributes",
}

/**
 *
 * @export
 * @interface AttributesPostResource
 */
export interface AttributesPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributesPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Attributes)
     * @type {string}
     * @memberof AttributesPostResource
     */
    type: AttributesPostResourceTypeEnum;
    /**
     *
     * @type {AttributesResourceAttributesAttributes}
     * @memberof AttributesPostResource
     */
    attributes?: AttributesResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributesPostResourceTypeEnum {
    Attributes = "Attributes",
}

/**
 *
 * @export
 * @interface AttributesPostResourceReference
 */
export interface AttributesPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributesPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Attributes)
     * @type {string}
     * @memberof AttributesPostResourceReference
     */
    type: AttributesPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributesPostResourceReferenceTypeEnum {
    Attributes = "Attributes",
}

/**
 *
 * @export
 * @interface AttributesResourceAttributes
 */
export interface AttributesResourceAttributes {
    /**
     *
     * @type {AttributesResourceAttributesAttributes}
     * @memberof AttributesResourceAttributes
     */
    attributes?: AttributesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface AttributesResourceAttributesAttributes
 */
export interface AttributesResourceAttributesAttributes {
    /**
     *
     * @type {DatasetsResourceReference}
     * @memberof AttributesResourceAttributesAttributes
     */
    dataset?: DatasetsResourceReference;
    /**
     *
     * @type {string}
     * @memberof AttributesResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {string}
     * @memberof AttributesResourceAttributesAttributes
     */
    granularity?: string | null;
    /**
     *
     * @type {Array<LabelsResourceReference>}
     * @memberof AttributesResourceAttributesAttributes
     */
    labels?: Array<LabelsResourceReference> | null;
    /**
     *
     * @type {Array<TagsResourceReference>}
     * @memberof AttributesResourceAttributesAttributes
     */
    tags?: Array<TagsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof AttributesResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface AttributesResourcePatchAttributes
 */
export interface AttributesResourcePatchAttributes {
    /**
     *
     * @type {AttributesResourceAttributesAttributes}
     * @memberof AttributesResourcePatchAttributes
     */
    attributes?: AttributesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface AttributesResourcePostAttributes
 */
export interface AttributesResourcePostAttributes {
    /**
     *
     * @type {AttributesResourceAttributesAttributes}
     * @memberof AttributesResourcePostAttributes
     */
    attributes?: AttributesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface AttributesResourceReference
 */
export interface AttributesResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributesResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Attributes)
     * @type {string}
     * @memberof AttributesResourceReference
     */
    type: AttributesResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributesResourceReferenceTypeEnum {
    Attributes = "Attributes",
}

/**
 *
 * @export
 * @interface AttributesResourceReferenceResponseSchema
 */
export interface AttributesResourceReferenceResponseSchema {
    /**
     *
     * @type {AttributesResourceReference}
     * @memberof AttributesResourceReferenceResponseSchema
     */
    data?: AttributesResourceReference;
}
/**
 *
 * @export
 * @interface AttributesResourceReferencesResponseSchema
 */
export interface AttributesResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<AttributesResourceReference>}
     * @memberof AttributesResourceReferencesResponseSchema
     */
    data?: Array<AttributesResourceReference>;
}
/**
 *
 * @export
 * @interface AttributesResourceResponseSchema
 */
export interface AttributesResourceResponseSchema extends Success {
    /**
     *
     * @type {AttributesResourceSchema}
     * @memberof AttributesResourceResponseSchema
     */
    data: AttributesResourceSchema;
}
/**
 *
 * @export
 * @interface AttributesResourceSchema
 */
export interface AttributesResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributesResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Attributes)
     * @type {string}
     * @memberof AttributesResourceSchema
     */
    type: AttributesResourceSchemaTypeEnum;
    /**
     *
     * @type {AttributesResourceAttributesAttributes}
     * @memberof AttributesResourceSchema
     */
    attributes: AttributesResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof AttributesResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof AttributesResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributesResourceSchemaTypeEnum {
    Attributes = "Attributes",
}

/**
 *
 * @export
 * @interface AttributesResourceSchemaAllOf
 */
export interface AttributesResourceSchemaAllOf {
    /**
     *
     * @type {object}
     * @memberof AttributesResourceSchemaAllOf
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof AttributesResourceSchemaAllOf
     */
    relationships?: object;
}
/**
 *
 * @export
 * @interface AttributesResourcesResponseSchema
 */
export interface AttributesResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<AttributesResourceSchema>}
     * @memberof AttributesResourcesResponseSchema
     */
    data: Array<AttributesResourceSchema>;
}
/**
 *
 * @export
 * @interface DatasetsPatchResource
 */
export interface DatasetsPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetsPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Datasets)
     * @type {string}
     * @memberof DatasetsPatchResource
     */
    type: DatasetsPatchResourceTypeEnum;
    /**
     *
     * @type {DatasetsResourceAttributesAttributes}
     * @memberof DatasetsPatchResource
     */
    attributes?: DatasetsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetsPatchResourceTypeEnum {
    Datasets = "Datasets",
}

/**
 *
 * @export
 * @interface DatasetsPostResource
 */
export interface DatasetsPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetsPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Datasets)
     * @type {string}
     * @memberof DatasetsPostResource
     */
    type: DatasetsPostResourceTypeEnum;
    /**
     *
     * @type {DatasetsResourceAttributesAttributes}
     * @memberof DatasetsPostResource
     */
    attributes?: DatasetsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetsPostResourceTypeEnum {
    Datasets = "Datasets",
}

/**
 *
 * @export
 * @interface DatasetsPostResourceReference
 */
export interface DatasetsPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetsPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Datasets)
     * @type {string}
     * @memberof DatasetsPostResourceReference
     */
    type: DatasetsPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetsPostResourceReferenceTypeEnum {
    Datasets = "Datasets",
}

/**
 *
 * @export
 * @interface DatasetsResourceAttributes
 */
export interface DatasetsResourceAttributes {
    /**
     *
     * @type {DatasetsResourceAttributesAttributes}
     * @memberof DatasetsResourceAttributes
     */
    attributes?: DatasetsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface DatasetsResourceAttributesAttributes
 */
export interface DatasetsResourceAttributesAttributes {
    /**
     *
     * @type {Array<AttributesResourceReference>}
     * @memberof DatasetsResourceAttributesAttributes
     */
    attributes?: Array<AttributesResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof DatasetsResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {Array<FactsResourceReference>}
     * @memberof DatasetsResourceAttributesAttributes
     */
    facts?: Array<FactsResourceReference> | null;
    /**
     *
     * @type {Array<object>}
     * @memberof DatasetsResourceAttributesAttributes
     */
    grain?: Array<object> | null;
    /**
     *
     * @type {Array<object>}
     * @memberof DatasetsResourceAttributesAttributes
     */
    referenceProperties?: Array<object> | null;
    /**
     *
     * @type {Array<DatasetsResourceReference>}
     * @memberof DatasetsResourceAttributesAttributes
     */
    references?: Array<DatasetsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof DatasetsResourceAttributesAttributes
     */
    sourceTable?: string | null;
    /**
     *
     * @type {Array<TagsResourceReference>}
     * @memberof DatasetsResourceAttributesAttributes
     */
    tags?: Array<TagsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof DatasetsResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface DatasetsResourcePatchAttributes
 */
export interface DatasetsResourcePatchAttributes {
    /**
     *
     * @type {DatasetsResourceAttributesAttributes}
     * @memberof DatasetsResourcePatchAttributes
     */
    attributes?: DatasetsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface DatasetsResourcePostAttributes
 */
export interface DatasetsResourcePostAttributes {
    /**
     *
     * @type {DatasetsResourceAttributesAttributes}
     * @memberof DatasetsResourcePostAttributes
     */
    attributes?: DatasetsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface DatasetsResourceReference
 */
export interface DatasetsResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetsResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Datasets)
     * @type {string}
     * @memberof DatasetsResourceReference
     */
    type: DatasetsResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetsResourceReferenceTypeEnum {
    Datasets = "Datasets",
}

/**
 *
 * @export
 * @interface DatasetsResourceReferenceResponseSchema
 */
export interface DatasetsResourceReferenceResponseSchema {
    /**
     *
     * @type {DatasetsResourceReference}
     * @memberof DatasetsResourceReferenceResponseSchema
     */
    data?: DatasetsResourceReference;
}
/**
 *
 * @export
 * @interface DatasetsResourceReferencesResponseSchema
 */
export interface DatasetsResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<DatasetsResourceReference>}
     * @memberof DatasetsResourceReferencesResponseSchema
     */
    data?: Array<DatasetsResourceReference>;
}
/**
 *
 * @export
 * @interface DatasetsResourceResponseSchema
 */
export interface DatasetsResourceResponseSchema extends Success {
    /**
     *
     * @type {DatasetsResourceSchema}
     * @memberof DatasetsResourceResponseSchema
     */
    data: DatasetsResourceSchema;
}
/**
 *
 * @export
 * @interface DatasetsResourceSchema
 */
export interface DatasetsResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetsResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Datasets)
     * @type {string}
     * @memberof DatasetsResourceSchema
     */
    type: DatasetsResourceSchemaTypeEnum;
    /**
     *
     * @type {DatasetsResourceAttributesAttributes}
     * @memberof DatasetsResourceSchema
     */
    attributes: DatasetsResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof DatasetsResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof DatasetsResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetsResourceSchemaTypeEnum {
    Datasets = "Datasets",
}

/**
 *
 * @export
 * @interface DatasetsResourcesResponseSchema
 */
export interface DatasetsResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<DatasetsResourceSchema>}
     * @memberof DatasetsResourcesResponseSchema
     */
    data: Array<DatasetsResourceSchema>;
}
/**
 *
 * @export
 * @interface FactsDatasetResourceAttribute
 */
export interface FactsDatasetResourceAttribute {}
/**
 *
 * @export
 * @interface FactsPatchResource
 */
export interface FactsPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactsPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Facts)
     * @type {string}
     * @memberof FactsPatchResource
     */
    type: FactsPatchResourceTypeEnum;
    /**
     *
     * @type {FactsResourceAttributesAttributes}
     * @memberof FactsPatchResource
     */
    attributes?: FactsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum FactsPatchResourceTypeEnum {
    Facts = "Facts",
}

/**
 *
 * @export
 * @interface FactsPostResource
 */
export interface FactsPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactsPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Facts)
     * @type {string}
     * @memberof FactsPostResource
     */
    type: FactsPostResourceTypeEnum;
    /**
     *
     * @type {FactsResourceAttributesAttributes}
     * @memberof FactsPostResource
     */
    attributes?: FactsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum FactsPostResourceTypeEnum {
    Facts = "Facts",
}

/**
 *
 * @export
 * @interface FactsPostResourceReference
 */
export interface FactsPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactsPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Facts)
     * @type {string}
     * @memberof FactsPostResourceReference
     */
    type: FactsPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum FactsPostResourceReferenceTypeEnum {
    Facts = "Facts",
}

/**
 *
 * @export
 * @interface FactsResourceAttributes
 */
export interface FactsResourceAttributes {
    /**
     *
     * @type {FactsResourceAttributesAttributes}
     * @memberof FactsResourceAttributes
     */
    attributes?: FactsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface FactsResourceAttributesAttributes
 */
export interface FactsResourceAttributesAttributes {
    /**
     *
     * @type {DatasetsResourceReference}
     * @memberof FactsResourceAttributesAttributes
     */
    dataset?: DatasetsResourceReference;
    /**
     *
     * @type {string}
     * @memberof FactsResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {string}
     * @memberof FactsResourceAttributesAttributes
     */
    sourceColumn?: string | null;
    /**
     *
     * @type {Array<TagsResourceReference>}
     * @memberof FactsResourceAttributesAttributes
     */
    tags?: Array<TagsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof FactsResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface FactsResourcePatchAttributes
 */
export interface FactsResourcePatchAttributes {
    /**
     *
     * @type {FactsResourceAttributesAttributes}
     * @memberof FactsResourcePatchAttributes
     */
    attributes?: FactsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface FactsResourcePostAttributes
 */
export interface FactsResourcePostAttributes {
    /**
     *
     * @type {FactsResourceAttributesAttributes}
     * @memberof FactsResourcePostAttributes
     */
    attributes?: FactsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface FactsResourceReference
 */
export interface FactsResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactsResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Facts)
     * @type {string}
     * @memberof FactsResourceReference
     */
    type: FactsResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum FactsResourceReferenceTypeEnum {
    Facts = "Facts",
}

/**
 *
 * @export
 * @interface FactsResourceReferenceResponseSchema
 */
export interface FactsResourceReferenceResponseSchema {
    /**
     *
     * @type {FactsResourceReference}
     * @memberof FactsResourceReferenceResponseSchema
     */
    data?: FactsResourceReference;
}
/**
 *
 * @export
 * @interface FactsResourceReferencesResponseSchema
 */
export interface FactsResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<FactsResourceReference>}
     * @memberof FactsResourceReferencesResponseSchema
     */
    data?: Array<FactsResourceReference>;
}
/**
 *
 * @export
 * @interface FactsResourceResponseSchema
 */
export interface FactsResourceResponseSchema extends Success {
    /**
     *
     * @type {FactsResourceSchema}
     * @memberof FactsResourceResponseSchema
     */
    data: FactsResourceSchema;
}
/**
 *
 * @export
 * @interface FactsResourceSchema
 */
export interface FactsResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactsResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Facts)
     * @type {string}
     * @memberof FactsResourceSchema
     */
    type: FactsResourceSchemaTypeEnum;
    /**
     *
     * @type {FactsResourceAttributesAttributes}
     * @memberof FactsResourceSchema
     */
    attributes: FactsResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof FactsResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof FactsResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum FactsResourceSchemaTypeEnum {
    Facts = "Facts",
}

/**
 *
 * @export
 * @interface FactsResourcesResponseSchema
 */
export interface FactsResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<FactsResourceSchema>}
     * @memberof FactsResourcesResponseSchema
     */
    data: Array<FactsResourceSchema>;
}
/**
 *
 * @export
 * @interface Failure
 */
export interface Failure {
    /**
     *
     * @type {Array<ApiError>}
     * @memberof Failure
     */
    errors: Array<ApiError>;
    /**
     *
     * @type {JsonApi}
     * @memberof Failure
     */
    jsonapi?: JsonApi;
    /**
     *
     * @type {Links}
     * @memberof Failure
     */
    links?: Links;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Failure
     */
    meta?: { [key: string]: object };
}
/**
 *
 * @export
 * @interface Info
 */
export interface Info {
    /**
     *
     * @type {JsonApi}
     * @memberof Info
     */
    jsonapi?: JsonApi;
    /**
     *
     * @type {Links}
     * @memberof Info
     */
    links?: Links;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Info
     */
    meta: { [key: string]: object };
}
/**
 *
 * @export
 * @interface JsonApi
 */
export interface JsonApi {
    /**
     *
     * @type {string}
     * @memberof JsonApi
     */
    version?: string;
}
/**
 *
 * @export
 * @interface LabelsAttributeResourceAttribute
 */
export interface LabelsAttributeResourceAttribute {}
/**
 *
 * @export
 * @interface LabelsPatchResource
 */
export interface LabelsPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelsPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Labels)
     * @type {string}
     * @memberof LabelsPatchResource
     */
    type: LabelsPatchResourceTypeEnum;
    /**
     *
     * @type {LabelsResourceAttributesAttributes}
     * @memberof LabelsPatchResource
     */
    attributes?: LabelsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelsPatchResourceTypeEnum {
    Labels = "Labels",
}

/**
 *
 * @export
 * @interface LabelsPostResource
 */
export interface LabelsPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelsPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Labels)
     * @type {string}
     * @memberof LabelsPostResource
     */
    type: LabelsPostResourceTypeEnum;
    /**
     *
     * @type {LabelsResourceAttributesAttributes}
     * @memberof LabelsPostResource
     */
    attributes?: LabelsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelsPostResourceTypeEnum {
    Labels = "Labels",
}

/**
 *
 * @export
 * @interface LabelsPostResourceReference
 */
export interface LabelsPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelsPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Labels)
     * @type {string}
     * @memberof LabelsPostResourceReference
     */
    type: LabelsPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelsPostResourceReferenceTypeEnum {
    Labels = "Labels",
}

/**
 *
 * @export
 * @interface LabelsResourceAttributes
 */
export interface LabelsResourceAttributes {
    /**
     *
     * @type {LabelsResourceAttributesAttributes}
     * @memberof LabelsResourceAttributes
     */
    attributes?: LabelsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface LabelsResourceAttributesAttributes
 */
export interface LabelsResourceAttributesAttributes {
    /**
     *
     * @type {AttributesResourceReference}
     * @memberof LabelsResourceAttributesAttributes
     */
    attribute?: AttributesResourceReference;
    /**
     *
     * @type {string}
     * @memberof LabelsResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof LabelsResourceAttributesAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof LabelsResourceAttributesAttributes
     */
    sourceColumn?: string | null;
    /**
     *
     * @type {Array<TagsResourceReference>}
     * @memberof LabelsResourceAttributesAttributes
     */
    tags?: Array<TagsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof LabelsResourceAttributesAttributes
     */
    title?: string | null;
    /**
     *
     * @type {string}
     * @memberof LabelsResourceAttributesAttributes
     */
    type?: string | null;
}
/**
 *
 * @export
 * @interface LabelsResourcePatchAttributes
 */
export interface LabelsResourcePatchAttributes {
    /**
     *
     * @type {LabelsResourceAttributesAttributes}
     * @memberof LabelsResourcePatchAttributes
     */
    attributes?: LabelsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface LabelsResourcePostAttributes
 */
export interface LabelsResourcePostAttributes {
    /**
     *
     * @type {LabelsResourceAttributesAttributes}
     * @memberof LabelsResourcePostAttributes
     */
    attributes?: LabelsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface LabelsResourceReference
 */
export interface LabelsResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelsResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Labels)
     * @type {string}
     * @memberof LabelsResourceReference
     */
    type: LabelsResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelsResourceReferenceTypeEnum {
    Labels = "Labels",
}

/**
 *
 * @export
 * @interface LabelsResourceReferenceResponseSchema
 */
export interface LabelsResourceReferenceResponseSchema {
    /**
     *
     * @type {LabelsResourceReference}
     * @memberof LabelsResourceReferenceResponseSchema
     */
    data?: LabelsResourceReference;
}
/**
 *
 * @export
 * @interface LabelsResourceReferencesResponseSchema
 */
export interface LabelsResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<LabelsResourceReference>}
     * @memberof LabelsResourceReferencesResponseSchema
     */
    data?: Array<LabelsResourceReference>;
}
/**
 *
 * @export
 * @interface LabelsResourceResponseSchema
 */
export interface LabelsResourceResponseSchema extends Success {
    /**
     *
     * @type {LabelsResourceSchema}
     * @memberof LabelsResourceResponseSchema
     */
    data: LabelsResourceSchema;
}
/**
 *
 * @export
 * @interface LabelsResourceSchema
 */
export interface LabelsResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelsResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Labels)
     * @type {string}
     * @memberof LabelsResourceSchema
     */
    type: LabelsResourceSchemaTypeEnum;
    /**
     *
     * @type {LabelsResourceAttributesAttributes}
     * @memberof LabelsResourceSchema
     */
    attributes: LabelsResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof LabelsResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof LabelsResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelsResourceSchemaTypeEnum {
    Labels = "Labels",
}

/**
 *
 * @export
 * @interface LabelsResourcesResponseSchema
 */
export interface LabelsResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<LabelsResourceSchema>}
     * @memberof LabelsResourcesResponseSchema
     */
    data: Array<LabelsResourceSchema>;
}
/**
 * @type Link
 * A link **MUST** be represented as either: a string containing the link\'s URL or a link object.
 * @export
 */
export type Link = LinkOneOf;
/**
 *
 * @export
 * @interface LinkOneOf
 */
export interface LinkOneOf {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof LinkOneOf
     */
    href: string;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof LinkOneOf
     */
    meta?: { [key: string]: object };
}
/**
 * Link members related to the primary data.
 * @export
 * @interface Links
 */
export interface Links extends Pagination {}
/**
 *
 * @export
 * @interface MetaElementParentResourceAttribute
 */
export interface MetaElementParentResourceAttribute {}
/**
 *
 * @export
 * @interface MetaElementPatchResource
 */
export interface MetaElementPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementPatchResource
     */
    type: MetaElementPatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof MetaElementPatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementPatchResourceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementPostResource
 */
export interface MetaElementPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementPostResource
     */
    type: MetaElementPostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof MetaElementPostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementPostResourceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementPostResourceReference
 */
export interface MetaElementPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementPostResourceReference
     */
    type: MetaElementPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementPostResourceReferenceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementResourceAttributes
 */
export interface MetaElementResourceAttributes {
    /**
     *
     * @type {MetaElementResourceAttributesAttributes}
     * @memberof MetaElementResourceAttributes
     */
    attributes?: MetaElementResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetaElementResourceAttributesAttributes
 */
export interface MetaElementResourceAttributesAttributes {
    /**
     *
     * @type {Array<MetaElementResourceReference>}
     * @memberof MetaElementResourceAttributesAttributes
     */
    children?: Array<MetaElementResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetaElementResourceAttributesAttributes
     */
    name?: string | null;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof MetaElementResourceAttributesAttributes
     */
    natures?: { [key: string]: object } | null;
    /**
     *
     * @type {MetaElementResourceReference}
     * @memberof MetaElementResourceAttributesAttributes
     */
    parent?: MetaElementResourceReference;
}
/**
 *
 * @export
 * @interface MetaElementResourcePatchAttributes
 */
export interface MetaElementResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof MetaElementResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface MetaElementResourcePostAttributes
 */
export interface MetaElementResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof MetaElementResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface MetaElementResourceReference
 */
export interface MetaElementResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementResourceReference
     */
    type: MetaElementResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementResourceReferenceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementResourceReferenceResponseSchema
 */
export interface MetaElementResourceReferenceResponseSchema {
    /**
     *
     * @type {MetaElementResourceReference}
     * @memberof MetaElementResourceReferenceResponseSchema
     */
    data?: MetaElementResourceReference;
}
/**
 *
 * @export
 * @interface MetaElementResourceReferencesResponseSchema
 */
export interface MetaElementResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<MetaElementResourceReference>}
     * @memberof MetaElementResourceReferencesResponseSchema
     */
    data?: Array<MetaElementResourceReference>;
}
/**
 *
 * @export
 * @interface MetaElementResourceResponseSchema
 */
export interface MetaElementResourceResponseSchema extends Success {
    /**
     *
     * @type {MetaElementResourceSchema}
     * @memberof MetaElementResourceResponseSchema
     */
    data: MetaElementResourceSchema;
}
/**
 *
 * @export
 * @interface MetaElementResourceSchema
 */
export interface MetaElementResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementResourceSchema
     */
    type: MetaElementResourceSchemaTypeEnum;
    /**
     *
     * @type {MetaElementResourceAttributesAttributes}
     * @memberof MetaElementResourceSchema
     */
    attributes: MetaElementResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof MetaElementResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof MetaElementResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementResourceSchemaTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementResourcesResponseSchema
 */
export interface MetaElementResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<MetaElementResourceSchema>}
     * @memberof MetaElementResourcesResponseSchema
     */
    data: Array<MetaElementResourceSchema>;
}
/**
 *
 * @export
 * @interface MetricsPatchResource
 */
export interface MetricsPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricsPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Metrics)
     * @type {string}
     * @memberof MetricsPatchResource
     */
    type: MetricsPatchResourceTypeEnum;
    /**
     *
     * @type {MetricsResourceAttributesAttributes}
     * @memberof MetricsPatchResource
     */
    attributes?: MetricsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricsPatchResourceTypeEnum {
    Metrics = "Metrics",
}

/**
 *
 * @export
 * @interface MetricsPostResource
 */
export interface MetricsPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricsPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Metrics)
     * @type {string}
     * @memberof MetricsPostResource
     */
    type: MetricsPostResourceTypeEnum;
    /**
     *
     * @type {MetricsResourceAttributesAttributes}
     * @memberof MetricsPostResource
     */
    attributes?: MetricsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricsPostResourceTypeEnum {
    Metrics = "Metrics",
}

/**
 *
 * @export
 * @interface MetricsPostResourceReference
 */
export interface MetricsPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricsPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Metrics)
     * @type {string}
     * @memberof MetricsPostResourceReference
     */
    type: MetricsPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricsPostResourceReferenceTypeEnum {
    Metrics = "Metrics",
}

/**
 *
 * @export
 * @interface MetricsResourceAttributes
 */
export interface MetricsResourceAttributes {
    /**
     *
     * @type {MetricsResourceAttributesAttributes}
     * @memberof MetricsResourceAttributes
     */
    attributes?: MetricsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetricsResourceAttributesAttributes
 */
export interface MetricsResourceAttributesAttributes {
    /**
     *
     * @type {string}
     * @memberof MetricsResourceAttributesAttributes
     */
    ast?: string | null;
    /**
     *
     * @type {Array<AttributesResourceReference>}
     * @memberof MetricsResourceAttributesAttributes
     */
    attributes?: Array<AttributesResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricsResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {Array<FactsResourceReference>}
     * @memberof MetricsResourceAttributesAttributes
     */
    facts?: Array<FactsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricsResourceAttributesAttributes
     */
    maql?: string | null;
    /**
     *
     * @type {string}
     * @memberof MetricsResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface MetricsResourcePatchAttributes
 */
export interface MetricsResourcePatchAttributes {
    /**
     *
     * @type {MetricsResourceAttributesAttributes}
     * @memberof MetricsResourcePatchAttributes
     */
    attributes?: MetricsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetricsResourcePostAttributes
 */
export interface MetricsResourcePostAttributes {
    /**
     *
     * @type {MetricsResourceAttributesAttributes}
     * @memberof MetricsResourcePostAttributes
     */
    attributes?: MetricsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetricsResourceReference
 */
export interface MetricsResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricsResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Metrics)
     * @type {string}
     * @memberof MetricsResourceReference
     */
    type: MetricsResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricsResourceReferenceTypeEnum {
    Metrics = "Metrics",
}

/**
 *
 * @export
 * @interface MetricsResourceReferenceResponseSchema
 */
export interface MetricsResourceReferenceResponseSchema {
    /**
     *
     * @type {MetricsResourceReference}
     * @memberof MetricsResourceReferenceResponseSchema
     */
    data?: MetricsResourceReference;
}
/**
 *
 * @export
 * @interface MetricsResourceReferencesResponseSchema
 */
export interface MetricsResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<MetricsResourceReference>}
     * @memberof MetricsResourceReferencesResponseSchema
     */
    data?: Array<MetricsResourceReference>;
}
/**
 *
 * @export
 * @interface MetricsResourceResponseSchema
 */
export interface MetricsResourceResponseSchema extends Success {
    /**
     *
     * @type {MetricsResourceSchema}
     * @memberof MetricsResourceResponseSchema
     */
    data: MetricsResourceSchema;
}
/**
 *
 * @export
 * @interface MetricsResourceSchema
 */
export interface MetricsResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricsResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Metrics)
     * @type {string}
     * @memberof MetricsResourceSchema
     */
    type: MetricsResourceSchemaTypeEnum;
    /**
     *
     * @type {MetricsResourceAttributesAttributes}
     * @memberof MetricsResourceSchema
     */
    attributes: MetricsResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof MetricsResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof MetricsResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricsResourceSchemaTypeEnum {
    Metrics = "Metrics",
}

/**
 *
 * @export
 * @interface MetricsResourcesResponseSchema
 */
export interface MetricsResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<MetricsResourceSchema>}
     * @memberof MetricsResourcesResponseSchema
     */
    data: Array<MetricsResourceSchema>;
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * The first page of data
     * @type {string}
     * @memberof Pagination
     */
    first?: string | null;
    /**
     * The last page of data
     * @type {string}
     * @memberof Pagination
     */
    last?: string | null;
    /**
     * The next page of data
     * @type {string}
     * @memberof Pagination
     */
    next?: string | null;
    /**
     * The previous page of data
     * @type {string}
     * @memberof Pagination
     */
    prev?: string | null;
}
/**
 *
 * @export
 * @interface SourcesConnectionResourceAttribute
 */
export interface SourcesConnectionResourceAttribute {
    /**
     *
     * @type {string}
     * @memberof SourcesConnectionResourceAttribute
     */
    location?: string;
    /**
     *
     * @type {string}
     * @memberof SourcesConnectionResourceAttribute
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof SourcesConnectionResourceAttribute
     */
    type?: SourcesConnectionResourceAttributeTypeEnum;
    /**
     *
     * @type {string}
     * @memberof SourcesConnectionResourceAttribute
     */
    userName?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcesConnectionResourceAttributeTypeEnum {
    REDSHIFT = "REDSHIFT",
    POSTGRES = "POSTGRES",
}

/**
 *
 * @export
 * @interface SourcesPatchResource
 */
export interface SourcesPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcesPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Sources)
     * @type {string}
     * @memberof SourcesPatchResource
     */
    type: SourcesPatchResourceTypeEnum;
    /**
     *
     * @type {SourcesResourceAttributesAttributes}
     * @memberof SourcesPatchResource
     */
    attributes?: SourcesResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcesPatchResourceTypeEnum {
    Sources = "Sources",
}

/**
 *
 * @export
 * @interface SourcesPostResource
 */
export interface SourcesPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcesPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Sources)
     * @type {string}
     * @memberof SourcesPostResource
     */
    type: SourcesPostResourceTypeEnum;
    /**
     *
     * @type {SourcesResourceAttributesAttributes}
     * @memberof SourcesPostResource
     */
    attributes?: SourcesResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcesPostResourceTypeEnum {
    Sources = "Sources",
}

/**
 *
 * @export
 * @interface SourcesPostResourceReference
 */
export interface SourcesPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcesPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Sources)
     * @type {string}
     * @memberof SourcesPostResourceReference
     */
    type: SourcesPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcesPostResourceReferenceTypeEnum {
    Sources = "Sources",
}

/**
 *
 * @export
 * @interface SourcesResourceAttributes
 */
export interface SourcesResourceAttributes {
    /**
     *
     * @type {SourcesResourceAttributesAttributes}
     * @memberof SourcesResourceAttributes
     */
    attributes?: SourcesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface SourcesResourceAttributesAttributes
 */
export interface SourcesResourceAttributesAttributes {
    /**
     *
     * @type {SourcesConnectionResourceAttribute}
     * @memberof SourcesResourceAttributesAttributes
     */
    connection?: SourcesConnectionResourceAttribute | null;
    /**
     *
     * @type {Array<TablesResourceReference>}
     * @memberof SourcesResourceAttributesAttributes
     */
    tables?: Array<TablesResourceReference> | null;
}
/**
 *
 * @export
 * @interface SourcesResourcePatchAttributes
 */
export interface SourcesResourcePatchAttributes {
    /**
     *
     * @type {SourcesResourceAttributesAttributes}
     * @memberof SourcesResourcePatchAttributes
     */
    attributes?: SourcesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface SourcesResourcePostAttributes
 */
export interface SourcesResourcePostAttributes {
    /**
     *
     * @type {SourcesResourceAttributesAttributes}
     * @memberof SourcesResourcePostAttributes
     */
    attributes?: SourcesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface SourcesResourceReference
 */
export interface SourcesResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcesResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Sources)
     * @type {string}
     * @memberof SourcesResourceReference
     */
    type: SourcesResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcesResourceReferenceTypeEnum {
    Sources = "Sources",
}

/**
 *
 * @export
 * @interface SourcesResourceReferenceResponseSchema
 */
export interface SourcesResourceReferenceResponseSchema {
    /**
     *
     * @type {SourcesResourceReference}
     * @memberof SourcesResourceReferenceResponseSchema
     */
    data?: SourcesResourceReference;
}
/**
 *
 * @export
 * @interface SourcesResourceReferencesResponseSchema
 */
export interface SourcesResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<SourcesResourceReference>}
     * @memberof SourcesResourceReferencesResponseSchema
     */
    data?: Array<SourcesResourceReference>;
}
/**
 *
 * @export
 * @interface SourcesResourceResponseSchema
 */
export interface SourcesResourceResponseSchema extends Success {
    /**
     *
     * @type {SourcesResourceSchema}
     * @memberof SourcesResourceResponseSchema
     */
    data: SourcesResourceSchema;
}
/**
 *
 * @export
 * @interface SourcesResourceSchema
 */
export interface SourcesResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcesResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Sources)
     * @type {string}
     * @memberof SourcesResourceSchema
     */
    type: SourcesResourceSchemaTypeEnum;
    /**
     *
     * @type {SourcesResourceAttributesAttributes}
     * @memberof SourcesResourceSchema
     */
    attributes: SourcesResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof SourcesResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof SourcesResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcesResourceSchemaTypeEnum {
    Sources = "Sources",
}

/**
 *
 * @export
 * @interface SourcesResourcesResponseSchema
 */
export interface SourcesResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<SourcesResourceSchema>}
     * @memberof SourcesResourcesResponseSchema
     */
    data: Array<SourcesResourceSchema>;
}
/**
 * A JSON:API document with a single resource
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Success
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {JsonApi}
     * @memberof Success
     */
    jsonapi?: JsonApi;
    /**
     *
     * @type {Links}
     * @memberof Success
     */
    links?: Links;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Success
     */
    meta?: { [key: string]: object };
}
/**
 *
 * @export
 * @interface SuccessIncluded
 */
export interface SuccessIncluded {
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof SuccessIncluded
     */
    attributes?: { [key: string]: object };
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SuccessIncluded
     */
    id?: string;
    /**
     * The JSON:API resource type
     * @type {string}
     * @memberof SuccessIncluded
     */
    type?: string;
}
/**
 *
 * @export
 * @interface TablesPatchResource
 */
export interface TablesPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablesPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Tables)
     * @type {string}
     * @memberof TablesPatchResource
     */
    type: TablesPatchResourceTypeEnum;
    /**
     *
     * @type {TablesResourceAttributesAttributes}
     * @memberof TablesPatchResource
     */
    attributes?: TablesResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum TablesPatchResourceTypeEnum {
    Tables = "Tables",
}

/**
 *
 * @export
 * @interface TablesPostResource
 */
export interface TablesPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablesPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Tables)
     * @type {string}
     * @memberof TablesPostResource
     */
    type: TablesPostResourceTypeEnum;
    /**
     *
     * @type {TablesResourceAttributesAttributes}
     * @memberof TablesPostResource
     */
    attributes?: TablesResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum TablesPostResourceTypeEnum {
    Tables = "Tables",
}

/**
 *
 * @export
 * @interface TablesPostResourceReference
 */
export interface TablesPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablesPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Tables)
     * @type {string}
     * @memberof TablesPostResourceReference
     */
    type: TablesPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TablesPostResourceReferenceTypeEnum {
    Tables = "Tables",
}

/**
 *
 * @export
 * @interface TablesResourceAttributes
 */
export interface TablesResourceAttributes {
    /**
     *
     * @type {TablesResourceAttributesAttributes}
     * @memberof TablesResourceAttributes
     */
    attributes?: TablesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TablesResourceAttributesAttributes
 */
export interface TablesResourceAttributesAttributes {
    /**
     *
     * @type {Array<object>}
     * @memberof TablesResourceAttributesAttributes
     */
    columns?: Array<object> | null;
    /**
     *
     * @type {SourcesResourceReference}
     * @memberof TablesResourceAttributesAttributes
     */
    source?: SourcesResourceReference;
}
/**
 *
 * @export
 * @interface TablesResourcePatchAttributes
 */
export interface TablesResourcePatchAttributes {
    /**
     *
     * @type {TablesResourceAttributesAttributes}
     * @memberof TablesResourcePatchAttributes
     */
    attributes?: TablesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TablesResourcePostAttributes
 */
export interface TablesResourcePostAttributes {
    /**
     *
     * @type {TablesResourceAttributesAttributes}
     * @memberof TablesResourcePostAttributes
     */
    attributes?: TablesResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TablesResourceReference
 */
export interface TablesResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablesResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Tables)
     * @type {string}
     * @memberof TablesResourceReference
     */
    type: TablesResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TablesResourceReferenceTypeEnum {
    Tables = "Tables",
}

/**
 *
 * @export
 * @interface TablesResourceReferenceResponseSchema
 */
export interface TablesResourceReferenceResponseSchema {
    /**
     *
     * @type {TablesResourceReference}
     * @memberof TablesResourceReferenceResponseSchema
     */
    data?: TablesResourceReference;
}
/**
 *
 * @export
 * @interface TablesResourceReferencesResponseSchema
 */
export interface TablesResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<TablesResourceReference>}
     * @memberof TablesResourceReferencesResponseSchema
     */
    data?: Array<TablesResourceReference>;
}
/**
 *
 * @export
 * @interface TablesResourceResponseSchema
 */
export interface TablesResourceResponseSchema extends Success {
    /**
     *
     * @type {TablesResourceSchema}
     * @memberof TablesResourceResponseSchema
     */
    data: TablesResourceSchema;
}
/**
 *
 * @export
 * @interface TablesResourceSchema
 */
export interface TablesResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablesResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Tables)
     * @type {string}
     * @memberof TablesResourceSchema
     */
    type: TablesResourceSchemaTypeEnum;
    /**
     *
     * @type {TablesResourceAttributesAttributes}
     * @memberof TablesResourceSchema
     */
    attributes: TablesResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof TablesResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof TablesResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum TablesResourceSchemaTypeEnum {
    Tables = "Tables",
}

/**
 *
 * @export
 * @interface TablesResourcesResponseSchema
 */
export interface TablesResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<TablesResourceSchema>}
     * @memberof TablesResourcesResponseSchema
     */
    data: Array<TablesResourceSchema>;
}
/**
 *
 * @export
 * @interface TablesSourceResourceAttribute
 */
export interface TablesSourceResourceAttribute {}
/**
 *
 * @export
 * @interface TagsPatchResource
 */
export interface TagsPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagsPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Tags)
     * @type {string}
     * @memberof TagsPatchResource
     */
    type: TagsPatchResourceTypeEnum;
    /**
     *
     * @type {TagsResourceAttributesAttributes}
     * @memberof TagsPatchResource
     */
    attributes?: TagsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum TagsPatchResourceTypeEnum {
    Tags = "Tags",
}

/**
 *
 * @export
 * @interface TagsPostResource
 */
export interface TagsPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagsPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Tags)
     * @type {string}
     * @memberof TagsPostResource
     */
    type: TagsPostResourceTypeEnum;
    /**
     *
     * @type {TagsResourceAttributesAttributes}
     * @memberof TagsPostResource
     */
    attributes?: TagsResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum TagsPostResourceTypeEnum {
    Tags = "Tags",
}

/**
 *
 * @export
 * @interface TagsPostResourceReference
 */
export interface TagsPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagsPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Tags)
     * @type {string}
     * @memberof TagsPostResourceReference
     */
    type: TagsPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TagsPostResourceReferenceTypeEnum {
    Tags = "Tags",
}

/**
 *
 * @export
 * @interface TagsResourceAttributes
 */
export interface TagsResourceAttributes {
    /**
     *
     * @type {TagsResourceAttributesAttributes}
     * @memberof TagsResourceAttributes
     */
    attributes?: TagsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TagsResourceAttributesAttributes
 */
export interface TagsResourceAttributesAttributes {
    /**
     *
     * @type {Array<AttributesResourceReference>}
     * @memberof TagsResourceAttributesAttributes
     */
    attributes?: Array<AttributesResourceReference> | null;
    /**
     *
     * @type {Array<DatasetsResourceReference>}
     * @memberof TagsResourceAttributesAttributes
     */
    datasets?: Array<DatasetsResourceReference> | null;
    /**
     *
     * @type {Array<FactsResourceReference>}
     * @memberof TagsResourceAttributesAttributes
     */
    facts?: Array<FactsResourceReference> | null;
    /**
     *
     * @type {Array<LabelsResourceReference>}
     * @memberof TagsResourceAttributesAttributes
     */
    labels?: Array<LabelsResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof TagsResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface TagsResourcePatchAttributes
 */
export interface TagsResourcePatchAttributes {
    /**
     *
     * @type {TagsResourceAttributesAttributes}
     * @memberof TagsResourcePatchAttributes
     */
    attributes?: TagsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TagsResourcePostAttributes
 */
export interface TagsResourcePostAttributes {
    /**
     *
     * @type {TagsResourceAttributesAttributes}
     * @memberof TagsResourcePostAttributes
     */
    attributes?: TagsResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TagsResourceReference
 */
export interface TagsResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagsResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Tags)
     * @type {string}
     * @memberof TagsResourceReference
     */
    type: TagsResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TagsResourceReferenceTypeEnum {
    Tags = "Tags",
}

/**
 *
 * @export
 * @interface TagsResourceReferenceResponseSchema
 */
export interface TagsResourceReferenceResponseSchema {
    /**
     *
     * @type {TagsResourceReference}
     * @memberof TagsResourceReferenceResponseSchema
     */
    data?: TagsResourceReference;
}
/**
 *
 * @export
 * @interface TagsResourceReferencesResponseSchema
 */
export interface TagsResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<TagsResourceReference>}
     * @memberof TagsResourceReferencesResponseSchema
     */
    data?: Array<TagsResourceReference>;
}
/**
 *
 * @export
 * @interface TagsResourceResponseSchema
 */
export interface TagsResourceResponseSchema extends Success {
    /**
     *
     * @type {TagsResourceSchema}
     * @memberof TagsResourceResponseSchema
     */
    data: TagsResourceSchema;
}
/**
 *
 * @export
 * @interface TagsResourceSchema
 */
export interface TagsResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagsResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Tags)
     * @type {string}
     * @memberof TagsResourceSchema
     */
    type: TagsResourceSchemaTypeEnum;
    /**
     *
     * @type {TagsResourceAttributesAttributes}
     * @memberof TagsResourceSchema
     */
    attributes: TagsResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof TagsResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof TagsResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum TagsResourceSchemaTypeEnum {
    Tags = "Tags",
}

/**
 *
 * @export
 * @interface TagsResourcesResponseSchema
 */
export interface TagsResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<TagsResourceSchema>}
     * @memberof TagsResourcesResponseSchema
     */
    data: Array<TagsResourceSchema>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a List of attributes resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {string} [sort] attributes sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesGet.",
                );
            }
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDatasetsDelete.",
                );
            }
            const localVarPath = `/attributes/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDatasetsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDatasetsPatch.",
                );
            }
            const localVarPath = `/attributes/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDatasetsPost.",
                );
            }
            const localVarPath = `/attributes/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDelete.",
                );
            }
            const localVarPath = `/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdGet.",
                );
            }
            const localVarPath = `/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdLabelsDelete.",
                );
            }
            const localVarPath = `/attributes/{id}/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve labels related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterType,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdLabelsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdLabelsPatch.",
                );
            }
            const localVarPath = `/attributes/{id}/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdLabelsPost.",
                );
            }
            const localVarPath = `/attributes/{id}/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesPatchResource} [attributesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesPatchResource?: AttributesPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdPatch.",
                );
            }
            const localVarPath = `/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(attributesPatchResource !== undefined ? attributesPatchResource : {})
                : attributesPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsDatasetsDelete.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsDatasetsPatch.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsDatasetsPost.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsLabelsDelete.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve labels references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterType,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsLabelsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsLabelsPatch.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsLabelsPost.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsTagsDelete.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsTagsPatch.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsTagsPost.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdTagsDelete.",
                );
            }
            const localVarPath = `/attributes/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdTagsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdTagsPatch.",
                );
            }
            const localVarPath = `/attributes/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdTagsPost.",
                );
            }
            const localVarPath = `/attributes/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {AttributesPostResource} [attributesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                attributesPostResource?: AttributesPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, attributesPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesPost.",
                );
            }
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(attributesPostResource !== undefined ? attributesPostResource : {})
                : attributesPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of datasets resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {string} [sort] datasets sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsGet.",
                );
            }
            const localVarPath = `/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdAttributesDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdAttributesGet.",
                );
            }
            const localVarPath = `/datasets/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdAttributesPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdAttributesPost.",
                );
            }
            const localVarPath = `/datasets/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDatasetsDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDatasetsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDatasetsPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDatasetsPost.",
                );
            }
            const localVarPath = `/datasets/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDelete.",
                );
            }
            const localVarPath = `/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdFactsDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve facts related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdFactsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdFactsPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdFactsPost.",
                );
            }
            const localVarPath = `/datasets/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdGet.",
                );
            }
            const localVarPath = `/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsPatchResource} [datasetsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsPatchResource?: DatasetsPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdPatch.",
                );
            }
            const localVarPath = `/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(datasetsPatchResource !== undefined ? datasetsPatchResource : {})
                : datasetsPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsAttributesDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsAttributesPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsAttributesPost.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsDatasetsDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsDatasetsPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsDatasetsPost.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsFactsDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve facts references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsFactsPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsFactsPost.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsTagsDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsTagsPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsTagsPost.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdTagsDelete.",
                );
            }
            const localVarPath = `/datasets/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdTagsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdTagsPatch.",
                );
            }
            const localVarPath = `/datasets/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdTagsPost.",
                );
            }
            const localVarPath = `/datasets/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {DatasetsPostResource} [datasetsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                datasetsPostResource?: DatasetsPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, datasetsPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsPost.",
                );
            }
            const localVarPath = `/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(datasetsPostResource !== undefined ? datasetsPostResource : {})
                : datasetsPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of facts resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {string} [sort] facts sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsGet.",
                );
            }
            const localVarPath = `/facts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDatasetsDelete.",
                );
            }
            const localVarPath = `/facts/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDatasetsGet.",
                );
            }
            const localVarPath = `/facts/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDatasetsPatch.",
                );
            }
            const localVarPath = `/facts/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDatasetsPost.",
                );
            }
            const localVarPath = `/facts/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDelete.",
                );
            }
            const localVarPath = `/facts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdGet.",
                );
            }
            const localVarPath = `/facts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsPatchResource} [factsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsPatchResource?: FactsPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdPatch.",
                );
            }
            const localVarPath = `/facts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(factsPatchResource !== undefined ? factsPatchResource : {})
                : factsPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsDatasetsDelete.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets references related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsDatasetsPatch.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsDatasetsPost.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferenceResponseSchema !== undefined
                          ? datasetsResourceReferenceResponseSchema
                          : {},
                  )
                : datasetsResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsTagsDelete.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags references related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsTagsPatch.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsTagsPost.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdTagsDelete.",
                );
            }
            const localVarPath = `/facts/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdTagsGet.",
                );
            }
            const localVarPath = `/facts/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdTagsPatch.",
                );
            }
            const localVarPath = `/facts/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdTagsPost.",
                );
            }
            const localVarPath = `/facts/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {FactsPostResource} [factsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                factsPostResource?: FactsPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, factsPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsPost.",
                );
            }
            const localVarPath = `/facts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(factsPostResource !== undefined ? factsPostResource : {})
                : factsPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of labels resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {string} [sort] labels sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterType,
                filterSourceColumn,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsGet.",
                );
            }
            const localVarPath = `/labels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdAttributesDelete.",
                );
            }
            const localVarPath = `/labels/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdAttributesGet.",
                );
            }
            const localVarPath = `/labels/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdAttributesPatch.",
                );
            }
            const localVarPath = `/labels/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferenceResponseSchema !== undefined
                          ? attributesResourceReferenceResponseSchema
                          : {},
                  )
                : attributesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdAttributesPost.",
                );
            }
            const localVarPath = `/labels/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferenceResponseSchema !== undefined
                          ? attributesResourceReferenceResponseSchema
                          : {},
                  )
                : attributesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdDelete.",
                );
            }
            const localVarPath = `/labels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdGet.",
                );
            }
            const localVarPath = `/labels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsPatchResource} [labelsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsPatchResource?: LabelsPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdPatch.",
                );
            }
            const localVarPath = `/labels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(labelsPatchResource !== undefined ? labelsPatchResource : {})
                : labelsPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsAttributesDelete.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes references related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsAttributesPatch.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferenceResponseSchema !== undefined
                          ? attributesResourceReferenceResponseSchema
                          : {},
                  )
                : attributesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsAttributesPost.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferenceResponseSchema !== undefined
                          ? attributesResourceReferenceResponseSchema
                          : {},
                  )
                : attributesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsTagsDelete.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags references related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsTagsPatch.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsTagsPost.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdTagsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdTagsDelete.",
                );
            }
            const localVarPath = `/labels/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tags related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdTagsGet.",
                );
            }
            const localVarPath = `/labels/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdTagsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdTagsPatch.",
                );
            }
            const localVarPath = `/labels/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdTagsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdTagsPost.",
                );
            }
            const localVarPath = `/labels/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tagsResourceReferencesResponseSchema !== undefined
                          ? tagsResourceReferencesResponseSchema
                          : {},
                  )
                : tagsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {LabelsPostResource} [labelsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                labelsPostResource?: LabelsPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, labelsPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsPost.",
                );
            }
            const localVarPath = `/labels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(labelsPostResource !== undefined ? labelsPostResource : {})
                : labelsPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of metaElement resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {string} [sort] metaElement sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterId,
                filterName,
                filterParent,
                filterChildren,
                filterNatures,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementGet.",
                );
            }
            const localVarPath = `/meta/element`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter["filter[name]"] = filterName;
            }

            if (filterParent !== undefined) {
                localVarQueryParameter["filter[parent]"] = filterParent;
            }

            if (filterChildren !== undefined) {
                localVarQueryParameter["filter[children]"] = filterChildren;
            }

            if (filterNatures !== undefined) {
                localVarQueryParameter["filter[natures]"] = filterNatures;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metaElementIdGet.",
                );
            }
            const localVarPath = `/meta/element/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metaElement related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterId,
                filterName,
                filterParent,
                filterChildren,
                filterNatures,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementIdMetaElementGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metaElementIdMetaElementGet.",
                );
            }
            const localVarPath = `/meta/element/{id}/meta/element`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter["filter[name]"] = filterName;
            }

            if (filterParent !== undefined) {
                localVarQueryParameter["filter[parent]"] = filterParent;
            }

            if (filterChildren !== undefined) {
                localVarQueryParameter["filter[children]"] = filterChildren;
            }

            if (filterNatures !== undefined) {
                localVarQueryParameter["filter[natures]"] = filterNatures;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metaElement references related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdRelationshipsMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterId,
                filterName,
                filterParent,
                filterChildren,
                filterNatures,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementIdRelationshipsMetaElementGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metaElementIdRelationshipsMetaElementGet.",
                );
            }
            const localVarPath = `/meta/element/{id}/relationships/meta/element`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter["filter[name]"] = filterName;
            }

            if (filterParent !== undefined) {
                localVarQueryParameter["filter[parent]"] = filterParent;
            }

            if (filterChildren !== undefined) {
                localVarQueryParameter["filter[children]"] = filterChildren;
            }

            if (filterNatures !== undefined) {
                localVarQueryParameter["filter[natures]"] = filterNatures;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of metrics resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metrics fields to include (csv)
         * @param {string} [include] metrics relationships to include (csv)
         * @param {string} [sort] metrics sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterMaql,
                filterAst,
                filterFacts,
                filterAttributes,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsGet.",
                );
            }
            const localVarPath = `/metrics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterMaql !== undefined) {
                localVarQueryParameter["filter[maql]"] = filterMaql;
            }

            if (filterAst !== undefined) {
                localVarQueryParameter["filter[ast]"] = filterAst;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesGet.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesPost.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdDelete.",
                );
            }
            const localVarPath = `/metrics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve facts related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metrics fields to include (csv)
         * @param {string} [include] metrics relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdGet.",
                );
            }
            const localVarPath = `/metrics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricsPatchResource} [metricsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricsPatchResource?: MetricsPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, metricsPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdPatch.",
                );
            }
            const localVarPath = `/metrics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricsPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(metricsPatchResource !== undefined ? metricsPatchResource : {})
                : metricsPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes references related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesPost.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve facts references related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {MetricsPostResource} [metricsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                metricsPostResource?: MetricsPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, metricsPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsPost.",
                );
            }
            const localVarPath = `/metrics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricsPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(metricsPostResource !== undefined ? metricsPostResource : {})
                : metricsPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of sources resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTables] Filter by tables (csv)
         * @param {string} [filterConnection] Filter by connection (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {string} [sort] sources sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTables?: string;
                filterConnection?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTables,
                filterConnection,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesGet.",
                );
            }
            const localVarPath = `/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTables !== undefined) {
                localVarQueryParameter["filter[tables]"] = filterTables;
            }

            if (filterConnection !== undefined) {
                localVarQueryParameter["filter[connection]"] = filterConnection;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdDelete.",
                );
            }
            const localVarPath = `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdGet.",
                );
            }
            const localVarPath = `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesPatchResource} [sourcesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesPatchResource?: SourcesPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, sourcesPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdPatch.",
                );
            }
            const localVarPath = `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcesPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(sourcesPatchResource !== undefined ? sourcesPatchResource : {})
                : sourcesPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdRelationshipsTablesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdRelationshipsTablesDelete.",
                );
            }
            const localVarPath = `/sources/{id}/relationships/tables`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tables references related to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterSource,
                filterColumns,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdRelationshipsTablesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdRelationshipsTablesGet.",
                );
            }
            const localVarPath = `/sources/{id}/relationships/tables`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterSource !== undefined) {
                localVarQueryParameter["filter[source]"] = filterSource;
            }

            if (filterColumns !== undefined) {
                localVarQueryParameter["filter[columns]"] = filterColumns;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tablesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdRelationshipsTablesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdRelationshipsTablesPatch.",
                );
            }
            const localVarPath = `/sources/{id}/relationships/tables`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tablesResourceReferencesResponseSchema !== undefined
                          ? tablesResourceReferencesResponseSchema
                          : {},
                  )
                : tablesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tablesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdRelationshipsTablesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdRelationshipsTablesPost.",
                );
            }
            const localVarPath = `/sources/{id}/relationships/tables`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tablesResourceReferencesResponseSchema !== undefined
                          ? tablesResourceReferencesResponseSchema
                          : {},
                  )
                : tablesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdTablesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdTablesDelete.",
                );
            }
            const localVarPath = `/sources/{id}/tables`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tables related to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterSource,
                filterColumns,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdTablesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdTablesGet.",
                );
            }
            const localVarPath = `/sources/{id}/tables`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterSource !== undefined) {
                localVarQueryParameter["filter[source]"] = filterSource;
            }

            if (filterColumns !== undefined) {
                localVarQueryParameter["filter[columns]"] = filterColumns;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tablesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdTablesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdTablesPatch.",
                );
            }
            const localVarPath = `/sources/{id}/tables`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tablesResourceReferencesResponseSchema !== undefined
                          ? tablesResourceReferencesResponseSchema
                          : {},
                  )
                : tablesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tablesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdTablesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdTablesPost.",
                );
            }
            const localVarPath = `/sources/{id}/tables`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      tablesResourceReferencesResponseSchema !== undefined
                          ? tablesResourceReferencesResponseSchema
                          : {},
                  )
                : tablesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {SourcesPostResource} [sourcesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                sourcesPostResource?: SourcesPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, sourcesPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesPost.",
                );
            }
            const localVarPath = `/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcesPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(sourcesPostResource !== undefined ? sourcesPostResource : {})
                : sourcesPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of tables resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {string} [sort] tables sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterSource,
                filterColumns,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesGet.",
                );
            }
            const localVarPath = `/tables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterSource !== undefined) {
                localVarQueryParameter["filter[source]"] = filterSource;
            }

            if (filterColumns !== undefined) {
                localVarQueryParameter["filter[columns]"] = filterColumns;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdDelete.",
                );
            }
            const localVarPath = `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdGet.",
                );
            }
            const localVarPath = `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesPatchResource} [tablesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesPatchResource?: TablesPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tablesPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdPatch.",
                );
            }
            const localVarPath = `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablesPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tablesPatchResource !== undefined ? tablesPatchResource : {})
                : tablesPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdRelationshipsSourcesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdRelationshipsSourcesDelete.",
                );
            }
            const localVarPath = `/tables/{id}/relationships/sources`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve sources references related to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdRelationshipsSourcesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdRelationshipsSourcesGet.",
                );
            }
            const localVarPath = `/tables/{id}/relationships/sources`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, sourcesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdRelationshipsSourcesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdRelationshipsSourcesPatch.",
                );
            }
            const localVarPath = `/tables/{id}/relationships/sources`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      sourcesResourceReferenceResponseSchema !== undefined
                          ? sourcesResourceReferenceResponseSchema
                          : {},
                  )
                : sourcesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, sourcesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdRelationshipsSourcesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdRelationshipsSourcesPost.",
                );
            }
            const localVarPath = `/tables/{id}/relationships/sources`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      sourcesResourceReferenceResponseSchema !== undefined
                          ? sourcesResourceReferenceResponseSchema
                          : {},
                  )
                : sourcesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdSourcesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdSourcesDelete.",
                );
            }
            const localVarPath = `/tables/{id}/sources`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve sources related to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdSourcesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdSourcesGet.",
                );
            }
            const localVarPath = `/tables/{id}/sources`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, sourcesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdSourcesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdSourcesPatch.",
                );
            }
            const localVarPath = `/tables/{id}/sources`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      sourcesResourceReferenceResponseSchema !== undefined
                          ? sourcesResourceReferenceResponseSchema
                          : {},
                  )
                : sourcesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, sourcesResourceReferenceResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdSourcesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdSourcesPost.",
                );
            }
            const localVarPath = `/tables/{id}/sources`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcesResourceReferenceResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      sourcesResourceReferenceResponseSchema !== undefined
                          ? sourcesResourceReferenceResponseSchema
                          : {},
                  )
                : sourcesResourceReferenceResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TablesPostResource} [tablesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tablesPostResource?: TablesPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, tablesPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesPost.",
                );
            }
            const localVarPath = `/tables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablesPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tablesPostResource !== undefined ? tablesPostResource : {})
                : tablesPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of tags resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {string} [sort] tags sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsGet.",
                );
            }
            const localVarPath = `/tags`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesDelete.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesGet.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesPatch.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesPost.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsGet.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsPost.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDelete.",
                );
            }
            const localVarPath = `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve facts related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsGet.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsPost.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdGet.",
                );
            }
            const localVarPath = `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve labels related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterType,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsGet.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsPost.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsPatchResource} [tagsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsPatchResource?: TagsPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagsPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdPatch.",
                );
            }
            const localVarPath = `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tagsPatchResource !== undefined ? tagsPatchResource : {})
                : tagsPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attributes references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributesResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributesResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributesResourceReferencesResponseSchema !== undefined
                          ? attributesResourceReferencesResponseSchema
                          : {},
                  )
                : attributesResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve datasets references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetsResourceReferencesResponseSchema !== undefined
                          ? datasetsResourceReferencesResponseSchema
                          : {},
                  )
                : datasetsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve facts references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factsResourceReferencesResponseSchema !== undefined
                          ? factsResourceReferencesResponseSchema
                          : {},
                  )
                : factsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve labels references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterType,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelsResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelsResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelsResourceReferencesResponseSchema !== undefined
                          ? labelsResourceReferencesResponseSchema
                          : {},
                  )
                : labelsResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TagsPostResource} [tagsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tagsPostResource?: TagsPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, tagsPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsPost.",
                );
            }
            const localVarPath = `/tags`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagsPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tagsPostResource !== undefined ? tagsPostResource : {})
                : tagsPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a List of attributes resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {string} [sort] attributes sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDatasetsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDatasetsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDatasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdLabelsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve labels related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdLabelsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdLabelsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesPatchResource} [attributesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesPatchResource?: AttributesPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsDatasetsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsDatasetsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsDatasetsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsLabelsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve labels references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsLabelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsLabelsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsLabelsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsTagsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsTagsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsTagsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsTagsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdTagsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdTagsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdTagsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {AttributesPostResource} [attributesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                attributesPostResource?: AttributesPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of datasets resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {string} [sort] datasets sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdAttributesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdAttributesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdAttributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDatasetsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDatasetsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDatasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdFactsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve facts related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdFactsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsPatchResource} [datasetsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsPatchResource?: DatasetsPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsAttributesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsAttributesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsAttributesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsDatasetsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsDatasetsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsDatasetsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsFactsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve facts references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsFactsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsFactsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsFactsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsTagsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsTagsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsTagsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsTagsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdTagsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdTagsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdTagsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {DatasetsPostResource} [datasetsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                datasetsPostResource?: DatasetsPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of facts resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {string} [sort] facts sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDatasetsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDatasetsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDatasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsPatchResource} [factsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsPatchResource?: FactsPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsDatasetsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets references related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsDatasetsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsDatasetsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsTagsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags references related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdRelationshipsTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsTagsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdRelationshipsTagsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdTagsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdTagsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdTagsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {FactsPostResource} [factsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                factsPostResource?: FactsPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of labels resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {string} [sort] labels sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdAttributesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdAttributesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdAttributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsPatchResource} [labelsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsPatchResource?: LabelsPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsAttributesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes references related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsAttributesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsAttributesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsTagsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags references related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdRelationshipsTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsTagsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsTagsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdTagsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tags related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdTagsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdTagsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {LabelsPostResource} [labelsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                labelsPostResource?: LabelsPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of metaElement resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {string} [sort] metaElement sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaElementResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metaElementGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaElementResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metaElementIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metaElement related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaElementResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metaElementIdMetaElementGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metaElement references related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdRelationshipsMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetaElementResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metaElementIdRelationshipsMetaElementGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of metrics resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metrics fields to include (csv)
         * @param {string} [include] metrics relationships to include (csv)
         * @param {string} [sort] metrics sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve facts related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metrics fields to include (csv)
         * @param {string} [include] metrics relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricsPatchResource} [metricsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricsPatchResource?: MetricsPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes references related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve facts references related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {MetricsPostResource} [metricsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                metricsPostResource?: MetricsPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of sources resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTables] Filter by tables (csv)
         * @param {string} [filterConnection] Filter by connection (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {string} [sort] sources sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTables?: string;
                filterConnection?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesPatchResource} [sourcesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesPatchResource?: SourcesPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).sourcesIdRelationshipsTablesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tables references related to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).sourcesIdRelationshipsTablesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).sourcesIdRelationshipsTablesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).sourcesIdRelationshipsTablesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdTablesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tables related to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TablesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdTablesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdTablesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<TablesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdTablesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {SourcesPostResource} [sourcesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                sourcesPostResource?: SourcesPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of tables resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {string} [sort] tables sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TablesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TablesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesPatchResource} [tablesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesPatchResource?: TablesPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tablesIdRelationshipsSourcesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve sources references related to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tablesIdRelationshipsSourcesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tablesIdRelationshipsSourcesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tablesIdRelationshipsSourcesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdSourcesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve sources related to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdSourcesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdSourcesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<SourcesResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdSourcesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TablesPostResource} [tablesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tablesPostResource?: TablesPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TablesResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of tags resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {string} [sort] tags sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributesResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve facts related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve labels related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelsResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsPatchResource} [tagsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsPatchResource?: TagsPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attributes references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributesResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve datasets references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsFactsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve facts references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdRelationshipsFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsFactsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdRelationshipsFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsLabelsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve labels references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdRelationshipsLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsLabelsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<LabelsResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsLabelsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TagsPostResource} [tagsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tagsPostResource?: TagsPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve a List of attributes resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {string} [sort] attributes sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<AttributesResourcesResponseSchema> {
            return DefaultApiFp(configuration).attributesGet(params, options)(axios, basePath);
        },
        /**
         * Delete attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdDatasetsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve datasets related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Update attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdDatasetsPatch(params, options)(axios, basePath);
        },
        /**
         * Create attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdDatasetsPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).attributesIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdGet(params, options)(axios, basePath);
        },
        /**
         * Delete attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdLabelsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve labels related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourcesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdLabelsPatch(params, options)(axios, basePath);
        },
        /**
         * Create attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdLabelsPost(params, options)(axios, basePath);
        },
        /**
         * Update a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesPatchResource} [attributesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesPatchResource?: AttributesPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).attributesIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsDatasetsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve datasets references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsDatasetsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create attributes relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsDatasetsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsLabelsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve labels references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsLabelsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsLabelsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create attributes relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsLabelsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsTagsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tags references related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsTagsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsTagsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsTagsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdTagsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve tags related to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourcesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Update attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdTagsPatch(params, options)(axios, basePath);
        },
        /**
         * Create attributes relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdTagsPost(params, options)(axios, basePath);
        },
        /**
         * Create a Attributes
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {AttributesPostResource} [attributesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                attributesPostResource?: AttributesPostResource;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceResponseSchema> {
            return DefaultApiFp(configuration).attributesPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of datasets resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {string} [sort] datasets sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsGet(params, options)(axios, basePath);
        },
        /**
         * Delete datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdAttributesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve attributes related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Update datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdAttributesPatch(params, options)(axios, basePath);
        },
        /**
         * Create datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdAttributesPost(params, options)(axios, basePath);
        },
        /**
         * Delete datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdDatasetsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve datasets related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Update datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdDatasetsPatch(params, options)(axios, basePath);
        },
        /**
         * Create datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdDatasetsPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).datasetsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Delete datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdFactsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve facts related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdFactsPatch(params, options)(axios, basePath);
        },
        /**
         * Create datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdFactsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsPatchResource} [datasetsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsPatchResource?: DatasetsPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).datasetsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsAttributesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve attributes references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsAttributesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create datasets relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsAttributesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsDatasetsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve datasets references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsDatasetsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create datasets relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsDatasetsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsFactsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve facts references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsFactsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsFactsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create datasets relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsFactsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsTagsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tags references related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsTagsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsTagsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsTagsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdTagsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve tags related to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Update datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdTagsPatch(params, options)(axios, basePath);
        },
        /**
         * Create datasets relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdTagsPost(params, options)(axios, basePath);
        },
        /**
         * Create a Datasets
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {DatasetsPostResource} [datasetsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                datasetsPostResource?: DatasetsPostResource;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceResponseSchema> {
            return DefaultApiFp(configuration).datasetsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of facts resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {string} [sort] facts sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<FactsResourcesResponseSchema> {
            return DefaultApiFp(configuration).factsGet(params, options)(axios, basePath);
        },
        /**
         * Delete facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdDatasetsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve datasets related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceResponseSchema> {
            return DefaultApiFp(configuration).factsIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Update facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdDatasetsPatch(params, options)(axios, basePath);
        },
        /**
         * Create facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdDatasetsPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).factsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceResponseSchema> {
            return DefaultApiFp(configuration).factsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsPatchResource} [factsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsPatchResource?: FactsPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).factsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsDatasetsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve datasets references related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsDatasetsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create facts relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsDatasetsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsTagsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tags references related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsTagsGet(params, options)(axios, basePath);
        },
        /**
         * Update facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsTagsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsTagsPost(params, options)(axios, basePath);
        },
        /**
         * Delete facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdTagsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve tags related to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourcesResponseSchema> {
            return DefaultApiFp(configuration).factsIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Update facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdTagsPatch(params, options)(axios, basePath);
        },
        /**
         * Create facts relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdTagsPost(params, options)(axios, basePath);
        },
        /**
         * Create a Facts
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {FactsPostResource} [factsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                factsPostResource?: FactsPostResource;
            },
            options?: any,
        ): AxiosPromise<FactsResourceResponseSchema> {
            return DefaultApiFp(configuration).factsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of labels resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {string} [sort] labels sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<LabelsResourcesResponseSchema> {
            return DefaultApiFp(configuration).labelsGet(params, options)(axios, basePath);
        },
        /**
         * Delete labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdAttributesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve attributes related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Update labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdAttributesPatch(params, options)(axios, basePath);
        },
        /**
         * Create labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdAttributesPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).labelsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsPatchResource} [labelsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsPatchResource?: LabelsPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).labelsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsAttributesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve attributes references related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsAttributesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create labels relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsAttributesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsTagsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tags references related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsTagsGet(params, options)(axios, basePath);
        },
        /**
         * Update labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsTagsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsTagsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdTagsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve tags related to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourcesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Update labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdTagsPatch(params, options)(axios, basePath);
        },
        /**
         * Create labels relationship to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TagsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdTagsPost(params, options)(axios, basePath);
        },
        /**
         * Create a Labels
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {LabelsPostResource} [labelsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                labelsPostResource?: LabelsPostResource;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceResponseSchema> {
            return DefaultApiFp(configuration).labelsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of metaElement resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {string} [sort] metaElement sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourcesResponseSchema> {
            return DefaultApiFp(configuration).metaElementGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourceResponseSchema> {
            return DefaultApiFp(configuration).metaElementIdGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve metaElement related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourceResponseSchema> {
            return DefaultApiFp(configuration).metaElementIdMetaElementGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve metaElement references related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdRelationshipsMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).metaElementIdRelationshipsMetaElementGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve a List of metrics resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metrics fields to include (csv)
         * @param {string} [include] metrics relationships to include (csv)
         * @param {string} [sort] metrics sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<MetricsResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsGet(params, options)(axios, basePath);
        },
        /**
         * Delete metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve attributes related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Update metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesPatch(params, options)(axios, basePath);
        },
        /**
         * Create metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).metricsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Delete metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve facts related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsPatch(params, options)(axios, basePath);
        },
        /**
         * Create metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metrics fields to include (csv)
         * @param {string} [include] metrics relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetricsResourceResponseSchema> {
            return DefaultApiFp(configuration).metricsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricsPatchResource} [metricsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricsPatchResource?: MetricsPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).metricsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve attributes references related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create metrics relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve facts references related to a metrics resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create metrics relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create a Metrics
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {MetricsPostResource} [metricsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                metricsPostResource?: MetricsPostResource;
            },
            options?: any,
        ): AxiosPromise<MetricsResourceResponseSchema> {
            return DefaultApiFp(configuration).metricsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of sources resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTables] Filter by tables (csv)
         * @param {string} [filterConnection] Filter by connection (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {string} [sort] sources sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTables?: string;
                filterConnection?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<SourcesResourcesResponseSchema> {
            return DefaultApiFp(configuration).sourcesGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).sourcesIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesPatchResource} [sourcesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesPatchResource?: SourcesPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).sourcesIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdRelationshipsTablesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tables references related to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdRelationshipsTablesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdRelationshipsTablesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdRelationshipsTablesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdTablesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve tables related to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TablesResourcesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdTablesGet(params, options)(axios, basePath);
        },
        /**
         * Update sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdTablesPatch(params, options)(axios, basePath);
        },
        /**
         * Create sources relationship to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<TablesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdTablesPost(params, options)(axios, basePath);
        },
        /**
         * Create a Sources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {SourcesPostResource} [sourcesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                sourcesPostResource?: SourcesPostResource;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceResponseSchema> {
            return DefaultApiFp(configuration).sourcesPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of tables resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {string} [sort] tables sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<TablesResourcesResponseSchema> {
            return DefaultApiFp(configuration).tablesGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).tablesIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tables fields to include (csv)
         * @param {string} [include] tables relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TablesResourceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablesPatchResource} [tablesPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablesPatchResource?: TablesPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).tablesIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdRelationshipsSourcesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve sources references related to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdRelationshipsSourcesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdRelationshipsSourcesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdRelationshipsSourcesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdSourcesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve sources related to a tables resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] sources fields to include (csv)
         * @param {string} [include] sources relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdSourcesGet(params, options)(axios, basePath);
        },
        /**
         * Update tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdSourcesPatch(params, options)(axios, basePath);
        },
        /**
         * Create tables relationship to a sources resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
            },
            options?: any,
        ): AxiosPromise<SourcesResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdSourcesPost(params, options)(axios, basePath);
        },
        /**
         * Create a Tables
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TablesPostResource} [tablesPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tablesPostResource?: TablesPostResource;
            },
            options?: any,
        ): AxiosPromise<TablesResourceResponseSchema> {
            return DefaultApiFp(configuration).tablesPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of tags resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {string} [sort] tags sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<TagsResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsGet(params, options)(axios, basePath);
        },
        /**
         * Delete tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve attributes related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Update tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesPatch(params, options)(axios, basePath);
        },
        /**
         * Create tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesPost(params, options)(axios, basePath);
        },
        /**
         * Delete tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve datasets related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Update tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsPatch(params, options)(axios, basePath);
        },
        /**
         * Create tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).tagsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Delete tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve facts related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsPatch(params, options)(axios, basePath);
        },
        /**
         * Create tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tags fields to include (csv)
         * @param {string} [include] tags relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagsResourceResponseSchema> {
            return DefaultApiFp(configuration).tagsIdGet(params, options)(axios, basePath);
        },
        /**
         * Delete tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve labels related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsPatch(params, options)(axios, basePath);
        },
        /**
         * Create tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsPost(params, options)(axios, basePath);
        },
        /**
         * Update a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagsPatchResource} [tagsPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagsPatchResource?: TagsPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).tagsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve attributes references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attributes fields to include (csv)
         * @param {string} [include] attributes relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tags relationship to a attributes resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributesResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve datasets references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] datasets fields to include (csv)
         * @param {string} [include] datasets relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tags relationship to a datasets resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve facts references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] facts fields to include (csv)
         * @param {string} [include] facts relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tags relationship to a facts resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsPost(params, options)(axios, basePath);
        },
        /**
         * Delete tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve labels references related to a tags resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] labels fields to include (csv)
         * @param {string} [include] labels relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterType?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tags relationship to a labels resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelsResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create a Tags
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TagsPostResource} [tagsPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tagsPostResource?: TagsPostResource;
            },
            options?: any,
        ): AxiosPromise<TagsResourceResponseSchema> {
            return DefaultApiFp(configuration).tagsPost(params, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Retrieve a List of attributes resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {string} [sort] attributes sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<AttributesResourcesResponseSchema>;

    /**
     * Delete attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Retrieve datasets related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceResponseSchema>;

    /**
     * Update attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Create attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Delete a Attributes
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceResponseSchema>;

    /**
     * Delete attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Retrieve labels related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourcesResponseSchema>;

    /**
     * Update attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Create attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Update a Attributes
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesPatchResource} [attributesPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesPatchResource?: AttributesPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Retrieve datasets references related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Update attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Create attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Delete attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Retrieve labels references related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Update attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Create attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Delete attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags references related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Update attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Delete attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourcesResponseSchema>;

    /**
     * Update attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create a Attributes
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {AttributesPostResource} [attributesPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            attributesPostResource?: AttributesPostResource;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceResponseSchema>;

    /**
     * Retrieve a List of datasets resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {string} [sort] datasets sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourcesResponseSchema>;

    /**
     * Delete datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Retrieve attributes related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourcesResponseSchema>;

    /**
     * Update datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Delete datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Retrieve datasets related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourcesResponseSchema>;

    /**
     * Update datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Delete a Datasets
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Delete datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve facts related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourcesResponseSchema>;

    /**
     * Update datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceResponseSchema>;

    /**
     * Update a Datasets
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsPatchResource} [datasetsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsPatchResource?: DatasetsPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Retrieve attributes references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Update datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Delete datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Retrieve datasets references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Update datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Delete datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve facts references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Update datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Delete datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Update datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Delete datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourcesResponseSchema>;

    /**
     * Update datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create a Datasets
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {DatasetsPostResource} [datasetsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            datasetsPostResource?: DatasetsPostResource;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceResponseSchema>;

    /**
     * Retrieve a List of facts resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {string} [sort] facts sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<FactsResourcesResponseSchema>;

    /**
     * Delete facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Retrieve datasets related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceResponseSchema>;

    /**
     * Update facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Create facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Delete a Facts
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceResponseSchema>;

    /**
     * Update a Facts
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsPatchResource} [factsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsPatchResource?: FactsPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Retrieve datasets references related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Update facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Create facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferenceResponseSchema>;

    /**
     * Delete facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags references related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Update facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Delete facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourcesResponseSchema>;

    /**
     * Update facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create a Facts
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {FactsPostResource} [factsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            factsPostResource?: FactsPostResource;
        },
        options?: any,
    ): AxiosPromise<FactsResourceResponseSchema>;

    /**
     * Retrieve a List of labels resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {string} [sort] labels sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<LabelsResourcesResponseSchema>;

    /**
     * Delete labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Retrieve attributes related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceResponseSchema>;

    /**
     * Update labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Create labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Delete a Labels
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceResponseSchema>;

    /**
     * Update a Labels
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsPatchResource} [labelsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsPatchResource?: LabelsPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Retrieve attributes references related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Update labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Create labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferenceResponseSchema>;

    /**
     * Delete labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags references related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Update labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Delete labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Retrieve tags related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourcesResponseSchema>;

    /**
     * Update labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TagsResourceReferencesResponseSchema>;

    /**
     * Create a Labels
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {LabelsPostResource} [labelsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            labelsPostResource?: LabelsPostResource;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceResponseSchema>;

    /**
     * Retrieve a List of metaElement resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {string} [sort] metaElement sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourcesResponseSchema>;

    /**
     * Retrieve a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourceResponseSchema>;

    /**
     * Retrieve metaElement related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementIdMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourceResponseSchema>;

    /**
     * Retrieve metaElement references related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementIdRelationshipsMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourceReferenceResponseSchema>;

    /**
     * Retrieve a List of metrics resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metrics fields to include (csv)
     * @param {string} [include] metrics relationships to include (csv)
     * @param {string} [sort] metrics sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<MetricsResourcesResponseSchema>;

    /**
     * Delete metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Retrieve attributes related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourcesResponseSchema>;

    /**
     * Update metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Create metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Delete a Metrics
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Delete metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve facts related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourcesResponseSchema>;

    /**
     * Update metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metrics fields to include (csv)
     * @param {string} [include] metrics relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetricsResourceResponseSchema>;

    /**
     * Update a Metrics
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricsPatchResource} [metricsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricsPatchResource?: MetricsPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Retrieve attributes references related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Update metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Create metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Delete metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve facts references related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Update metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create a Metrics
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {MetricsPostResource} [metricsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            metricsPostResource?: MetricsPostResource;
        },
        options?: any,
    ): AxiosPromise<MetricsResourceResponseSchema>;

    /**
     * Retrieve a List of sources resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTables] Filter by tables (csv)
     * @param {string} [filterConnection] Filter by connection (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {string} [sort] sources sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTables?: string;
            filterConnection?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<SourcesResourcesResponseSchema>;

    /**
     * Delete a Sources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceResponseSchema>;

    /**
     * Update a Sources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesPatchResource} [sourcesPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesPatchResource?: SourcesPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdRelationshipsTablesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Retrieve tables references related to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdRelationshipsTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Update sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdRelationshipsTablesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Create sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdRelationshipsTablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Delete sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdTablesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Retrieve tables related to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TablesResourcesResponseSchema>;

    /**
     * Update sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdTablesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Create sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdTablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<TablesResourceReferencesResponseSchema>;

    /**
     * Create a Sources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {SourcesPostResource} [sourcesPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            sourcesPostResource?: SourcesPostResource;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceResponseSchema>;

    /**
     * Retrieve a List of tables resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {string} [sort] tables sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<TablesResourcesResponseSchema>;

    /**
     * Delete a Tables
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TablesResourceResponseSchema>;

    /**
     * Update a Tables
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesPatchResource} [tablesPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesPatchResource?: TablesPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdRelationshipsSourcesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Retrieve sources references related to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdRelationshipsSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Update tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdRelationshipsSourcesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Create tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdRelationshipsSourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Delete tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdSourcesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Retrieve sources related to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceResponseSchema>;

    /**
     * Update tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdSourcesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Create tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdSourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ): AxiosPromise<SourcesResourceReferenceResponseSchema>;

    /**
     * Create a Tables
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TablesPostResource} [tablesPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tablesPostResource?: TablesPostResource;
        },
        options?: any,
    ): AxiosPromise<TablesResourceResponseSchema>;

    /**
     * Retrieve a List of tags resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {string} [sort] tags sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<TagsResourcesResponseSchema>;

    /**
     * Delete tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Retrieve attributes related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourcesResponseSchema>;

    /**
     * Update tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Delete tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Retrieve datasets related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourcesResponseSchema>;

    /**
     * Update tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Delete a Tags
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Delete tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve facts related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourcesResponseSchema>;

    /**
     * Update tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagsResourceResponseSchema>;

    /**
     * Delete tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Retrieve labels related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourcesResponseSchema>;

    /**
     * Update tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Update a Tags
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsPatchResource} [tagsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsPatchResource?: TagsPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Retrieve attributes references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Update tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributesResourceReferencesResponseSchema>;

    /**
     * Delete tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Retrieve datasets references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Update tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetsResourceReferencesResponseSchema>;

    /**
     * Delete tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Retrieve facts references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Update tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactsResourceReferencesResponseSchema>;

    /**
     * Delete tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Retrieve labels references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Update tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Create tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelsResourceReferencesResponseSchema>;

    /**
     * Create a Tags
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TagsPostResource} [tagsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tagsPostResource?: TagsPostResource;
        },
        options?: any,
    ): AxiosPromise<TagsResourceResponseSchema>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Retrieve a List of attributes resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {string} [sort] attributes sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Attributes
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve labels related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdLabelsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdLabelsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update a Attributes
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesPatchResource} [attributesPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesPatchResource?: AttributesPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets references related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create attributes relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve labels references related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsLabelsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create attributes relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsLabelsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags references related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsTagsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsTagsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags related to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdTagsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create attributes relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdTagsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Attributes
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {AttributesPostResource} [attributesPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            attributesPostResource?: AttributesPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of datasets resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {string} [sort] datasets sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Datasets
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve facts related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Datasets
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsPatchResource} [datasetsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsPatchResource?: DatasetsPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve facts references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags references related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsTagsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsTagsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags related to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdTagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdTagsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create datasets relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdTagsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Datasets
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {DatasetsPostResource} [datasetsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            datasetsPostResource?: DatasetsPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of facts resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {string} [sort] facts sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Facts
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Facts
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsPatchResource} [factsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsPatchResource?: FactsPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets references related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create facts relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferenceResponseSchema} [datasetsResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferenceResponseSchema?: DatasetsResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags references related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsTagsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsTagsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdTagsDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve tags related to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdTagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdTagsPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Create facts relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdTagsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Create a Facts
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {FactsPostResource} [factsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            factsPostResource?: FactsPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of labels resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {string} [sort] labels sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Labels
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Labels
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsPatchResource} [labelsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsPatchResource?: LabelsPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes references related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create labels relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferenceResponseSchema} [attributesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferenceResponseSchema?: AttributesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags references related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsTagsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsTagsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdTagsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdTagsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tags related to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdTagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdTagsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdTagsPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Create labels relationship to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsResourceReferencesResponseSchema} [tagsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdTagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsResourceReferencesResponseSchema?: TagsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdTagsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Create a Labels
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {LabelsPostResource} [labelsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            labelsPostResource?: LabelsPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of metaElement resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {string} [sort] metaElement sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve metaElement related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementIdMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementIdMetaElementGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve metaElement references related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementIdRelationshipsMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementIdRelationshipsMetaElementGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a List of metrics resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metrics fields to include (csv)
     * @param {string} [include] metrics relationships to include (csv)
     * @param {string} [sort] metrics sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Metrics
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve facts related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metrics fields to include (csv)
     * @param {string} [include] metrics relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Metrics
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricsPatchResource} [metricsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricsPatchResource?: MetricsPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes references related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metrics relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve facts references related to a metrics resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metrics relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Metrics
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {MetricsPostResource} [metricsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            metricsPostResource?: MetricsPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of sources resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTables] Filter by tables (csv)
     * @param {string} [filterConnection] Filter by connection (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {string} [sort] sources sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTables?: string;
            filterConnection?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete a Sources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Sources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesPatchResource} [sourcesPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesPatchResource?: SourcesPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdRelationshipsTablesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdRelationshipsTablesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tables references related to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdRelationshipsTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdRelationshipsTablesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdRelationshipsTablesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdRelationshipsTablesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdRelationshipsTablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdRelationshipsTablesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdTablesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdTablesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tables related to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdTablesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdTablesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdTablesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create sources relationship to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesResourceReferencesResponseSchema} [tablesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdTablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesResourceReferencesResponseSchema?: TablesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdTablesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Sources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {SourcesPostResource} [sourcesPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            sourcesPostResource?: SourcesPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of tables resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {string} [sort] tables sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete a Tables
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] tables fields to include (csv)
     * @param {string} [include] tables relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Tables
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablesPatchResource} [tablesPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablesPatchResource?: TablesPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdRelationshipsSourcesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdRelationshipsSourcesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve sources references related to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdRelationshipsSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdRelationshipsSourcesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdRelationshipsSourcesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdRelationshipsSourcesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdRelationshipsSourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdRelationshipsSourcesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdSourcesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdSourcesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve sources related to a tables resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] sources fields to include (csv)
     * @param {string} [include] sources relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdSourcesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdSourcesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdSourcesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tables relationship to a sources resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcesResourceReferenceResponseSchema} [sourcesResourceReferenceResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdSourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcesResourceReferenceResponseSchema?: SourcesResourceReferenceResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdSourcesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Tables
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TablesPostResource} [tablesPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tablesPostResource?: TablesPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of tags resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {string} [sort] tags sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Tags
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve facts related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Create tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] tags fields to include (csv)
     * @param {string} [include] tags relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve labels related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Create tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Tags
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagsPatchResource} [tagsPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagsPatchResource?: TagsPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attributes references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attributes fields to include (csv)
     * @param {string} [include] attributes relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tags relationship to a attributes resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributesResourceReferencesResponseSchema} [attributesResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributesResourceReferencesResponseSchema?: AttributesResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve datasets references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] datasets fields to include (csv)
     * @param {string} [include] datasets relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tags relationship to a datasets resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetsResourceReferencesResponseSchema} [datasetsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetsResourceReferencesResponseSchema?: DatasetsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve facts references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] facts fields to include (csv)
     * @param {string} [include] facts relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tags relationship to a facts resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactsResourceReferencesResponseSchema} [factsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factsResourceReferencesResponseSchema?: FactsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve labels references related to a tags resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] labels fields to include (csv)
     * @param {string} [include] labels relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterType?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tags relationship to a labels resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelsResourceReferencesResponseSchema} [labelsResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelsResourceReferencesResponseSchema?: LabelsResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Tags
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TagsPostResource} [tagsPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tagsPostResource?: TagsPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsPost(params, options)(this.axios, this.basePath);
    }
}
