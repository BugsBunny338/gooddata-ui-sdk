// (C) 2020 GoodData Corporation
// tslint:disable
/**
 * Metadata JSON:API
 * OpenAPI generated for Metadata JSON:API endpoints
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import * as globalImportUrl from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 *
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * an application-specific error code, expressed as a string value
     * @type {string}
     * @memberof ApiError
     */
    code?: string;
    /**
     * a human-readable explanation specific to this occurrence of the problem. Like \'title\', this fieldâ€™s value can be localized.
     * @type {string}
     * @memberof ApiError
     */
    detail?: string;
    /**
     * a unique identifier for this particular occurrence of the problem
     * @type {string}
     * @memberof ApiError
     */
    id?: string;
    /**
     *
     * @type {ApiErrorLinks}
     * @memberof ApiError
     */
    links?: ApiErrorLinks;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof ApiError
     */
    meta?: { [key: string]: object };
    /**
     *
     * @type {ApiErrorSource}
     * @memberof ApiError
     */
    source?: ApiErrorSource;
    /**
     * the HTTP status code applicable to this problem, expressed as a string value
     * @type {string}
     * @memberof ApiError
     */
    status?: string;
    /**
     * a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization
     * @type {string}
     * @memberof ApiError
     */
    title?: string;
}
/**
 *
 * @export
 * @interface ApiErrorLinks
 */
export interface ApiErrorLinks {
    /**
     * a link that leads to further details about this particular occurrence of the problem
     * @type {string}
     * @memberof ApiErrorLinks
     */
    about?: string;
}
/**
 *
 * @export
 * @interface ApiErrorSource
 */
export interface ApiErrorSource {
    /**
     * a string indicating which URI query parameter caused the error
     * @type {string}
     * @memberof ApiErrorSource
     */
    parameter?: string;
    /**
     * a JSON Pointer [RFC6901] to the associated entity in the request document
     * @type {string}
     * @memberof ApiErrorSource
     */
    pointer?: string;
}
/**
 *
 * @export
 * @interface AttributeDatasetResourceAttribute
 */
export interface AttributeDatasetResourceAttribute {}
/**
 *
 * @export
 * @enum {string}
 */
export enum AttributeGranularityResourceAttribute {
    Year = "year",
    Day = "day",
    Quarter = "quarter",
    Month = "month",
    Week = "week",
    QuarterOfYear = "quarterOfYear",
    MonthOfYear = "monthOfYear",
    DayOfYear = "dayOfYear",
    DayOfWeek = "dayOfWeek",
    DayOfMonth = "dayOfMonth",
    WeekOfYear = "weekOfYear",
}
/**
 *
 * @export
 * @interface AttributePatchResource
 */
export interface AttributePatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributePatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Attribute)
     * @type {string}
     * @memberof AttributePatchResource
     */
    type: AttributePatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof AttributePatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributePatchResourceTypeEnum {
    Attribute = "Attribute",
}

/**
 *
 * @export
 * @interface AttributePostResource
 */
export interface AttributePostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributePostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Attribute)
     * @type {string}
     * @memberof AttributePostResource
     */
    type: AttributePostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof AttributePostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributePostResourceTypeEnum {
    Attribute = "Attribute",
}

/**
 *
 * @export
 * @interface AttributePostResourceReference
 */
export interface AttributePostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributePostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Attribute)
     * @type {string}
     * @memberof AttributePostResourceReference
     */
    type: AttributePostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributePostResourceReferenceTypeEnum {
    Attribute = "Attribute",
}

/**
 *
 * @export
 * @interface AttributeResourceAttributes
 */
export interface AttributeResourceAttributes {
    /**
     *
     * @type {AttributeResourceAttributesAttributes}
     * @memberof AttributeResourceAttributes
     */
    attributes?: AttributeResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface AttributeResourceAttributesAttributes
 */
export interface AttributeResourceAttributesAttributes {
    /**
     *
     * @type {DatasetResourceReference}
     * @memberof AttributeResourceAttributesAttributes
     */
    dataset?: DatasetResourceReference;
    /**
     *
     * @type {string}
     * @memberof AttributeResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {AttributeGranularityResourceAttribute}
     * @memberof AttributeResourceAttributesAttributes
     */
    granularity?: AttributeGranularityResourceAttribute | null;
    /**
     *
     * @type {Array<LabelResourceReference>}
     * @memberof AttributeResourceAttributesAttributes
     */
    labels?: Array<LabelResourceReference> | null;
    /**
     *
     * @type {Array<TagResourceReference>}
     * @memberof AttributeResourceAttributesAttributes
     */
    tags?: Array<TagResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof AttributeResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface AttributeResourcePatchAttributes
 */
export interface AttributeResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof AttributeResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface AttributeResourcePostAttributes
 */
export interface AttributeResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof AttributeResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface AttributeResourceReference
 */
export interface AttributeResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributeResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Attribute)
     * @type {string}
     * @memberof AttributeResourceReference
     */
    type: AttributeResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributeResourceReferenceTypeEnum {
    Attribute = "Attribute",
}

/**
 *
 * @export
 * @interface AttributeResourceReferenceResponseSchema
 */
export interface AttributeResourceReferenceResponseSchema {
    /**
     *
     * @type {AttributeResourceReference}
     * @memberof AttributeResourceReferenceResponseSchema
     */
    data?: AttributeResourceReference;
}
/**
 *
 * @export
 * @interface AttributeResourceReferencesResponseSchema
 */
export interface AttributeResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<AttributeResourceReference>}
     * @memberof AttributeResourceReferencesResponseSchema
     */
    data?: Array<AttributeResourceReference>;
}
/**
 *
 * @export
 * @interface AttributeResourceResponseSchema
 */
export interface AttributeResourceResponseSchema extends Success {
    /**
     *
     * @type {AttributeResourceSchema}
     * @memberof AttributeResourceResponseSchema
     */
    data: AttributeResourceSchema;
}
/**
 *
 * @export
 * @interface AttributeResourceSchema
 */
export interface AttributeResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof AttributeResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Attribute)
     * @type {string}
     * @memberof AttributeResourceSchema
     */
    type: AttributeResourceSchemaTypeEnum;
    /**
     *
     * @type {AttributeResourceAttributesAttributes}
     * @memberof AttributeResourceSchema
     */
    attributes: AttributeResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof AttributeResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof AttributeResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum AttributeResourceSchemaTypeEnum {
    Attribute = "Attribute",
}

/**
 *
 * @export
 * @interface AttributeResourceSchemaAllOf
 */
export interface AttributeResourceSchemaAllOf {
    /**
     *
     * @type {object}
     * @memberof AttributeResourceSchemaAllOf
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof AttributeResourceSchemaAllOf
     */
    relationships?: object;
}
/**
 *
 * @export
 * @interface AttributeResourcesResponseSchema
 */
export interface AttributeResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<AttributeResourceSchema>}
     * @memberof AttributeResourcesResponseSchema
     */
    data: Array<AttributeResourceSchema>;
}
/**
 *
 * @export
 * @interface DatasetPatchResource
 */
export interface DatasetPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Dataset)
     * @type {string}
     * @memberof DatasetPatchResource
     */
    type: DatasetPatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof DatasetPatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetPatchResourceTypeEnum {
    Dataset = "Dataset",
}

/**
 *
 * @export
 * @interface DatasetPostResource
 */
export interface DatasetPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Dataset)
     * @type {string}
     * @memberof DatasetPostResource
     */
    type: DatasetPostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof DatasetPostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetPostResourceTypeEnum {
    Dataset = "Dataset",
}

/**
 *
 * @export
 * @interface DatasetPostResourceReference
 */
export interface DatasetPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Dataset)
     * @type {string}
     * @memberof DatasetPostResourceReference
     */
    type: DatasetPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetPostResourceReferenceTypeEnum {
    Dataset = "Dataset",
}

/**
 *
 * @export
 * @interface DatasetResourceAttributes
 */
export interface DatasetResourceAttributes {
    /**
     *
     * @type {DatasetResourceAttributesAttributes}
     * @memberof DatasetResourceAttributes
     */
    attributes?: DatasetResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface DatasetResourceAttributesAttributes
 */
export interface DatasetResourceAttributesAttributes {
    /**
     *
     * @type {Array<AttributeResourceReference>}
     * @memberof DatasetResourceAttributesAttributes
     */
    attributes?: Array<AttributeResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof DatasetResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {Array<FactResourceReference>}
     * @memberof DatasetResourceAttributesAttributes
     */
    facts?: Array<FactResourceReference> | null;
    /**
     *
     * @type {Array<object>}
     * @memberof DatasetResourceAttributesAttributes
     */
    grain?: Array<object> | null;
    /**
     *
     * @type {Array<object>}
     * @memberof DatasetResourceAttributesAttributes
     */
    referenceProperties?: Array<object> | null;
    /**
     *
     * @type {Array<DatasetResourceReference>}
     * @memberof DatasetResourceAttributesAttributes
     */
    references?: Array<DatasetResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof DatasetResourceAttributesAttributes
     */
    sourceTable?: string | null;
    /**
     *
     * @type {Array<TagResourceReference>}
     * @memberof DatasetResourceAttributesAttributes
     */
    tags?: Array<TagResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof DatasetResourceAttributesAttributes
     */
    title?: string | null;
    /**
     *
     * @type {string}
     * @memberof DatasetResourceAttributesAttributes
     */
    titleBase?: string | null;
    /**
     *
     * @type {string}
     * @memberof DatasetResourceAttributesAttributes
     */
    titlePattern?: string | null;
    /**
     *
     * @type {DatasetTypeResourceAttribute}
     * @memberof DatasetResourceAttributesAttributes
     */
    type?: DatasetTypeResourceAttribute | null;
}
/**
 *
 * @export
 * @interface DatasetResourcePatchAttributes
 */
export interface DatasetResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof DatasetResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface DatasetResourcePostAttributes
 */
export interface DatasetResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof DatasetResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface DatasetResourceReference
 */
export interface DatasetResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Dataset)
     * @type {string}
     * @memberof DatasetResourceReference
     */
    type: DatasetResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetResourceReferenceTypeEnum {
    Dataset = "Dataset",
}

/**
 *
 * @export
 * @interface DatasetResourceReferenceResponseSchema
 */
export interface DatasetResourceReferenceResponseSchema {
    /**
     *
     * @type {DatasetResourceReference}
     * @memberof DatasetResourceReferenceResponseSchema
     */
    data?: DatasetResourceReference;
}
/**
 *
 * @export
 * @interface DatasetResourceReferencesResponseSchema
 */
export interface DatasetResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<DatasetResourceReference>}
     * @memberof DatasetResourceReferencesResponseSchema
     */
    data?: Array<DatasetResourceReference>;
}
/**
 *
 * @export
 * @interface DatasetResourceResponseSchema
 */
export interface DatasetResourceResponseSchema extends Success {
    /**
     *
     * @type {DatasetResourceSchema}
     * @memberof DatasetResourceResponseSchema
     */
    data: DatasetResourceSchema;
}
/**
 *
 * @export
 * @interface DatasetResourceSchema
 */
export interface DatasetResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof DatasetResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Dataset)
     * @type {string}
     * @memberof DatasetResourceSchema
     */
    type: DatasetResourceSchemaTypeEnum;
    /**
     *
     * @type {DatasetResourceAttributesAttributes}
     * @memberof DatasetResourceSchema
     */
    attributes: DatasetResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof DatasetResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof DatasetResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetResourceSchemaTypeEnum {
    Dataset = "Dataset",
}

/**
 *
 * @export
 * @interface DatasetResourcesResponseSchema
 */
export interface DatasetResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<DatasetResourceSchema>}
     * @memberof DatasetResourcesResponseSchema
     */
    data: Array<DatasetResourceSchema>;
}
/**
 *
 * @export
 * @enum {string}
 */
export enum DatasetTypeResourceAttribute {
    NORMAL = "NORMAL",
    DATE = "DATE",
}
/**
 *
 * @export
 * @interface FactDatasetResourceAttribute
 */
export interface FactDatasetResourceAttribute {}
/**
 *
 * @export
 * @interface FactPatchResource
 */
export interface FactPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Fact)
     * @type {string}
     * @memberof FactPatchResource
     */
    type: FactPatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof FactPatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum FactPatchResourceTypeEnum {
    Fact = "Fact",
}

/**
 *
 * @export
 * @interface FactPostResource
 */
export interface FactPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Fact)
     * @type {string}
     * @memberof FactPostResource
     */
    type: FactPostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof FactPostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum FactPostResourceTypeEnum {
    Fact = "Fact",
}

/**
 *
 * @export
 * @interface FactPostResourceReference
 */
export interface FactPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Fact)
     * @type {string}
     * @memberof FactPostResourceReference
     */
    type: FactPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum FactPostResourceReferenceTypeEnum {
    Fact = "Fact",
}

/**
 *
 * @export
 * @interface FactResourceAttributes
 */
export interface FactResourceAttributes {
    /**
     *
     * @type {FactResourceAttributesAttributes}
     * @memberof FactResourceAttributes
     */
    attributes?: FactResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface FactResourceAttributesAttributes
 */
export interface FactResourceAttributesAttributes {
    /**
     *
     * @type {DatasetResourceReference}
     * @memberof FactResourceAttributesAttributes
     */
    dataset?: DatasetResourceReference;
    /**
     *
     * @type {string}
     * @memberof FactResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {string}
     * @memberof FactResourceAttributesAttributes
     */
    sourceColumn?: string | null;
    /**
     *
     * @type {Array<TagResourceReference>}
     * @memberof FactResourceAttributesAttributes
     */
    tags?: Array<TagResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof FactResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface FactResourcePatchAttributes
 */
export interface FactResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof FactResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface FactResourcePostAttributes
 */
export interface FactResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof FactResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface FactResourceReference
 */
export interface FactResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Fact)
     * @type {string}
     * @memberof FactResourceReference
     */
    type: FactResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum FactResourceReferenceTypeEnum {
    Fact = "Fact",
}

/**
 *
 * @export
 * @interface FactResourceReferenceResponseSchema
 */
export interface FactResourceReferenceResponseSchema {
    /**
     *
     * @type {FactResourceReference}
     * @memberof FactResourceReferenceResponseSchema
     */
    data?: FactResourceReference;
}
/**
 *
 * @export
 * @interface FactResourceReferencesResponseSchema
 */
export interface FactResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<FactResourceReference>}
     * @memberof FactResourceReferencesResponseSchema
     */
    data?: Array<FactResourceReference>;
}
/**
 *
 * @export
 * @interface FactResourceResponseSchema
 */
export interface FactResourceResponseSchema extends Success {
    /**
     *
     * @type {FactResourceSchema}
     * @memberof FactResourceResponseSchema
     */
    data: FactResourceSchema;
}
/**
 *
 * @export
 * @interface FactResourceSchema
 */
export interface FactResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof FactResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Fact)
     * @type {string}
     * @memberof FactResourceSchema
     */
    type: FactResourceSchemaTypeEnum;
    /**
     *
     * @type {FactResourceAttributesAttributes}
     * @memberof FactResourceSchema
     */
    attributes: FactResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof FactResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof FactResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum FactResourceSchemaTypeEnum {
    Fact = "Fact",
}

/**
 *
 * @export
 * @interface FactResourcesResponseSchema
 */
export interface FactResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<FactResourceSchema>}
     * @memberof FactResourcesResponseSchema
     */
    data: Array<FactResourceSchema>;
}
/**
 *
 * @export
 * @interface Failure
 */
export interface Failure {
    /**
     *
     * @type {Array<ApiError>}
     * @memberof Failure
     */
    errors: Array<ApiError>;
    /**
     *
     * @type {JsonApi}
     * @memberof Failure
     */
    jsonapi?: JsonApi;
    /**
     *
     * @type {Links}
     * @memberof Failure
     */
    links?: Links;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Failure
     */
    meta?: { [key: string]: object };
}
/**
 *
 * @export
 * @interface Info
 */
export interface Info {
    /**
     *
     * @type {JsonApi}
     * @memberof Info
     */
    jsonapi?: JsonApi;
    /**
     *
     * @type {Links}
     * @memberof Info
     */
    links?: Links;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Info
     */
    meta: { [key: string]: object };
}
/**
 *
 * @export
 * @interface JsonApi
 */
export interface JsonApi {
    /**
     *
     * @type {string}
     * @memberof JsonApi
     */
    version?: string;
}
/**
 *
 * @export
 * @interface LabelAttributeResourceAttribute
 */
export interface LabelAttributeResourceAttribute {}
/**
 *
 * @export
 * @interface LabelPatchResource
 */
export interface LabelPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Label)
     * @type {string}
     * @memberof LabelPatchResource
     */
    type: LabelPatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof LabelPatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelPatchResourceTypeEnum {
    Label = "Label",
}

/**
 *
 * @export
 * @interface LabelPostResource
 */
export interface LabelPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Label)
     * @type {string}
     * @memberof LabelPostResource
     */
    type: LabelPostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof LabelPostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelPostResourceTypeEnum {
    Label = "Label",
}

/**
 *
 * @export
 * @interface LabelPostResourceReference
 */
export interface LabelPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Label)
     * @type {string}
     * @memberof LabelPostResourceReference
     */
    type: LabelPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelPostResourceReferenceTypeEnum {
    Label = "Label",
}

/**
 *
 * @export
 * @interface LabelResourceAttributes
 */
export interface LabelResourceAttributes {
    /**
     *
     * @type {LabelResourceAttributesAttributes}
     * @memberof LabelResourceAttributes
     */
    attributes?: LabelResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface LabelResourceAttributesAttributes
 */
export interface LabelResourceAttributesAttributes {
    /**
     *
     * @type {AttributeResourceReference}
     * @memberof LabelResourceAttributesAttributes
     */
    attribute?: AttributeResourceReference;
    /**
     *
     * @type {string}
     * @memberof LabelResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof LabelResourceAttributesAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof LabelResourceAttributesAttributes
     */
    sourceColumn?: string | null;
    /**
     *
     * @type {Array<TagResourceReference>}
     * @memberof LabelResourceAttributesAttributes
     */
    tags?: Array<TagResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof LabelResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface LabelResourcePatchAttributes
 */
export interface LabelResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof LabelResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface LabelResourcePostAttributes
 */
export interface LabelResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof LabelResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface LabelResourceReference
 */
export interface LabelResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Label)
     * @type {string}
     * @memberof LabelResourceReference
     */
    type: LabelResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelResourceReferenceTypeEnum {
    Label = "Label",
}

/**
 *
 * @export
 * @interface LabelResourceReferenceResponseSchema
 */
export interface LabelResourceReferenceResponseSchema {
    /**
     *
     * @type {LabelResourceReference}
     * @memberof LabelResourceReferenceResponseSchema
     */
    data?: LabelResourceReference;
}
/**
 *
 * @export
 * @interface LabelResourceReferencesResponseSchema
 */
export interface LabelResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<LabelResourceReference>}
     * @memberof LabelResourceReferencesResponseSchema
     */
    data?: Array<LabelResourceReference>;
}
/**
 *
 * @export
 * @interface LabelResourceResponseSchema
 */
export interface LabelResourceResponseSchema extends Success {
    /**
     *
     * @type {LabelResourceSchema}
     * @memberof LabelResourceResponseSchema
     */
    data: LabelResourceSchema;
}
/**
 *
 * @export
 * @interface LabelResourceSchema
 */
export interface LabelResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof LabelResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Label)
     * @type {string}
     * @memberof LabelResourceSchema
     */
    type: LabelResourceSchemaTypeEnum;
    /**
     *
     * @type {LabelResourceAttributesAttributes}
     * @memberof LabelResourceSchema
     */
    attributes: LabelResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof LabelResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof LabelResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum LabelResourceSchemaTypeEnum {
    Label = "Label",
}

/**
 *
 * @export
 * @interface LabelResourcesResponseSchema
 */
export interface LabelResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<LabelResourceSchema>}
     * @memberof LabelResourcesResponseSchema
     */
    data: Array<LabelResourceSchema>;
}
/**
 * @type Link
 * A link **MUST** be represented as either: a string containing the link\'s URL or a link object.
 * @export
 */
export type Link = LinkOneOf;
/**
 *
 * @export
 * @interface LinkOneOf
 */
export interface LinkOneOf {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof LinkOneOf
     */
    href: string;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof LinkOneOf
     */
    meta?: { [key: string]: object };
}
/**
 * Link members related to the primary data.
 * @export
 * @interface Links
 */
export interface Links extends Pagination {}
/**
 *
 * @export
 * @interface MetaElementParentResourceAttribute
 */
export interface MetaElementParentResourceAttribute {}
/**
 *
 * @export
 * @interface MetaElementPatchResource
 */
export interface MetaElementPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementPatchResource
     */
    type: MetaElementPatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof MetaElementPatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementPatchResourceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementPostResource
 */
export interface MetaElementPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementPostResource
     */
    type: MetaElementPostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof MetaElementPostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementPostResourceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementPostResourceReference
 */
export interface MetaElementPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementPostResourceReference
     */
    type: MetaElementPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementPostResourceReferenceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementResourceAttributes
 */
export interface MetaElementResourceAttributes {
    /**
     *
     * @type {MetaElementResourceAttributesAttributes}
     * @memberof MetaElementResourceAttributes
     */
    attributes?: MetaElementResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetaElementResourceAttributesAttributes
 */
export interface MetaElementResourceAttributesAttributes {
    /**
     *
     * @type {Array<MetaElementResourceReference>}
     * @memberof MetaElementResourceAttributesAttributes
     */
    children?: Array<MetaElementResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetaElementResourceAttributesAttributes
     */
    name?: string | null;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof MetaElementResourceAttributesAttributes
     */
    natures?: { [key: string]: object } | null;
    /**
     *
     * @type {MetaElementResourceReference}
     * @memberof MetaElementResourceAttributesAttributes
     */
    parent?: MetaElementResourceReference;
}
/**
 *
 * @export
 * @interface MetaElementResourcePatchAttributes
 */
export interface MetaElementResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof MetaElementResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface MetaElementResourcePostAttributes
 */
export interface MetaElementResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof MetaElementResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface MetaElementResourceReference
 */
export interface MetaElementResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementResourceReference
     */
    type: MetaElementResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementResourceReferenceTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementResourceReferenceResponseSchema
 */
export interface MetaElementResourceReferenceResponseSchema {
    /**
     *
     * @type {MetaElementResourceReference}
     * @memberof MetaElementResourceReferenceResponseSchema
     */
    data?: MetaElementResourceReference;
}
/**
 *
 * @export
 * @interface MetaElementResourceReferencesResponseSchema
 */
export interface MetaElementResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<MetaElementResourceReference>}
     * @memberof MetaElementResourceReferencesResponseSchema
     */
    data?: Array<MetaElementResourceReference>;
}
/**
 *
 * @export
 * @interface MetaElementResourceResponseSchema
 */
export interface MetaElementResourceResponseSchema extends Success {
    /**
     *
     * @type {MetaElementResourceSchema}
     * @memberof MetaElementResourceResponseSchema
     */
    data: MetaElementResourceSchema;
}
/**
 *
 * @export
 * @interface MetaElementResourceSchema
 */
export interface MetaElementResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetaElementResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (MetaElement)
     * @type {string}
     * @memberof MetaElementResourceSchema
     */
    type: MetaElementResourceSchemaTypeEnum;
    /**
     *
     * @type {MetaElementResourceAttributesAttributes}
     * @memberof MetaElementResourceSchema
     */
    attributes: MetaElementResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof MetaElementResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof MetaElementResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetaElementResourceSchemaTypeEnum {
    MetaElement = "MetaElement",
}

/**
 *
 * @export
 * @interface MetaElementResourcesResponseSchema
 */
export interface MetaElementResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<MetaElementResourceSchema>}
     * @memberof MetaElementResourcesResponseSchema
     */
    data: Array<MetaElementResourceSchema>;
}
/**
 *
 * @export
 * @interface MetricPatchResource
 */
export interface MetricPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Metric)
     * @type {string}
     * @memberof MetricPatchResource
     */
    type: MetricPatchResourceTypeEnum;
    /**
     *
     * @type {MetricResourcePatchAttributesAttributes}
     * @memberof MetricPatchResource
     */
    attributes?: MetricResourcePatchAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricPatchResourceTypeEnum {
    Metric = "Metric",
}

/**
 *
 * @export
 * @interface MetricPostResource
 */
export interface MetricPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Metric)
     * @type {string}
     * @memberof MetricPostResource
     */
    type: MetricPostResourceTypeEnum;
    /**
     *
     * @type {MetricResourcePatchAttributesAttributes}
     * @memberof MetricPostResource
     */
    attributes?: MetricResourcePatchAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricPostResourceTypeEnum {
    Metric = "Metric",
}

/**
 *
 * @export
 * @interface MetricPostResourceReference
 */
export interface MetricPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Metric)
     * @type {string}
     * @memberof MetricPostResourceReference
     */
    type: MetricPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricPostResourceReferenceTypeEnum {
    Metric = "Metric",
}

/**
 *
 * @export
 * @interface MetricResourceAttributes
 */
export interface MetricResourceAttributes {
    /**
     *
     * @type {MetricResourceAttributesAttributes}
     * @memberof MetricResourceAttributes
     */
    attributes?: MetricResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetricResourceAttributesAttributes
 */
export interface MetricResourceAttributesAttributes {
    /**
     *
     * @type {string}
     * @memberof MetricResourceAttributesAttributes
     */
    ast?: string | null;
    /**
     *
     * @type {Array<AttributeResourceReference>}
     * @memberof MetricResourceAttributesAttributes
     */
    attributes?: Array<AttributeResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {Array<FactResourceReference>}
     * @memberof MetricResourceAttributesAttributes
     */
    facts?: Array<FactResourceReference> | null;
    /**
     *
     * @type {Array<LabelResourceReference>}
     * @memberof MetricResourceAttributesAttributes
     */
    labels?: Array<LabelResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricResourceAttributesAttributes
     */
    maql?: string | null;
    /**
     *
     * @type {Array<MetricResourceReference>}
     * @memberof MetricResourceAttributesAttributes
     */
    metrics?: Array<MetricResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface MetricResourcePatchAttributes
 */
export interface MetricResourcePatchAttributes {
    /**
     *
     * @type {MetricResourcePatchAttributesAttributes}
     * @memberof MetricResourcePatchAttributes
     */
    attributes?: MetricResourcePatchAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetricResourcePatchAttributesAttributes
 */
export interface MetricResourcePatchAttributesAttributes {
    /**
     *
     * @type {Array<AttributeResourceReference>}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    attributes?: Array<AttributeResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {Array<FactResourceReference>}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    facts?: Array<FactResourceReference> | null;
    /**
     *
     * @type {Array<LabelResourceReference>}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    labels?: Array<LabelResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    maql?: string | null;
    /**
     *
     * @type {Array<MetricResourceReference>}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    metrics?: Array<MetricResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof MetricResourcePatchAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface MetricResourcePostAttributes
 */
export interface MetricResourcePostAttributes {
    /**
     *
     * @type {MetricResourcePatchAttributesAttributes}
     * @memberof MetricResourcePostAttributes
     */
    attributes?: MetricResourcePatchAttributesAttributes;
}
/**
 *
 * @export
 * @interface MetricResourceReference
 */
export interface MetricResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Metric)
     * @type {string}
     * @memberof MetricResourceReference
     */
    type: MetricResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricResourceReferenceTypeEnum {
    Metric = "Metric",
}

/**
 *
 * @export
 * @interface MetricResourceReferenceResponseSchema
 */
export interface MetricResourceReferenceResponseSchema {
    /**
     *
     * @type {MetricResourceReference}
     * @memberof MetricResourceReferenceResponseSchema
     */
    data?: MetricResourceReference;
}
/**
 *
 * @export
 * @interface MetricResourceReferencesResponseSchema
 */
export interface MetricResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<MetricResourceReference>}
     * @memberof MetricResourceReferencesResponseSchema
     */
    data?: Array<MetricResourceReference>;
}
/**
 *
 * @export
 * @interface MetricResourceResponseSchema
 */
export interface MetricResourceResponseSchema extends Success {
    /**
     *
     * @type {MetricResourceSchema}
     * @memberof MetricResourceResponseSchema
     */
    data: MetricResourceSchema;
}
/**
 *
 * @export
 * @interface MetricResourceSchema
 */
export interface MetricResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof MetricResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Metric)
     * @type {string}
     * @memberof MetricResourceSchema
     */
    type: MetricResourceSchemaTypeEnum;
    /**
     *
     * @type {MetricResourceAttributesAttributes}
     * @memberof MetricResourceSchema
     */
    attributes: MetricResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof MetricResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof MetricResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum MetricResourceSchemaTypeEnum {
    Metric = "Metric",
}

/**
 *
 * @export
 * @interface MetricResourcesResponseSchema
 */
export interface MetricResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<MetricResourceSchema>}
     * @memberof MetricResourcesResponseSchema
     */
    data: Array<MetricResourceSchema>;
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * The first page of data
     * @type {string}
     * @memberof Pagination
     */
    first?: string | null;
    /**
     * The last page of data
     * @type {string}
     * @memberof Pagination
     */
    last?: string | null;
    /**
     * The next page of data
     * @type {string}
     * @memberof Pagination
     */
    next?: string | null;
    /**
     * The previous page of data
     * @type {string}
     * @memberof Pagination
     */
    prev?: string | null;
}
/**
 *
 * @export
 * @interface SourcePatchResource
 */
export interface SourcePatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcePatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Source)
     * @type {string}
     * @memberof SourcePatchResource
     */
    type: SourcePatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof SourcePatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcePatchResourceTypeEnum {
    Source = "Source",
}

/**
 *
 * @export
 * @interface SourcePostResource
 */
export interface SourcePostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcePostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Source)
     * @type {string}
     * @memberof SourcePostResource
     */
    type: SourcePostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof SourcePostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcePostResourceTypeEnum {
    Source = "Source",
}

/**
 *
 * @export
 * @interface SourcePostResourceReference
 */
export interface SourcePostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourcePostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Source)
     * @type {string}
     * @memberof SourcePostResourceReference
     */
    type: SourcePostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum SourcePostResourceReferenceTypeEnum {
    Source = "Source",
}

/**
 *
 * @export
 * @interface SourceResourceAttributes
 */
export interface SourceResourceAttributes {
    /**
     *
     * @type {SourceResourceAttributesAttributes}
     * @memberof SourceResourceAttributes
     */
    attributes?: SourceResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface SourceResourceAttributesAttributes
 */
export interface SourceResourceAttributesAttributes {
    /**
     *
     * @type {Array<TableResourceReference>}
     * @memberof SourceResourceAttributesAttributes
     */
    tables?: Array<TableResourceReference> | null;
}
/**
 *
 * @export
 * @interface SourceResourcePatchAttributes
 */
export interface SourceResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof SourceResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface SourceResourcePostAttributes
 */
export interface SourceResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof SourceResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface SourceResourceReference
 */
export interface SourceResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourceResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Source)
     * @type {string}
     * @memberof SourceResourceReference
     */
    type: SourceResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum SourceResourceReferenceTypeEnum {
    Source = "Source",
}

/**
 *
 * @export
 * @interface SourceResourceReferenceResponseSchema
 */
export interface SourceResourceReferenceResponseSchema {
    /**
     *
     * @type {SourceResourceReference}
     * @memberof SourceResourceReferenceResponseSchema
     */
    data?: SourceResourceReference;
}
/**
 *
 * @export
 * @interface SourceResourceReferencesResponseSchema
 */
export interface SourceResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<SourceResourceReference>}
     * @memberof SourceResourceReferencesResponseSchema
     */
    data?: Array<SourceResourceReference>;
}
/**
 *
 * @export
 * @interface SourceResourceResponseSchema
 */
export interface SourceResourceResponseSchema extends Success {
    /**
     *
     * @type {SourceResourceSchema}
     * @memberof SourceResourceResponseSchema
     */
    data: SourceResourceSchema;
}
/**
 *
 * @export
 * @interface SourceResourceSchema
 */
export interface SourceResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SourceResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Source)
     * @type {string}
     * @memberof SourceResourceSchema
     */
    type: SourceResourceSchemaTypeEnum;
    /**
     *
     * @type {SourceResourceAttributesAttributes}
     * @memberof SourceResourceSchema
     */
    attributes: SourceResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof SourceResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof SourceResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum SourceResourceSchemaTypeEnum {
    Source = "Source",
}

/**
 *
 * @export
 * @interface SourceResourcesResponseSchema
 */
export interface SourceResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<SourceResourceSchema>}
     * @memberof SourceResourcesResponseSchema
     */
    data: Array<SourceResourceSchema>;
}
/**
 * A JSON:API document with a single resource
 * @export
 * @interface Success
 */
export interface Success {
    /**
     * Included resources
     * @type {Array<SuccessIncluded>}
     * @memberof Success
     */
    included?: Array<SuccessIncluded>;
    /**
     *
     * @type {JsonApi}
     * @memberof Success
     */
    jsonapi?: JsonApi;
    /**
     *
     * @type {Links}
     * @memberof Success
     */
    links?: Links;
    /**
     * Non-standard meta-information that can not be represented as an attribute or relationship.
     * @type {{ [key: string]: object; }}
     * @memberof Success
     */
    meta?: { [key: string]: object };
}
/**
 *
 * @export
 * @interface SuccessIncluded
 */
export interface SuccessIncluded {
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof SuccessIncluded
     */
    attributes?: { [key: string]: object };
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof SuccessIncluded
     */
    id?: string;
    /**
     * The JSON:API resource type
     * @type {string}
     * @memberof SuccessIncluded
     */
    type?: string;
}
/**
 *
 * @export
 * @interface TablePatchResource
 */
export interface TablePatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablePatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Table)
     * @type {string}
     * @memberof TablePatchResource
     */
    type: TablePatchResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof TablePatchResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum TablePatchResourceTypeEnum {
    Table = "Table",
}

/**
 *
 * @export
 * @interface TablePostResource
 */
export interface TablePostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablePostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Table)
     * @type {string}
     * @memberof TablePostResource
     */
    type: TablePostResourceTypeEnum;
    /**
     *
     * @type {object}
     * @memberof TablePostResource
     */
    attributes?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum TablePostResourceTypeEnum {
    Table = "Table",
}

/**
 *
 * @export
 * @interface TablePostResourceReference
 */
export interface TablePostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TablePostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Table)
     * @type {string}
     * @memberof TablePostResourceReference
     */
    type: TablePostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TablePostResourceReferenceTypeEnum {
    Table = "Table",
}

/**
 *
 * @export
 * @interface TableResourceAttributes
 */
export interface TableResourceAttributes {
    /**
     *
     * @type {TableResourceAttributesAttributes}
     * @memberof TableResourceAttributes
     */
    attributes?: TableResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TableResourceAttributesAttributes
 */
export interface TableResourceAttributesAttributes {
    /**
     *
     * @type {Array<object>}
     * @memberof TableResourceAttributesAttributes
     */
    columns?: Array<object> | null;
    /**
     *
     * @type {SourceResourceReference}
     * @memberof TableResourceAttributesAttributes
     */
    source?: SourceResourceReference;
}
/**
 *
 * @export
 * @interface TableResourcePatchAttributes
 */
export interface TableResourcePatchAttributes {
    /**
     *
     * @type {object}
     * @memberof TableResourcePatchAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface TableResourcePostAttributes
 */
export interface TableResourcePostAttributes {
    /**
     *
     * @type {object}
     * @memberof TableResourcePostAttributes
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface TableResourceReference
 */
export interface TableResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TableResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Table)
     * @type {string}
     * @memberof TableResourceReference
     */
    type: TableResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TableResourceReferenceTypeEnum {
    Table = "Table",
}

/**
 *
 * @export
 * @interface TableResourceReferenceResponseSchema
 */
export interface TableResourceReferenceResponseSchema {
    /**
     *
     * @type {TableResourceReference}
     * @memberof TableResourceReferenceResponseSchema
     */
    data?: TableResourceReference;
}
/**
 *
 * @export
 * @interface TableResourceReferencesResponseSchema
 */
export interface TableResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<TableResourceReference>}
     * @memberof TableResourceReferencesResponseSchema
     */
    data?: Array<TableResourceReference>;
}
/**
 *
 * @export
 * @interface TableResourceResponseSchema
 */
export interface TableResourceResponseSchema extends Success {
    /**
     *
     * @type {TableResourceSchema}
     * @memberof TableResourceResponseSchema
     */
    data: TableResourceSchema;
}
/**
 *
 * @export
 * @interface TableResourceSchema
 */
export interface TableResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TableResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Table)
     * @type {string}
     * @memberof TableResourceSchema
     */
    type: TableResourceSchemaTypeEnum;
    /**
     *
     * @type {TableResourceAttributesAttributes}
     * @memberof TableResourceSchema
     */
    attributes: TableResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof TableResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof TableResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum TableResourceSchemaTypeEnum {
    Table = "Table",
}

/**
 *
 * @export
 * @interface TableResourcesResponseSchema
 */
export interface TableResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<TableResourceSchema>}
     * @memberof TableResourcesResponseSchema
     */
    data: Array<TableResourceSchema>;
}
/**
 *
 * @export
 * @interface TableSourceResourceAttribute
 */
export interface TableSourceResourceAttribute {}
/**
 *
 * @export
 * @interface TagPatchResource
 */
export interface TagPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (Tag)
     * @type {string}
     * @memberof TagPatchResource
     */
    type: TagPatchResourceTypeEnum;
    /**
     *
     * @type {TagResourceAttributesAttributes}
     * @memberof TagPatchResource
     */
    attributes?: TagResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum TagPatchResourceTypeEnum {
    Tag = "Tag",
}

/**
 *
 * @export
 * @interface TagPostResource
 */
export interface TagPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (Tag)
     * @type {string}
     * @memberof TagPostResource
     */
    type: TagPostResourceTypeEnum;
    /**
     *
     * @type {TagResourceAttributesAttributes}
     * @memberof TagPostResource
     */
    attributes?: TagResourceAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum TagPostResourceTypeEnum {
    Tag = "Tag",
}

/**
 *
 * @export
 * @interface TagPostResourceReference
 */
export interface TagPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (Tag)
     * @type {string}
     * @memberof TagPostResourceReference
     */
    type: TagPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TagPostResourceReferenceTypeEnum {
    Tag = "Tag",
}

/**
 *
 * @export
 * @interface TagResourceAttributes
 */
export interface TagResourceAttributes {
    /**
     *
     * @type {TagResourceAttributesAttributes}
     * @memberof TagResourceAttributes
     */
    attributes?: TagResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TagResourceAttributesAttributes
 */
export interface TagResourceAttributesAttributes {
    /**
     *
     * @type {Array<AttributeResourceReference>}
     * @memberof TagResourceAttributesAttributes
     */
    attributes?: Array<AttributeResourceReference> | null;
    /**
     *
     * @type {Array<DatasetResourceReference>}
     * @memberof TagResourceAttributesAttributes
     */
    datasets?: Array<DatasetResourceReference> | null;
    /**
     *
     * @type {Array<FactResourceReference>}
     * @memberof TagResourceAttributesAttributes
     */
    facts?: Array<FactResourceReference> | null;
    /**
     *
     * @type {Array<LabelResourceReference>}
     * @memberof TagResourceAttributesAttributes
     */
    labels?: Array<LabelResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof TagResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface TagResourcePatchAttributes
 */
export interface TagResourcePatchAttributes {
    /**
     *
     * @type {TagResourceAttributesAttributes}
     * @memberof TagResourcePatchAttributes
     */
    attributes?: TagResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TagResourcePostAttributes
 */
export interface TagResourcePostAttributes {
    /**
     *
     * @type {TagResourceAttributesAttributes}
     * @memberof TagResourcePostAttributes
     */
    attributes?: TagResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface TagResourceReference
 */
export interface TagResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (Tag)
     * @type {string}
     * @memberof TagResourceReference
     */
    type: TagResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum TagResourceReferenceTypeEnum {
    Tag = "Tag",
}

/**
 *
 * @export
 * @interface TagResourceReferenceResponseSchema
 */
export interface TagResourceReferenceResponseSchema {
    /**
     *
     * @type {TagResourceReference}
     * @memberof TagResourceReferenceResponseSchema
     */
    data?: TagResourceReference;
}
/**
 *
 * @export
 * @interface TagResourceReferencesResponseSchema
 */
export interface TagResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<TagResourceReference>}
     * @memberof TagResourceReferencesResponseSchema
     */
    data?: Array<TagResourceReference>;
}
/**
 *
 * @export
 * @interface TagResourceResponseSchema
 */
export interface TagResourceResponseSchema extends Success {
    /**
     *
     * @type {TagResourceSchema}
     * @memberof TagResourceResponseSchema
     */
    data: TagResourceSchema;
}
/**
 *
 * @export
 * @interface TagResourceSchema
 */
export interface TagResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof TagResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (Tag)
     * @type {string}
     * @memberof TagResourceSchema
     */
    type: TagResourceSchemaTypeEnum;
    /**
     *
     * @type {TagResourceAttributesAttributes}
     * @memberof TagResourceSchema
     */
    attributes: TagResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof TagResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof TagResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum TagResourceSchemaTypeEnum {
    Tag = "Tag",
}

/**
 *
 * @export
 * @interface TagResourcesResponseSchema
 */
export interface TagResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<TagResourceSchema>}
     * @memberof TagResourcesResponseSchema
     */
    data: Array<TagResourceSchema>;
}
/**
 *
 * @export
 * @interface VisualizationObjectPatchResource
 */
export interface VisualizationObjectPatchResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof VisualizationObjectPatchResource
     */
    id: string;
    /**
     * The JSON:API resource type (VisualizationObject)
     * @type {string}
     * @memberof VisualizationObjectPatchResource
     */
    type: VisualizationObjectPatchResourceTypeEnum;
    /**
     *
     * @type {VisualizationObjectResourcePatchAttributesAttributes}
     * @memberof VisualizationObjectPatchResource
     */
    attributes?: VisualizationObjectResourcePatchAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum VisualizationObjectPatchResourceTypeEnum {
    VisualizationObject = "VisualizationObject",
}

/**
 *
 * @export
 * @interface VisualizationObjectPostResource
 */
export interface VisualizationObjectPostResource {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof VisualizationObjectPostResource
     */
    id?: string;
    /**
     * The JSON:API resource type (VisualizationObject)
     * @type {string}
     * @memberof VisualizationObjectPostResource
     */
    type: VisualizationObjectPostResourceTypeEnum;
    /**
     *
     * @type {VisualizationObjectResourcePatchAttributesAttributes}
     * @memberof VisualizationObjectPostResource
     */
    attributes?: VisualizationObjectResourcePatchAttributesAttributes;
}

/**
 * @export
 * @enum {string}
 */
export enum VisualizationObjectPostResourceTypeEnum {
    VisualizationObject = "VisualizationObject",
}

/**
 *
 * @export
 * @interface VisualizationObjectPostResourceReference
 */
export interface VisualizationObjectPostResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof VisualizationObjectPostResourceReference
     */
    id?: string;
    /**
     * The JSON:API resource type (VisualizationObject)
     * @type {string}
     * @memberof VisualizationObjectPostResourceReference
     */
    type: VisualizationObjectPostResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum VisualizationObjectPostResourceReferenceTypeEnum {
    VisualizationObject = "VisualizationObject",
}

/**
 *
 * @export
 * @interface VisualizationObjectResourceAttributes
 */
export interface VisualizationObjectResourceAttributes {
    /**
     *
     * @type {VisualizationObjectResourceAttributesAttributes}
     * @memberof VisualizationObjectResourceAttributes
     */
    attributes?: VisualizationObjectResourceAttributesAttributes;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourceAttributesAttributes
 */
export interface VisualizationObjectResourceAttributesAttributes {
    /**
     *
     * @type {Array<AttributeResourceReference>}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    attributes?: Array<AttributeResourceReference> | null;
    /**
     *
     * @type {object}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    content?: object | null;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {Array<FactResourceReference>}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    facts?: Array<FactResourceReference> | null;
    /**
     *
     * @type {Array<LabelResourceReference>}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    labels?: Array<LabelResourceReference> | null;
    /**
     *
     * @type {Array<MetricResourceReference>}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    metrics?: Array<MetricResourceReference> | null;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectResourceAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourcePatchAttributes
 */
export interface VisualizationObjectResourcePatchAttributes {
    /**
     *
     * @type {VisualizationObjectResourcePatchAttributesAttributes}
     * @memberof VisualizationObjectResourcePatchAttributes
     */
    attributes?: VisualizationObjectResourcePatchAttributesAttributes;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourcePatchAttributesAttributes
 */
export interface VisualizationObjectResourcePatchAttributesAttributes {
    /**
     *
     * @type {object}
     * @memberof VisualizationObjectResourcePatchAttributesAttributes
     */
    content?: object | null;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectResourcePatchAttributesAttributes
     */
    description?: string | null;
    /**
     *
     * @type {string}
     * @memberof VisualizationObjectResourcePatchAttributesAttributes
     */
    title?: string | null;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourcePostAttributes
 */
export interface VisualizationObjectResourcePostAttributes {
    /**
     *
     * @type {VisualizationObjectResourcePatchAttributesAttributes}
     * @memberof VisualizationObjectResourcePostAttributes
     */
    attributes?: VisualizationObjectResourcePatchAttributesAttributes;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourceReference
 */
export interface VisualizationObjectResourceReference {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof VisualizationObjectResourceReference
     */
    id: string;
    /**
     * The JSON:API resource type (VisualizationObject)
     * @type {string}
     * @memberof VisualizationObjectResourceReference
     */
    type: VisualizationObjectResourceReferenceTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum VisualizationObjectResourceReferenceTypeEnum {
    VisualizationObject = "VisualizationObject",
}

/**
 *
 * @export
 * @interface VisualizationObjectResourceReferenceResponseSchema
 */
export interface VisualizationObjectResourceReferenceResponseSchema {
    /**
     *
     * @type {VisualizationObjectResourceReference}
     * @memberof VisualizationObjectResourceReferenceResponseSchema
     */
    data?: VisualizationObjectResourceReference;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourceReferencesResponseSchema
 */
export interface VisualizationObjectResourceReferencesResponseSchema {
    /**
     *
     * @type {Array<VisualizationObjectResourceReference>}
     * @memberof VisualizationObjectResourceReferencesResponseSchema
     */
    data?: Array<VisualizationObjectResourceReference>;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourceResponseSchema
 */
export interface VisualizationObjectResourceResponseSchema extends Success {
    /**
     *
     * @type {VisualizationObjectResourceSchema}
     * @memberof VisualizationObjectResourceResponseSchema
     */
    data: VisualizationObjectResourceSchema;
}
/**
 *
 * @export
 * @interface VisualizationObjectResourceSchema
 */
export interface VisualizationObjectResourceSchema {
    /**
     * The JSON:API resource ID
     * @type {string}
     * @memberof VisualizationObjectResourceSchema
     */
    id: string;
    /**
     * The JSON:API resource type (VisualizationObject)
     * @type {string}
     * @memberof VisualizationObjectResourceSchema
     */
    type: VisualizationObjectResourceSchemaTypeEnum;
    /**
     *
     * @type {VisualizationObjectResourceAttributesAttributes}
     * @memberof VisualizationObjectResourceSchema
     */
    attributes: VisualizationObjectResourceAttributesAttributes;
    /**
     *
     * @type {object}
     * @memberof VisualizationObjectResourceSchema
     */
    links?: object;
    /**
     *
     * @type {object}
     * @memberof VisualizationObjectResourceSchema
     */
    relationships?: object;
}

/**
 * @export
 * @enum {string}
 */
export enum VisualizationObjectResourceSchemaTypeEnum {
    VisualizationObject = "VisualizationObject",
}

/**
 *
 * @export
 * @interface VisualizationObjectResourcesResponseSchema
 */
export interface VisualizationObjectResourcesResponseSchema extends Success {
    /**
     *
     * @type {Array<VisualizationObjectResourceSchema>}
     * @memberof VisualizationObjectResourcesResponseSchema
     */
    data: Array<VisualizationObjectResourceSchema>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a List of attribute resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {string} [sort] attribute sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesGet.",
                );
            }
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDatasetsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdDelete.",
                );
            }
            const localVarPath = `/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdGet.",
                );
            }
            const localVarPath = `/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdLabelsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributePatchResource} [attributePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributePatchResource?: AttributePatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributePatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdPatch.",
                );
            }
            const localVarPath = `/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributePatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(attributePatchResource !== undefined ? attributePatchResource : {})
                : attributePatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsLabelsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling attributesIdTagsGet.",
                );
            }
            const localVarPath = `/attributes/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {AttributePostResource} [attributePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                attributePostResource?: AttributePostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, attributePostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling attributesPost.",
                );
            }
            const localVarPath = `/attributes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributePostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(attributePostResource !== undefined ? attributePostResource : {})
                : attributePostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of dataset resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {string} [sort] dataset sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterType,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterTitleBase,
                filterTitlePattern,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsGet.",
                );
            }
            const localVarPath = `/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterTitleBase !== undefined) {
                localVarQueryParameter["filter[titleBase]"] = filterTitleBase;
            }

            if (filterTitlePattern !== undefined) {
                localVarQueryParameter["filter[titlePattern]"] = filterTitlePattern;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdAttributesGet.",
                );
            }
            const localVarPath = `/datasets/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterType,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterTitleBase,
                filterTitlePattern,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDatasetsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterTitleBase !== undefined) {
                localVarQueryParameter["filter[titleBase]"] = filterTitleBase;
            }

            if (filterTitlePattern !== undefined) {
                localVarQueryParameter["filter[titlePattern]"] = filterTitlePattern;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdDelete.",
                );
            }
            const localVarPath = `/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdFactsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdGet.",
                );
            }
            const localVarPath = `/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetPatchResource} [datasetPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetPatchResource?: DatasetPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdPatch.",
                );
            }
            const localVarPath = `/datasets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(datasetPatchResource !== undefined ? datasetPatchResource : {})
                : datasetPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterType,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterTitleBase,
                filterTitlePattern,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterTitleBase !== undefined) {
                localVarQueryParameter["filter[titleBase]"] = filterTitleBase;
            }

            if (filterTitlePattern !== undefined) {
                localVarQueryParameter["filter[titlePattern]"] = filterTitlePattern;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling datasetsIdTagsGet.",
                );
            }
            const localVarPath = `/datasets/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {DatasetPostResource} [datasetPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                datasetPostResource?: DatasetPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, datasetPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling datasetsPost.",
                );
            }
            const localVarPath = `/datasets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(datasetPostResource !== undefined ? datasetPostResource : {})
                : datasetPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of fact resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {string} [sort] fact sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsGet.",
                );
            }
            const localVarPath = `/facts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDatasetsGet.",
                );
            }
            const localVarPath = `/facts/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdDelete.",
                );
            }
            const localVarPath = `/facts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdGet.",
                );
            }
            const localVarPath = `/facts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactPatchResource} [factPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factPatchResource?: FactPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdPatch.",
                );
            }
            const localVarPath = `/facts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(factPatchResource !== undefined ? factPatchResource : {})
                : factPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset references related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag references related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/facts/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling factsIdTagsGet.",
                );
            }
            const localVarPath = `/facts/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {FactPostResource} [factPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                factPostResource?: FactPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, factPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling factsPost.",
                );
            }
            const localVarPath = `/facts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(factPostResource !== undefined ? factPostResource : {})
                : factPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of label resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {string} [sort] label sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsGet.",
                );
            }
            const localVarPath = `/labels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdAttributesGet.",
                );
            }
            const localVarPath = `/labels/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdDelete.",
                );
            }
            const localVarPath = `/labels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdGet.",
                );
            }
            const localVarPath = `/labels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelPatchResource} [labelPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelPatchResource?: LabelPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdPatch.",
                );
            }
            const localVarPath = `/labels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(labelPatchResource !== undefined ? labelPatchResource : {})
                : labelPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute references related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag references related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdRelationshipsTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdRelationshipsTagsGet.",
                );
            }
            const localVarPath = `/labels/{id}/relationships/tags`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve tag related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsIdTagsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling labelsIdTagsGet.",
                );
            }
            const localVarPath = `/labels/{id}/tags`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {LabelPostResource} [labelPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                labelPostResource?: LabelPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, labelPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling labelsPost.",
                );
            }
            const localVarPath = `/labels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(labelPostResource !== undefined ? labelPostResource : {})
                : labelPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of metaElement resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {string} [sort] metaElement sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterId,
                filterName,
                filterParent,
                filterChildren,
                filterNatures,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementGet.",
                );
            }
            const localVarPath = `/meta/element`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter["filter[name]"] = filterName;
            }

            if (filterParent !== undefined) {
                localVarQueryParameter["filter[parent]"] = filterParent;
            }

            if (filterChildren !== undefined) {
                localVarQueryParameter["filter[children]"] = filterChildren;
            }

            if (filterNatures !== undefined) {
                localVarQueryParameter["filter[natures]"] = filterNatures;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metaElementIdGet.",
                );
            }
            const localVarPath = `/meta/element/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metaElement related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterId,
                filterName,
                filterParent,
                filterChildren,
                filterNatures,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementIdMetaElementGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metaElementIdMetaElementGet.",
                );
            }
            const localVarPath = `/meta/element/{id}/meta/element`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter["filter[name]"] = filterName;
            }

            if (filterParent !== undefined) {
                localVarQueryParameter["filter[parent]"] = filterParent;
            }

            if (filterChildren !== undefined) {
                localVarQueryParameter["filter[children]"] = filterChildren;
            }

            if (filterNatures !== undefined) {
                localVarQueryParameter["filter[natures]"] = filterNatures;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metaElement references related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdRelationshipsMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterId,
                filterName,
                filterParent,
                filterChildren,
                filterNatures,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metaElementIdRelationshipsMetaElementGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metaElementIdRelationshipsMetaElementGet.",
                );
            }
            const localVarPath = `/meta/element/{id}/relationships/meta/element`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter["filter[name]"] = filterName;
            }

            if (filterParent !== undefined) {
                localVarQueryParameter["filter[parent]"] = filterParent;
            }

            if (filterChildren !== undefined) {
                localVarQueryParameter["filter[children]"] = filterChildren;
            }

            if (filterNatures !== undefined) {
                localVarQueryParameter["filter[natures]"] = filterNatures;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of metric resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {string} [sort] metric sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterMaql,
                filterAst,
                filterFacts,
                filterAttributes,
                filterLabels,
                filterMetrics,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsGet.",
                );
            }
            const localVarPath = `/metrics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterMaql !== undefined) {
                localVarQueryParameter["filter[maql]"] = filterMaql;
            }

            if (filterAst !== undefined) {
                localVarQueryParameter["filter[ast]"] = filterAst;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterMetrics !== undefined) {
                localVarQueryParameter["filter[metrics]"] = filterMetrics;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesGet.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdAttributesPost.",
                );
            }
            const localVarPath = `/metrics/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdDelete.",
                );
            }
            const localVarPath = `/metrics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdFactsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdGet.",
                );
            }
            const localVarPath = `/metrics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdLabelsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdLabelsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdLabelsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdLabelsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdMetricsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdMetricsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/metrics`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metric related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterMaql,
                filterAst,
                filterFacts,
                filterAttributes,
                filterLabels,
                filterMetrics,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdMetricsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdMetricsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/metrics`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterMaql !== undefined) {
                localVarQueryParameter["filter[maql]"] = filterMaql;
            }

            if (filterAst !== undefined) {
                localVarQueryParameter["filter[ast]"] = filterAst;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterMetrics !== undefined) {
                localVarQueryParameter["filter[metrics]"] = filterMetrics;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, metricResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdMetricsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdMetricsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/metrics`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      metricResourceReferencesResponseSchema !== undefined
                          ? metricResourceReferencesResponseSchema
                          : {},
                  )
                : metricResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, metricResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdMetricsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdMetricsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/metrics`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      metricResourceReferencesResponseSchema !== undefined
                          ? metricResourceReferencesResponseSchema
                          : {},
                  )
                : metricResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricPatchResource} [metricPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricPatchResource?: MetricPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, metricPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdPatch.",
                );
            }
            const localVarPath = `/metrics/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(metricPatchResource !== undefined ? metricPatchResource : {})
                : metricPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsAttributesPost.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsFactsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsLabelsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsLabelsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsLabelsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsLabelsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsMetricsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsMetricsDelete.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/metrics`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metric references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterMaql,
                filterAst,
                filterFacts,
                filterAttributes,
                filterLabels,
                filterMetrics,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsMetricsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsMetricsGet.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/metrics`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterMaql !== undefined) {
                localVarQueryParameter["filter[maql]"] = filterMaql;
            }

            if (filterAst !== undefined) {
                localVarQueryParameter["filter[ast]"] = filterAst;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterMetrics !== undefined) {
                localVarQueryParameter["filter[metrics]"] = filterMetrics;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, metricResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsMetricsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsMetricsPatch.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/metrics`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      metricResourceReferencesResponseSchema !== undefined
                          ? metricResourceReferencesResponseSchema
                          : {},
                  )
                : metricResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, metricResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsIdRelationshipsMetricsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling metricsIdRelationshipsMetricsPost.",
                );
            }
            const localVarPath = `/metrics/{id}/relationships/metrics`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      metricResourceReferencesResponseSchema !== undefined
                          ? metricResourceReferencesResponseSchema
                          : {},
                  )
                : metricResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {MetricPostResource} [metricPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                metricPostResource?: MetricPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, metricPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling metricsPost.",
                );
            }
            const localVarPath = `/metrics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof metricPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(metricPostResource !== undefined ? metricPostResource : {})
                : metricPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of source resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTables] Filter by tables (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {string} [sort] source sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTables?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTables,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesGet.",
                );
            }
            const localVarPath = `/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTables !== undefined) {
                localVarQueryParameter["filter[tables]"] = filterTables;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdDelete.",
                );
            }
            const localVarPath = `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdGet.",
                );
            }
            const localVarPath = `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcePatchResource} [sourcePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcePatchResource?: SourcePatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, sourcePatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdPatch.",
                );
            }
            const localVarPath = `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcePatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(sourcePatchResource !== undefined ? sourcePatchResource : {})
                : sourcePatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve table references related to a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterSource,
                filterColumns,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdRelationshipsTablesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdRelationshipsTablesGet.",
                );
            }
            const localVarPath = `/sources/{id}/relationships/tables`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterSource !== undefined) {
                localVarQueryParameter["filter[source]"] = filterSource;
            }

            if (filterColumns !== undefined) {
                localVarQueryParameter["filter[columns]"] = filterColumns;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve table related to a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterSource,
                filterColumns,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesIdTablesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling sourcesIdTablesGet.",
                );
            }
            const localVarPath = `/sources/{id}/tables`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterSource !== undefined) {
                localVarQueryParameter["filter[source]"] = filterSource;
            }

            if (filterColumns !== undefined) {
                localVarQueryParameter["filter[columns]"] = filterColumns;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {SourcePostResource} [sourcePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                sourcePostResource?: SourcePostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, sourcePostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling sourcesPost.",
                );
            }
            const localVarPath = `/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof sourcePostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(sourcePostResource !== undefined ? sourcePostResource : {})
                : sourcePostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of table resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {string} [sort] table sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterSource,
                filterColumns,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesGet.",
                );
            }
            const localVarPath = `/tables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterSource !== undefined) {
                localVarQueryParameter["filter[source]"] = filterSource;
            }

            if (filterColumns !== undefined) {
                localVarQueryParameter["filter[columns]"] = filterColumns;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdDelete.",
                );
            }
            const localVarPath = `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdGet.",
                );
            }
            const localVarPath = `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablePatchResource} [tablePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablePatchResource?: TablePatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tablePatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdPatch.",
                );
            }
            const localVarPath = `/tables/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablePatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tablePatchResource !== undefined ? tablePatchResource : {})
                : tablePatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve source references related to a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdRelationshipsSourcesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdRelationshipsSourcesGet.",
                );
            }
            const localVarPath = `/tables/{id}/relationships/sources`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve source related to a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesIdSourcesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tablesIdSourcesGet.",
                );
            }
            const localVarPath = `/tables/{id}/sources`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TablePostResource} [tablePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tablePostResource?: TablePostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, tablePostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tablesPost.",
                );
            }
            const localVarPath = `/tables`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tablePostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tablePostResource !== undefined ? tablePostResource : {})
                : tablePostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of tag resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {string} [sort] tag sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterLabels,
                filterAttributes,
                filterFacts,
                filterDatasets,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsGet.",
                );
            }
            const localVarPath = `/tags`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterDatasets !== undefined) {
                localVarQueryParameter["filter[datasets]"] = filterDatasets;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesDelete.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesGet.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesPatch.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdAttributesPost.",
                );
            }
            const localVarPath = `/tags/{id}/attributes`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterType,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterTitleBase,
                filterTitlePattern,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsGet.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterTitleBase !== undefined) {
                localVarQueryParameter["filter[titleBase]"] = filterTitleBase;
            }

            if (filterTitlePattern !== undefined) {
                localVarQueryParameter["filter[titlePattern]"] = filterTitlePattern;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetResourceReferencesResponseSchema !== undefined
                          ? datasetResourceReferencesResponseSchema
                          : {},
                  )
                : datasetResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDatasetsPost.",
                );
            }
            const localVarPath = `/tags/{id}/datasets`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetResourceReferencesResponseSchema !== undefined
                          ? datasetResourceReferencesResponseSchema
                          : {},
                  )
                : datasetResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdDelete.",
                );
            }
            const localVarPath = `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsGet.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdFactsPost.",
                );
            }
            const localVarPath = `/tags/{id}/facts`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdGet.",
                );
            }
            const localVarPath = `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsGet.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdLabelsPost.",
                );
            }
            const localVarPath = `/tags/{id}/labels`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagPatchResource} [tagPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagPatchResource?: TagPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, tagPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdPatch.",
                );
            }
            const localVarPath = `/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tagPatchResource !== undefined ? tagPatchResource : {})
                : tagPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, attributeResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsAttributesPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsAttributesPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof attributeResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      attributeResourceReferencesResponseSchema !== undefined
                          ? attributeResourceReferencesResponseSchema
                          : {},
                  )
                : attributeResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve dataset references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterType,
                filterAttributes,
                filterFacts,
                filterTags,
                filterReferences,
                filterGrain,
                filterReferenceProperties,
                filterSourceTable,
                filterTitleBase,
                filterTitlePattern,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterType !== undefined) {
                localVarQueryParameter["filter[type]"] = filterType;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterReferences !== undefined) {
                localVarQueryParameter["filter[references]"] = filterReferences;
            }

            if (filterGrain !== undefined) {
                localVarQueryParameter["filter[grain]"] = filterGrain;
            }

            if (filterReferenceProperties !== undefined) {
                localVarQueryParameter["filter[referenceProperties]"] = filterReferenceProperties;
            }

            if (filterSourceTable !== undefined) {
                localVarQueryParameter["filter[sourceTable]"] = filterSourceTable;
            }

            if (filterTitleBase !== undefined) {
                localVarQueryParameter["filter[titleBase]"] = filterTitleBase;
            }

            if (filterTitlePattern !== undefined) {
                localVarQueryParameter["filter[titlePattern]"] = filterTitlePattern;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetResourceReferencesResponseSchema !== undefined
                          ? datasetResourceReferencesResponseSchema
                          : {},
                  )
                : datasetResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, datasetResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsDatasetsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsDatasetsPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/datasets`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof datasetResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      datasetResourceReferencesResponseSchema !== undefined
                          ? datasetResourceReferencesResponseSchema
                          : {},
                  )
                : datasetResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, factResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsFactsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsFactsPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof factResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      factResourceReferencesResponseSchema !== undefined
                          ? factResourceReferencesResponseSchema
                          : {},
                  )
                : factResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsDelete.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsGet.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsPatch.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, labelResourceReferencesResponseSchema } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsIdRelationshipsLabelsPost.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling tagsIdRelationshipsLabelsPost.",
                );
            }
            const localVarPath = `/tags/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof labelResourceReferencesResponseSchema !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      labelResourceReferencesResponseSchema !== undefined
                          ? labelResourceReferencesResponseSchema
                          : {},
                  )
                : labelResourceReferencesResponseSchema || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TagPostResource} [tagPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tagPostResource?: TagPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, tagPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling tagsPost.",
                );
            }
            const localVarPath = `/tags`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof tagPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(tagPostResource !== undefined ? tagPostResource : {})
                : tagPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a List of visualizationObject resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] visualizationObject fields to include (csv)
         * @param {string} [include] visualizationObject relationships to include (csv)
         * @param {string} [sort] visualizationObject sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                filter,
                filterTitle,
                filterDescription,
                filterFacts,
                filterAttributes,
                filterLabels,
                filterMetrics,
                filterId,
                fields,
                include,
                sort,
                pageLimit,
                pageOffset,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsGet.",
                );
            }
            const localVarPath = `/visualizationObjects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterMetrics !== undefined) {
                localVarQueryParameter["filter[metrics]"] = filterMetrics;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (sort !== undefined) {
                localVarQueryParameter["sort"] = sort;
            }

            if (pageLimit !== undefined) {
                localVarQueryParameter["page[limit]"] = pageLimit;
            }

            if (pageOffset !== undefined) {
                localVarQueryParameter["page[offset]"] = pageOffset;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdAttributesGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdDelete.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdDelete.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdFactsGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] visualizationObject fields to include (csv)
         * @param {string} [include] visualizationObject relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, fields, include } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdLabelsGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metric related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterMaql,
                filterAst,
                filterFacts,
                filterAttributes,
                filterLabels,
                filterMetrics,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdMetricsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdMetricsGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/metrics`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterMaql !== undefined) {
                localVarQueryParameter["filter[maql]"] = filterMaql;
            }

            if (filterAst !== undefined) {
                localVarQueryParameter["filter[ast]"] = filterAst;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterMetrics !== undefined) {
                localVarQueryParameter["filter[metrics]"] = filterMetrics;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {VisualizationObjectPatchResource} [visualizationObjectPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                visualizationObjectPatchResource?: VisualizationObjectPatchResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, id, visualizationObjectPatchResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdPatch.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdPatch.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof visualizationObjectPatchResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      visualizationObjectPatchResource !== undefined ? visualizationObjectPatchResource : {},
                  )
                : visualizationObjectPatchResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve attribute references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterGranularity,
                filterLabels,
                filterTags,
                filterDataset,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdRelationshipsAttributesGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdRelationshipsAttributesGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/relationships/attributes`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterGranularity !== undefined) {
                localVarQueryParameter["filter[granularity]"] = filterGranularity;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve fact references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterTags,
                filterDataset,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdRelationshipsFactsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdRelationshipsFactsGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/relationships/facts`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterDataset !== undefined) {
                localVarQueryParameter["filter[dataset]"] = filterDataset;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve label references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterAttribute,
                filterTags,
                filterPrimary,
                filterSourceColumn,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdRelationshipsLabelsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdRelationshipsLabelsGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/relationships/labels`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterAttribute !== undefined) {
                localVarQueryParameter["filter[attribute]"] = filterAttribute;
            }

            if (filterTags !== undefined) {
                localVarQueryParameter["filter[tags]"] = filterTags;
            }

            if (filterPrimary !== undefined) {
                localVarQueryParameter["filter[primary]"] = filterPrimary;
            }

            if (filterSourceColumn !== undefined) {
                localVarQueryParameter["filter[sourceColumn]"] = filterSourceColumn;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve metric references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): RequestArgs {
            const {
                contentType,
                id,
                filter,
                filterTitle,
                filterDescription,
                filterMaql,
                filterAst,
                filterFacts,
                filterAttributes,
                filterLabels,
                filterMetrics,
                filterId,
                fields,
                include,
            } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsIdRelationshipsMetricsGet.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling visualizationObjectsIdRelationshipsMetricsGet.",
                );
            }
            const localVarPath = `/visualizationObjects/{id}/relationships/metrics`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter["filter"] = filter;
            }

            if (filterTitle !== undefined) {
                localVarQueryParameter["filter[title]"] = filterTitle;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter["filter[description]"] = filterDescription;
            }

            if (filterMaql !== undefined) {
                localVarQueryParameter["filter[maql]"] = filterMaql;
            }

            if (filterAst !== undefined) {
                localVarQueryParameter["filter[ast]"] = filterAst;
            }

            if (filterFacts !== undefined) {
                localVarQueryParameter["filter[facts]"] = filterFacts;
            }

            if (filterAttributes !== undefined) {
                localVarQueryParameter["filter[attributes]"] = filterAttributes;
            }

            if (filterLabels !== undefined) {
                localVarQueryParameter["filter[labels]"] = filterLabels;
            }

            if (filterMetrics !== undefined) {
                localVarQueryParameter["filter[metrics]"] = filterMetrics;
            }

            if (filterId !== undefined) {
                localVarQueryParameter["filter[id]"] = filterId;
            }

            if (fields !== undefined) {
                localVarQueryParameter["fields"] = fields;
            }

            if (include !== undefined) {
                localVarQueryParameter["include"] = include;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {VisualizationObjectPostResource} [visualizationObjectPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                visualizationObjectPostResource?: VisualizationObjectPostResource;
            },
            options: any = {},
        ): RequestArgs {
            const { contentType, visualizationObjectPostResource } = params;
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError(
                    "contentType",
                    "Required parameter contentType was null or undefined when calling visualizationObjectsPost.",
                );
            }
            const localVarPath = `/visualizationObjects`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter["Content-Type"] = String(contentType);
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof visualizationObjectPostResource !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      visualizationObjectPostResource !== undefined ? visualizationObjectPostResource : {},
                  )
                : visualizationObjectPostResource || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a List of attribute resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {string} [sort] attribute sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributePatchResource} [attributePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributePatchResource?: AttributePatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsLabelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).attributesIdRelationshipsTagsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {AttributePostResource} [attributePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                attributePostResource?: AttributePostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).attributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of dataset resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {string} [sort] dataset sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetPatchResource} [datasetPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetPatchResource?: DatasetPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsFactsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).datasetsIdRelationshipsTagsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {DatasetPostResource} [datasetPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                datasetPostResource?: DatasetPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).datasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of fact resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {string} [sort] fact sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactPatchResource} [factPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factPatchResource?: FactPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset references related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).factsIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag references related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdRelationshipsTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {FactPostResource} [factPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                factPostResource?: FactPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).factsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of label resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {string} [sort] label sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelPatchResource} [labelPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelPatchResource?: LabelPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute references related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).labelsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag references related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdRelationshipsTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve tag related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsIdTagsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {LabelPostResource} [labelPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                labelPostResource?: LabelPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).labelsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of metaElement resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {string} [sort] metaElement sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaElementResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metaElementGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaElementResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metaElementIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metaElement related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaElementResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metaElementIdMetaElementGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metaElement references related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdRelationshipsMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetaElementResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metaElementIdRelationshipsMetaElementGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of metric resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {string} [sort] metric sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdAttributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdLabelsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdLabelsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdLabelsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdMetricsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metric related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdMetricsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdMetricsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdMetricsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricPatchResource} [metricPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricPatchResource?: MetricPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsAttributesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsFactsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsLabelsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsLabelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsLabelsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsLabelsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsMetricsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metric references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsMetricsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsMetricsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).metricsIdRelationshipsMetricsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {MetricPostResource} [metricPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                metricPostResource?: MetricPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).metricsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of source resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTables] Filter by tables (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {string} [sort] source sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTables?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcePatchResource} [sourcePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcePatchResource?: SourcePatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve table references related to a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).sourcesIdRelationshipsTablesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve table related to a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesIdTablesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {SourcePostResource} [sourcePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                sourcePostResource?: SourcePostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).sourcesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of table resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {string} [sort] table sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablePatchResource} [tablePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablePatchResource?: TablePatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve source references related to a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceResourceReferenceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tablesIdRelationshipsSourcesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve source related to a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesIdSourcesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TablePostResource} [tablePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tablePostResource?: TablePostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TableResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tablesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of tag resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {string} [sort] tag sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdAttributesPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDatasetsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdLabelsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagPatchResource} [tagPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagPatchResource?: TagPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsAttributesPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve dataset references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<DatasetResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsDatasetsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsFactsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdRelationshipsFactsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsFactsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdRelationshipsFactsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsLabelsDelete(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsIdRelationshipsLabelsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsLabelsPatch(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).tagsIdRelationshipsLabelsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TagPostResource} [tagPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tagPostResource?: TagPostResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tagsPost(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a List of visualizationObject resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] visualizationObject fields to include (csv)
         * @param {string} [include] visualizationObject relationships to include (csv)
         * @param {string} [sort] visualizationObject sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<VisualizationObjectResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).visualizationObjectsGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).visualizationObjectsIdDelete(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdFactsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] visualizationObject fields to include (csv)
         * @param {string} [include] visualizationObject relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<VisualizationObjectResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).visualizationObjectsIdGet(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdLabelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metric related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricResourcesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdMetricsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {VisualizationObjectPatchResource} [visualizationObjectPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                visualizationObjectPatchResource?: VisualizationObjectPatchResource;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).visualizationObjectsIdPatch(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve attribute references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<AttributeResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdRelationshipsAttributesGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve fact references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FactResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdRelationshipsFactsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve label references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdRelationshipsLabelsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve metric references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<MetricResourceReferencesResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(
                configuration,
            ).visualizationObjectsIdRelationshipsMetricsGet(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {VisualizationObjectPostResource} [visualizationObjectPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                visualizationObjectPostResource?: VisualizationObjectPostResource;
            },
            options: any = {},
        ): (
            axios?: AxiosInstance,
            basePath?: string,
        ) => AxiosPromise<VisualizationObjectResourceResponseSchema> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).visualizationObjectsPost(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function(
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve a List of attribute resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {string} [sort] attribute sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<AttributeResourcesResponseSchema> {
            return DefaultApiFp(configuration).attributesGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve dataset related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).attributesIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve label related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourcesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributePatchResource} [attributePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributePatchResource?: AttributePatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).attributesIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve dataset references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve label references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsLabelsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tag references related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdRelationshipsTagsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tag related to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourcesResponseSchema> {
            return DefaultApiFp(configuration).attributesIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Create a Attribute
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {AttributePostResource} [attributePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                attributePostResource?: AttributePostResource;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceResponseSchema> {
            return DefaultApiFp(configuration).attributesPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of dataset resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {string} [sort] dataset sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<DatasetResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve dataset related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).datasetsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve fact related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdFactsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetPatchResource} [datasetPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetPatchResource?: DatasetPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).datasetsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve dataset references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve fact references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsFactsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tag references related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdRelationshipsTagsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tag related to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourcesResponseSchema> {
            return DefaultApiFp(configuration).datasetsIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Create a Dataset
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {DatasetPostResource} [datasetPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        datasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                datasetPostResource?: DatasetPostResource;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceResponseSchema> {
            return DefaultApiFp(configuration).datasetsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of fact resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {string} [sort] fact sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<FactResourcesResponseSchema> {
            return DefaultApiFp(configuration).factsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve dataset related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceResponseSchema> {
            return DefaultApiFp(configuration).factsIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).factsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceResponseSchema> {
            return DefaultApiFp(configuration).factsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactPatchResource} [factPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factPatchResource?: FactPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).factsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve dataset references related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tag references related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).factsIdRelationshipsTagsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve tag related to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourcesResponseSchema> {
            return DefaultApiFp(configuration).factsIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Create a Fact
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {FactPostResource} [factPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        factsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                factPostResource?: FactPostResource;
            },
            options?: any,
        ): AxiosPromise<FactResourceResponseSchema> {
            return DefaultApiFp(configuration).factsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of label resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {string} [sort] label sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<LabelResourcesResponseSchema> {
            return DefaultApiFp(configuration).labelsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).labelsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelPatchResource} [labelPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelPatchResource?: LabelPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).labelsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute references related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve tag references related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdRelationshipsTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdRelationshipsTagsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve tag related to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsIdTagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourcesResponseSchema> {
            return DefaultApiFp(configuration).labelsIdTagsGet(params, options)(axios, basePath);
        },
        /**
         * Create a Label
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {LabelPostResource} [labelPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        labelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                labelPostResource?: LabelPostResource;
            },
            options?: any,
        ): AxiosPromise<LabelResourceResponseSchema> {
            return DefaultApiFp(configuration).labelsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of metaElement resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {string} [sort] metaElement sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourcesResponseSchema> {
            return DefaultApiFp(configuration).metaElementGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourceResponseSchema> {
            return DefaultApiFp(configuration).metaElementIdGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve metaElement related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourceResponseSchema> {
            return DefaultApiFp(configuration).metaElementIdMetaElementGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve metaElement references related to a metaElement resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [filterName] Filter by name (csv)
         * @param {string} [filterParent] Filter by parent (csv)
         * @param {string} [filterChildren] Filter by children (csv)
         * @param {string} [filterNatures] Filter by natures (csv)
         * @param {string} [fields] metaElement fields to include (csv)
         * @param {string} [include] metaElement relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metaElementIdRelationshipsMetaElementGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterId?: string;
                filterName?: string;
                filterParent?: string;
                filterChildren?: string;
                filterNatures?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetaElementResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).metaElementIdRelationshipsMetaElementGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve a List of metric resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {string} [sort] metric sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<MetricResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsGet(params, options)(axios, basePath);
        },
        /**
         * Delete metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Update metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesPatch(params, options)(axios, basePath);
        },
        /**
         * Create metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdAttributesPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).metricsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Delete metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve fact related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsPatch(params, options)(axios, basePath);
        },
        /**
         * Create metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdFactsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourceResponseSchema> {
            return DefaultApiFp(configuration).metricsIdGet(params, options)(axios, basePath);
        },
        /**
         * Delete metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdLabelsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve label related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdLabelsPatch(params, options)(axios, basePath);
        },
        /**
         * Create metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdLabelsPost(params, options)(axios, basePath);
        },
        /**
         * Delete metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdMetricsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve metric related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourcesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdMetricsGet(params, options)(axios, basePath);
        },
        /**
         * Update metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdMetricsPatch(params, options)(axios, basePath);
        },
        /**
         * Create metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdMetricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdMetricsPost(params, options)(axios, basePath);
        },
        /**
         * Update a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricPatchResource} [metricPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricPatchResource?: MetricPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).metricsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve attribute references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create metric relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsAttributesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve fact references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create metric relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsFactsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsLabelsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve label references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsLabelsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsLabelsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create metric relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsLabelsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsMetricsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve metric references related to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsMetricsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsMetricsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create metric relationship to a metric resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsIdRelationshipsMetricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).metricsIdRelationshipsMetricsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create a Metric
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {MetricPostResource} [metricPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metricsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                metricPostResource?: MetricPostResource;
            },
            options?: any,
        ): AxiosPromise<MetricResourceResponseSchema> {
            return DefaultApiFp(configuration).metricsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of source resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTables] Filter by tables (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {string} [sort] source sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTables?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<SourceResourcesResponseSchema> {
            return DefaultApiFp(configuration).sourcesGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).sourcesIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<SourceResourceResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {SourcePatchResource} [sourcePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                sourcePatchResource?: SourcePatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).sourcesIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve table references related to a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdRelationshipsTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TableResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdRelationshipsTablesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve table related to a source resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesIdTablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TableResourcesResponseSchema> {
            return DefaultApiFp(configuration).sourcesIdTablesGet(params, options)(axios, basePath);
        },
        /**
         * Create a Source
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {SourcePostResource} [sourcePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sourcesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                sourcePostResource?: SourcePostResource;
            },
            options?: any,
        ): AxiosPromise<SourceResourceResponseSchema> {
            return DefaultApiFp(configuration).sourcesPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of table resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterSource] Filter by source (csv)
         * @param {string} [filterColumns] Filter by columns (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {string} [sort] table sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterSource?: string;
                filterColumns?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<TableResourcesResponseSchema> {
            return DefaultApiFp(configuration).tablesGet(params, options)(axios, basePath);
        },
        /**
         * Delete a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).tablesIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] table fields to include (csv)
         * @param {string} [include] table relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TableResourceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdGet(params, options)(axios, basePath);
        },
        /**
         * Update a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TablePatchResource} [tablePatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tablePatchResource?: TablePatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).tablesIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve source references related to a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdRelationshipsSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<SourceResourceReferenceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdRelationshipsSourcesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve source related to a table resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] source fields to include (csv)
         * @param {string} [include] source relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesIdSourcesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<SourceResourceResponseSchema> {
            return DefaultApiFp(configuration).tablesIdSourcesGet(params, options)(axios, basePath);
        },
        /**
         * Create a Table
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TablePostResource} [tablePostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tablePostResource?: TablePostResource;
            },
            options?: any,
        ): AxiosPromise<TableResourceResponseSchema> {
            return DefaultApiFp(configuration).tablesPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of tag resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterDatasets] Filter by datasets (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {string} [sort] tag sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterLabels?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterDatasets?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<TagResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsGet(params, options)(axios, basePath);
        },
        /**
         * Delete tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesGet(params, options)(axios, basePath);
        },
        /**
         * Update tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesPatch(params, options)(axios, basePath);
        },
        /**
         * Create tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdAttributesPost(params, options)(axios, basePath);
        },
        /**
         * Delete tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve dataset related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsGet(params, options)(axios, basePath);
        },
        /**
         * Update tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsPatch(params, options)(axios, basePath);
        },
        /**
         * Create tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdDatasetsPost(params, options)(axios, basePath);
        },
        /**
         * Delete a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).tagsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Delete tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve fact related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsPatch(params, options)(axios, basePath);
        },
        /**
         * Create tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdFactsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] tag fields to include (csv)
         * @param {string} [include] tag relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<TagResourceResponseSchema> {
            return DefaultApiFp(configuration).tagsIdGet(params, options)(axios, basePath);
        },
        /**
         * Delete tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve label related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourcesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsPatch(params, options)(axios, basePath);
        },
        /**
         * Create tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdLabelsPost(params, options)(axios, basePath);
        },
        /**
         * Update a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {TagPatchResource} [tagPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                tagPatchResource?: TagPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).tagsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Delete tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve attribute references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tag relationship to a attribute resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsAttributesPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsAttributesPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve dataset references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterType] Filter by type (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterReferences] Filter by references (csv)
         * @param {string} [filterGrain] Filter by grain (csv)
         * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
         * @param {string} [filterSourceTable] Filter by sourceTable (csv)
         * @param {string} [filterTitleBase] Filter by titleBase (csv)
         * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] dataset fields to include (csv)
         * @param {string} [include] dataset relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterType?: string;
                filterAttributes?: string;
                filterFacts?: string;
                filterTags?: string;
                filterReferences?: string;
                filterGrain?: string;
                filterReferenceProperties?: string;
                filterSourceTable?: string;
                filterTitleBase?: string;
                filterTitlePattern?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tag relationship to a dataset resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsDatasetsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<DatasetResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsDatasetsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve fact references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsGet(params, options)(axios, basePath);
        },
        /**
         * Update tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tag relationship to a fact resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsFactsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsFactsPost(params, options)(axios, basePath);
        },
        /**
         * Delete tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsDelete(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve label references related to a tag resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsGet(params, options)(axios, basePath);
        },
        /**
         * Update tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsPatch(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create tag relationship to a label resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsIdRelationshipsLabelsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).tagsIdRelationshipsLabelsPost(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create a Tag
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {TagPostResource} [tagPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                tagPostResource?: TagPostResource;
            },
            options?: any,
        ): AxiosPromise<TagResourceResponseSchema> {
            return DefaultApiFp(configuration).tagsPost(params, options)(axios, basePath);
        },
        /**
         * Retrieve a List of visualizationObject resources
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] visualizationObject fields to include (csv)
         * @param {string} [include] visualizationObject relationships to include (csv)
         * @param {string} [sort] visualizationObject sort order (csv)
         * @param {number} [pageLimit] Max number of items
         * @param {number} [pageOffset] Page offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
                sort?: string;
                pageLimit?: number;
                pageOffset?: number;
            },
            options?: any,
        ): AxiosPromise<VisualizationObjectResourcesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourcesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdAttributesGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Delete a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdDelete(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DefaultApiFp(configuration).visualizationObjectsIdDelete(params, options)(axios, basePath);
        },
        /**
         * Retrieve fact related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourcesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdFactsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {string} [fields] visualizationObject fields to include (csv)
         * @param {string} [include] visualizationObject relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<VisualizationObjectResourceResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdGet(params, options)(axios, basePath);
        },
        /**
         * Retrieve label related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourcesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdLabelsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve metric related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourcesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdMetricsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Update a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {VisualizationObjectPatchResource} [visualizationObjectPatchResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdPatch(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                visualizationObjectPatchResource?: VisualizationObjectPatchResource;
            },
            options?: any,
        ): AxiosPromise<Info> {
            return DefaultApiFp(configuration).visualizationObjectsIdPatch(params, options)(axios, basePath);
        },
        /**
         * Retrieve attribute references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterGranularity] Filter by granularity (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] attribute fields to include (csv)
         * @param {string} [include] attribute relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsAttributesGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterGranularity?: string;
                filterLabels?: string;
                filterTags?: string;
                filterDataset?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<AttributeResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdRelationshipsAttributesGet(
                params,
                options,
            )(axios, basePath);
        },
        /**
         * Retrieve fact references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterDataset] Filter by dataset (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] fact fields to include (csv)
         * @param {string} [include] fact relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsFactsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterTags?: string;
                filterDataset?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<FactResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdRelationshipsFactsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve label references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterAttribute] Filter by attribute (csv)
         * @param {string} [filterTags] Filter by tags (csv)
         * @param {string} [filterPrimary] Filter by primary (csv)
         * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] label fields to include (csv)
         * @param {string} [include] label relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsLabelsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterAttribute?: string;
                filterTags?: string;
                filterPrimary?: string;
                filterSourceColumn?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<LabelResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdRelationshipsLabelsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve metric references related to a visualizationObject resource
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {string} id
         * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
         * @param {string} [filterTitle] Filter by title (csv)
         * @param {string} [filterDescription] Filter by description (csv)
         * @param {string} [filterMaql] Filter by maql (csv)
         * @param {string} [filterAst] Filter by ast (csv)
         * @param {string} [filterFacts] Filter by facts (csv)
         * @param {string} [filterAttributes] Filter by attributes (csv)
         * @param {string} [filterLabels] Filter by labels (csv)
         * @param {string} [filterMetrics] Filter by metrics (csv)
         * @param {string} [filterId] Filter by id (csv)
         * @param {string} [fields] metric fields to include (csv)
         * @param {string} [include] metric relationships to include (csv)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsIdRelationshipsMetricsGet(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                id: string;
                filter?: { [key: string]: object };
                filterTitle?: string;
                filterDescription?: string;
                filterMaql?: string;
                filterAst?: string;
                filterFacts?: string;
                filterAttributes?: string;
                filterLabels?: string;
                filterMetrics?: string;
                filterId?: string;
                fields?: string;
                include?: string;
            },
            options?: any,
        ): AxiosPromise<MetricResourceReferencesResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsIdRelationshipsMetricsGet(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Create a VisualizationObject
         * @param {'application/vnd.api+json' | 'application/json'} contentType
         * @param {VisualizationObjectPostResource} [visualizationObjectPostResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visualizationObjectsPost(
            params: {
                contentType: "application/vnd.api+json" | "application/json";
                visualizationObjectPostResource?: VisualizationObjectPostResource;
            },
            options?: any,
        ): AxiosPromise<VisualizationObjectResourceResponseSchema> {
            return DefaultApiFp(configuration).visualizationObjectsPost(params, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * Retrieve a List of attribute resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {string} [sort] attribute sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<AttributeResourcesResponseSchema>;

    /**
     * Retrieve dataset related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceResponseSchema>;

    /**
     * Delete a Attribute
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceResponseSchema>;

    /**
     * Retrieve label related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourcesResponseSchema>;

    /**
     * Update a Attribute
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributePatchResource} [attributePatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributePatchResource?: AttributePatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve dataset references related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferenceResponseSchema>;

    /**
     * Retrieve label references related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Retrieve tag references related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourceReferencesResponseSchema>;

    /**
     * Retrieve tag related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourcesResponseSchema>;

    /**
     * Create a Attribute
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {AttributePostResource} [attributePostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    attributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            attributePostResource?: AttributePostResource;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceResponseSchema>;

    /**
     * Retrieve a List of dataset resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {string} [sort] dataset sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<DatasetResourcesResponseSchema>;

    /**
     * Retrieve attribute related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourcesResponseSchema>;

    /**
     * Retrieve dataset related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourcesResponseSchema>;

    /**
     * Delete a Dataset
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve fact related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourcesResponseSchema>;

    /**
     * Retrieve a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceResponseSchema>;

    /**
     * Update a Dataset
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetPatchResource} [datasetPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetPatchResource?: DatasetPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve attribute references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Retrieve dataset references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Retrieve fact references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve tag references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourceReferencesResponseSchema>;

    /**
     * Retrieve tag related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourcesResponseSchema>;

    /**
     * Create a Dataset
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {DatasetPostResource} [datasetPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    datasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            datasetPostResource?: DatasetPostResource;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceResponseSchema>;

    /**
     * Retrieve a List of fact resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {string} [sort] fact sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<FactResourcesResponseSchema>;

    /**
     * Retrieve dataset related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceResponseSchema>;

    /**
     * Delete a Fact
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceResponseSchema>;

    /**
     * Update a Fact
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactPatchResource} [factPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factPatchResource?: FactPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve dataset references related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferenceResponseSchema>;

    /**
     * Retrieve tag references related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourceReferencesResponseSchema>;

    /**
     * Retrieve tag related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourcesResponseSchema>;

    /**
     * Create a Fact
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {FactPostResource} [factPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    factsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            factPostResource?: FactPostResource;
        },
        options?: any,
    ): AxiosPromise<FactResourceResponseSchema>;

    /**
     * Retrieve a List of label resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {string} [sort] label sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<LabelResourcesResponseSchema>;

    /**
     * Retrieve attribute related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceResponseSchema>;

    /**
     * Delete a Label
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceResponseSchema>;

    /**
     * Update a Label
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelPatchResource} [labelPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelPatchResource?: LabelPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve attribute references related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferenceResponseSchema>;

    /**
     * Retrieve tag references related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourceReferencesResponseSchema>;

    /**
     * Retrieve tag related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourcesResponseSchema>;

    /**
     * Create a Label
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {LabelPostResource} [labelPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    labelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            labelPostResource?: LabelPostResource;
        },
        options?: any,
    ): AxiosPromise<LabelResourceResponseSchema>;

    /**
     * Retrieve a List of metaElement resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {string} [sort] metaElement sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourcesResponseSchema>;

    /**
     * Retrieve a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourceResponseSchema>;

    /**
     * Retrieve metaElement related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementIdMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourceResponseSchema>;

    /**
     * Retrieve metaElement references related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metaElementIdRelationshipsMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetaElementResourceReferenceResponseSchema>;

    /**
     * Retrieve a List of metric resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {string} [sort] metric sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<MetricResourcesResponseSchema>;

    /**
     * Delete metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Retrieve attribute related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourcesResponseSchema>;

    /**
     * Update metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Delete a Metric
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Delete metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve fact related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourcesResponseSchema>;

    /**
     * Update metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourceResponseSchema>;

    /**
     * Delete metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Retrieve label related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourcesResponseSchema>;

    /**
     * Update metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Delete metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdMetricsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Retrieve metric related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourcesResponseSchema>;

    /**
     * Update metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdMetricsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdMetricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Update a Metric
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricPatchResource} [metricPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricPatchResource?: MetricPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Retrieve attribute references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Update metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Delete metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve fact references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Update metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Delete metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Retrieve label references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Update metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Delete metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsMetricsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Retrieve metric references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Update metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsMetricsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Create metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsIdRelationshipsMetricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Create a Metric
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {MetricPostResource} [metricPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    metricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            metricPostResource?: MetricPostResource;
        },
        options?: any,
    ): AxiosPromise<MetricResourceResponseSchema>;

    /**
     * Retrieve a List of source resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTables] Filter by tables (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {string} [sort] source sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTables?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<SourceResourcesResponseSchema>;

    /**
     * Delete a Source
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a source resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<SourceResourceResponseSchema>;

    /**
     * Update a Source
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcePatchResource} [sourcePatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcePatchResource?: SourcePatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve table references related to a source resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdRelationshipsTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TableResourceReferencesResponseSchema>;

    /**
     * Retrieve table related to a source resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesIdTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TableResourcesResponseSchema>;

    /**
     * Create a Source
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {SourcePostResource} [sourcePostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            sourcePostResource?: SourcePostResource;
        },
        options?: any,
    ): AxiosPromise<SourceResourceResponseSchema>;

    /**
     * Retrieve a List of table resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {string} [sort] table sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<TableResourcesResponseSchema>;

    /**
     * Delete a Table
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve a table resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TableResourceResponseSchema>;

    /**
     * Update a Table
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablePatchResource} [tablePatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablePatchResource?: TablePatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve source references related to a table resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdRelationshipsSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<SourceResourceReferenceResponseSchema>;

    /**
     * Retrieve source related to a table resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesIdSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<SourceResourceResponseSchema>;

    /**
     * Create a Table
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TablePostResource} [tablePostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tablePostResource?: TablePostResource;
        },
        options?: any,
    ): AxiosPromise<TableResourceResponseSchema>;

    /**
     * Retrieve a List of tag resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {string} [sort] tag sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<TagResourcesResponseSchema>;

    /**
     * Delete tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Retrieve attribute related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourcesResponseSchema>;

    /**
     * Update tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Delete tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Retrieve dataset related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourcesResponseSchema>;

    /**
     * Update tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Delete a Tag
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Delete tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve fact related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourcesResponseSchema>;

    /**
     * Update tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<TagResourceResponseSchema>;

    /**
     * Delete tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Retrieve label related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourcesResponseSchema>;

    /**
     * Update tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Update a Tag
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagPatchResource} [tagPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagPatchResource?: TagPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Delete tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Retrieve attribute references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Update tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Delete tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Retrieve dataset references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Update tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<DatasetResourceReferencesResponseSchema>;

    /**
     * Delete tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve fact references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Update tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Delete tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Retrieve label references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Update tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Create tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Create a Tag
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TagPostResource} [tagPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    tagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tagPostResource?: TagPostResource;
        },
        options?: any,
    ): AxiosPromise<TagResourceResponseSchema>;

    /**
     * Retrieve a List of visualizationObject resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] visualizationObject fields to include (csv)
     * @param {string} [include] visualizationObject relationships to include (csv)
     * @param {string} [sort] visualizationObject sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ): AxiosPromise<VisualizationObjectResourcesResponseSchema>;

    /**
     * Retrieve attribute related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourcesResponseSchema>;

    /**
     * Delete a VisualizationObject
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Retrieve fact related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourcesResponseSchema>;

    /**
     * Retrieve a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] visualizationObject fields to include (csv)
     * @param {string} [include] visualizationObject relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<VisualizationObjectResourceResponseSchema>;

    /**
     * Retrieve label related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourcesResponseSchema>;

    /**
     * Retrieve metric related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourcesResponseSchema>;

    /**
     * Update a VisualizationObject
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {VisualizationObjectPatchResource} [visualizationObjectPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            visualizationObjectPatchResource?: VisualizationObjectPatchResource;
        },
        options?: any,
    ): AxiosPromise<Info>;

    /**
     * Retrieve attribute references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<AttributeResourceReferencesResponseSchema>;

    /**
     * Retrieve fact references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<FactResourceReferencesResponseSchema>;

    /**
     * Retrieve label references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<LabelResourceReferencesResponseSchema>;

    /**
     * Retrieve metric references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsIdRelationshipsMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ): AxiosPromise<MetricResourceReferencesResponseSchema>;

    /**
     * Create a VisualizationObject
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {VisualizationObjectPostResource} [visualizationObjectPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    visualizationObjectsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            visualizationObjectPostResource?: VisualizationObjectPostResource;
        },
        options?: any,
    ): AxiosPromise<VisualizationObjectResourceResponseSchema>;
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * Retrieve a List of attribute resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {string} [sort] attribute sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve dataset related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Attribute
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve label related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update a Attribute
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributePatchResource} [attributePatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributePatchResource?: AttributePatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve dataset references related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label references related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag references related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag related to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesIdTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Attribute
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {AttributePostResource} [attributePostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public attributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            attributePostResource?: AttributePostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).attributesPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of dataset resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {string} [sort] dataset sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve attribute related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve dataset related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Dataset
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve fact related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Dataset
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetPatchResource} [datasetPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetPatchResource?: DatasetPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve attribute references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve dataset references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve fact references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag references related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag related to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsIdTagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Create a Dataset
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {DatasetPostResource} [datasetPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public datasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            datasetPostResource?: DatasetPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).datasetsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of fact resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {string} [sort] fact sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve dataset related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Fact
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Fact
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactPatchResource} [factPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factPatchResource?: FactPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve dataset references related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag references related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag related to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsIdTagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Create a Fact
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {FactPostResource} [factPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public factsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            factPostResource?: FactPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).factsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of label resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {string} [sort] label sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve attribute related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Label
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Label
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelPatchResource} [labelPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelPatchResource?: LabelPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve attribute references related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag references related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdRelationshipsTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdRelationshipsTagsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve tag related to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsIdTagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsIdTagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Create a Label
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {LabelPostResource} [labelPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public labelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            labelPostResource?: LabelPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).labelsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of metaElement resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {string} [sort] metaElement sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve metaElement related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementIdMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementIdMetaElementGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve metaElement references related to a metaElement resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [filterName] Filter by name (csv)
     * @param {string} [filterParent] Filter by parent (csv)
     * @param {string} [filterChildren] Filter by children (csv)
     * @param {string} [filterNatures] Filter by natures (csv)
     * @param {string} [fields] metaElement fields to include (csv)
     * @param {string} [include] metaElement relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metaElementIdRelationshipsMetaElementGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterId?: string;
            filterName?: string;
            filterParent?: string;
            filterChildren?: string;
            filterNatures?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metaElementIdRelationshipsMetaElementGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a List of metric resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {string} [sort] metric sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attribute related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Metric
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve fact related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdLabelsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdLabelsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdMetricsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdMetricsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve metric related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdMetricsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdMetricsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdMetricsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdMetricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdMetricsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update a Metric
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricPatchResource} [metricPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricPatchResource?: MetricPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attribute references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve fact references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsLabelsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsLabelsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsMetricsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsMetricsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve metric references related to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsMetricsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsMetricsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsMetricsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create metric relationship to a metric resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {MetricResourceReferencesResponseSchema} [metricResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsIdRelationshipsMetricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            metricResourceReferencesResponseSchema?: MetricResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsIdRelationshipsMetricsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Metric
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {MetricPostResource} [metricPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metricsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            metricPostResource?: MetricPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).metricsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of source resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTables] Filter by tables (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {string} [sort] source sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTables?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete a Source
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a source resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Source
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {SourcePatchResource} [sourcePatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            sourcePatchResource?: SourcePatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve table references related to a source resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdRelationshipsTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdRelationshipsTablesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve table related to a source resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesIdTablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesIdTablesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Source
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {SourcePostResource} [sourcePostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sourcesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            sourcePostResource?: SourcePostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).sourcesPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of table resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterSource] Filter by source (csv)
     * @param {string} [filterColumns] Filter by columns (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {string} [sort] table sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterSource?: string;
            filterColumns?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete a Table
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a table resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] table fields to include (csv)
     * @param {string} [include] table relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Table
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TablePatchResource} [tablePatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tablePatchResource?: TablePatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve source references related to a table resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdRelationshipsSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdRelationshipsSourcesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve source related to a table resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] source fields to include (csv)
     * @param {string} [include] source relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesIdSourcesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesIdSourcesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Table
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TablePostResource} [tablePostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tablesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tablePostResource?: TablePostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tablesPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of tag resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterDatasets] Filter by datasets (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {string} [sort] tag sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterLabels?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterDatasets?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attribute related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve dataset related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a Tag
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsDelete(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve fact related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Create tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdFactsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] tag fields to include (csv)
     * @param {string} [include] tag relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsGet(params, options)(this.axios, this.basePath);
    }

    /**
     * Update tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Create tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdLabelsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Update a Tag
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {TagPatchResource} [tagPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            tagPatchResource?: TagPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdPatch(params, options)(this.axios, this.basePath);
    }

    /**
     * Delete tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attribute references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tag relationship to a attribute resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {AttributeResourceReferencesResponseSchema} [attributeResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsAttributesPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            attributeResourceReferencesResponseSchema?: AttributeResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsAttributesPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve dataset references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterType] Filter by type (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterReferences] Filter by references (csv)
     * @param {string} [filterGrain] Filter by grain (csv)
     * @param {string} [filterReferenceProperties] Filter by referenceProperties (csv)
     * @param {string} [filterSourceTable] Filter by sourceTable (csv)
     * @param {string} [filterTitleBase] Filter by titleBase (csv)
     * @param {string} [filterTitlePattern] Filter by titlePattern (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] dataset fields to include (csv)
     * @param {string} [include] dataset relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterType?: string;
            filterAttributes?: string;
            filterFacts?: string;
            filterTags?: string;
            filterReferences?: string;
            filterGrain?: string;
            filterReferenceProperties?: string;
            filterSourceTable?: string;
            filterTitleBase?: string;
            filterTitlePattern?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tag relationship to a dataset resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {DatasetResourceReferencesResponseSchema} [datasetResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsDatasetsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            datasetResourceReferencesResponseSchema?: DatasetResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsDatasetsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve fact references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tag relationship to a fact resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {FactResourceReferencesResponseSchema} [factResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsFactsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            factResourceReferencesResponseSchema?: FactResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsFactsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label references related to a tag resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create tag relationship to a label resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {LabelResourceReferencesResponseSchema} [labelResourceReferencesResponseSchema]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsIdRelationshipsLabelsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            labelResourceReferencesResponseSchema?: LabelResourceReferencesResponseSchema;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsIdRelationshipsLabelsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Create a Tag
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {TagPostResource} [tagPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tagsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            tagPostResource?: TagPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).tagsPost(params, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a List of visualizationObject resources
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] visualizationObject fields to include (csv)
     * @param {string} [include] visualizationObject relationships to include (csv)
     * @param {string} [sort] visualizationObject sort order (csv)
     * @param {number} [pageLimit] Max number of items
     * @param {number} [pageOffset] Page offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
            sort?: string;
            pageLimit?: number;
            pageOffset?: number;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attribute related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdAttributesGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Delete a VisualizationObject
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdDelete(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdDelete(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve fact related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {string} [fields] visualizationObject fields to include (csv)
     * @param {string} [include] visualizationObject relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve metric related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdMetricsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Update a VisualizationObject
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {VisualizationObjectPatchResource} [visualizationObjectPatchResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdPatch(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            visualizationObjectPatchResource?: VisualizationObjectPatchResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdPatch(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve attribute references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterGranularity] Filter by granularity (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] attribute fields to include (csv)
     * @param {string} [include] attribute relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdRelationshipsAttributesGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterGranularity?: string;
            filterLabels?: string;
            filterTags?: string;
            filterDataset?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdRelationshipsAttributesGet(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     * Retrieve fact references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterDataset] Filter by dataset (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] fact fields to include (csv)
     * @param {string} [include] fact relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdRelationshipsFactsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterTags?: string;
            filterDataset?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdRelationshipsFactsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve label references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterAttribute] Filter by attribute (csv)
     * @param {string} [filterTags] Filter by tags (csv)
     * @param {string} [filterPrimary] Filter by primary (csv)
     * @param {string} [filterSourceColumn] Filter by sourceColumn (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] label fields to include (csv)
     * @param {string} [include] label relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdRelationshipsLabelsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterAttribute?: string;
            filterTags?: string;
            filterPrimary?: string;
            filterSourceColumn?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdRelationshipsLabelsGet(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve metric references related to a visualizationObject resource
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {string} id
     * @param {{ [key: string]: object; }} [filter] Customizable query (experimental)
     * @param {string} [filterTitle] Filter by title (csv)
     * @param {string} [filterDescription] Filter by description (csv)
     * @param {string} [filterMaql] Filter by maql (csv)
     * @param {string} [filterAst] Filter by ast (csv)
     * @param {string} [filterFacts] Filter by facts (csv)
     * @param {string} [filterAttributes] Filter by attributes (csv)
     * @param {string} [filterLabels] Filter by labels (csv)
     * @param {string} [filterMetrics] Filter by metrics (csv)
     * @param {string} [filterId] Filter by id (csv)
     * @param {string} [fields] metric fields to include (csv)
     * @param {string} [include] metric relationships to include (csv)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsIdRelationshipsMetricsGet(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            id: string;
            filter?: { [key: string]: object };
            filterTitle?: string;
            filterDescription?: string;
            filterMaql?: string;
            filterAst?: string;
            filterFacts?: string;
            filterAttributes?: string;
            filterLabels?: string;
            filterMetrics?: string;
            filterId?: string;
            fields?: string;
            include?: string;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsIdRelationshipsMetricsGet(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     * Create a VisualizationObject
     * @param {'application/vnd.api+json' | 'application/json'} contentType
     * @param {VisualizationObjectPostResource} [visualizationObjectPostResource]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public visualizationObjectsPost(
        params: {
            contentType: "application/vnd.api+json" | "application/json";
            visualizationObjectPostResource?: VisualizationObjectPostResource;
        },
        options?: any,
    ) {
        return DefaultApiFp(this.configuration).visualizationObjectsPost(params, options)(
            this.axios,
            this.basePath,
        );
    }
}
